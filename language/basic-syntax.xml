  <chapter id="language.basic-syntax">
   <title>Basic syntax</title>

   <sect1 id="language.basic-syntax.phpmode">
    <title>Escaping from HTML</title>
  
    <para>
     There are four ways of escaping from HTML and entering "PHP code
     mode":</para>

    <para>
     <example>
      <title>Ways of escaping from HTML</title>
      <programlisting>
1.  &lt;? echo ("this is the simplest, an SGML processing instruction\n"); ?>
 
2.  &lt;?php echo("if you want to serve XML documents, do like this\n"); ?>

3.  &lt;script language="php"> 
        echo ("some editors (like FrontPage) don't
              like processing instructions");
    &lt;/script>

4.  &lt;% echo ("You may optionally use ASP-style tags"); %>
    &lt;%= $variable; # This is a shortcut for "&lt;%echo .." %>
      </programlisting>
     </example></para>

    <para>
     The first way is only available if short tags have been
     enabled. This can be done via the <function>short_tags</function>
     function, by enabling the <link linkend="ini.short-open-tag">short_open_tag</link> configuration
     setting in the PHP config file, or by compiling PHP with the
     --enable-short-tags option to <command>configure</command>.</para>

    <para>
     The fourth way is only available if ASP-style tags have been
     enabled using the <link linkend="ini.asp-tags">asp_tags</link>
     configuration setting.

    <note>
     <para>Support for ASP-style tags was added in 3.0.4.</para>
    </note></para>

    <para>
     The closing tag for the block will include the immediately
     trailing newline if one is present.</para></sect1>

   <sect1 id="language.basic-syntax.instruction-separation">
    <title>Instruction separation</title>

    <simpara>
     Instructions are separated the same as in C or perl - terminate
     each statement with a semicolon.</simpara>

    <para>
     The closing tag (?&gt;) also implies the end of the statement, so the
     following are equivalent:

     <informalexample>
      <programlisting>
&lt;?php
    echo "This is a test";
?>

&lt;?php echo "This is a test" ?>
      </programlisting>
     </informalexample></para></sect1>

   <sect1 id="language.basic-syntax.comments">
    <title>Comments</title>
   
    <para>
     PHP supports 'C', 'C++' and Unix shell-style comments. For example:

    <informalexample><programlisting>
&lt;?php
    echo "This is a test"; // This is a one-line c++ style comment
    /* This is a multi line comment
       yet another line of comment */
    echo "This is yet another test";
    echo "One Final Test"; # This is shell-style style comment
?>
     </programlisting>
    </informalexample></para>

    <simpara>
     The "one-line" comment styles actually only comment to the
     end of the line or the current block of PHP code, whichever
     comes first.</simpara>
    <informalexample><programlisting>
&lt;h1>This is an &lt;?# echo "simple";?> example.&lt;/h1>
&lt;p>The header above will say 'This is an example'.
</programlisting></informalexample> 

    <simpara>
     You should be careful not to nest 'C' style comments, which can
     happen when commenting out large blocks.</simpara>

    <informalexample><programlisting>
&lt;?php
 /* 
    echo "This is a test"; /* This comment will cause a problem */
 */
?>
    </programlisting></informalexample></sect1>
  </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
