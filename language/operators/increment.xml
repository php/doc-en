<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="language.operators.increment">
 <title>Incrementing/Decrementing Operators</title>
 <para>
  PHP supports C-style pre- and post-increment and decrement
  operators.
 </para>
 <note>
  <simpara>
   The increment/decrement operators only affect numbers and strings.
   Arrays, objects, booleans and resources are not affected.
   Decrementing &null; values has no effect too, but incrementing them
   results in <literal>1</literal>.
  </simpara>
 </note>
 <table>
  <title>Increment/decrement Operators</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Example</entry>
     <entry>Name</entry>
     <entry>Effect</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Pre-increment</entry>
     <entry>Increments <varname>$a</varname> by one, then returns <varname>$a</varname>.</entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Post-increment</entry>
     <entry>Returns <varname>$a</varname>, then increments <varname>$a</varname> by one.</entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Pre-decrement</entry>
     <entry>Decrements <varname>$a</varname> by one, then returns <varname>$a</varname>.</entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Post-decrement</entry>
     <entry>Returns <varname>$a</varname>, then decrements <varname>$a</varname> by one.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Here's a simple example script:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Postincrement</h3>";
$a = 5;
echo "Should be 5: " . $a++ . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Preincrement</h3>";
$a = 5;
echo "Should be 6: " . ++$a . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Postdecrement</h3>";
$a = 5;
echo "Should be 5: " . $a-- . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";

echo "<h3>Predecrement</h3>";
$a = 5;
echo "Should be 4: " . --$a . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  PHP follows Perl's convention when dealing with arithmetic operations
  on character variables and not C's.  For example, in PHP and Perl
  <literal>$a = 'Z'; $a++;</literal> turns <literal>$a</literal> into <literal>'AA'</literal>, while in C
  <literal>a = 'Z'; a++;</literal> turns <literal>a</literal> into <literal>'['</literal>
  (ASCII value of <literal>'Z'</literal> is 90, ASCII value of <literal>'['</literal> is 91).
  Note that character variables can be incremented but not decremented and
  even so only plain ASCII letters and digits (a-z, A-Z and 0-9) are supported.
  Incrementing/decrementing other character variables has no effect, the
  original string is unchanged.
  <example>
   <title>Arithmetic Operations on Character Variables</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Alphabetic strings ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Alphanumeric strings behave differently
echo '== Alphanumeric strings ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Alphabetic strings ==
X
Y
Z
AA
AB
AC
== Alphanumeric strings ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
 </para>
 <para>
  Incrementing or decrementing booleans has no effect.
 </para>
</sect1>
