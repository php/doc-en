<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="language.operators.type">
 <title>Type Operators</title>
 <titleabbrev>Type</titleabbrev>
 <para>
  <literal>instanceof</literal> is used to determine whether a PHP variable
  is an instantiated object of a certain
  <link linkend="language.oop5.basic.class">class</link>:
  <example>
   <title>Using <literal>instanceof</literal> with classes</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal> can also be used to determine whether a variable
  is an instantiated object of a class that inherits from a parent class:
  <example>
   <title>Using <literal>instanceof</literal> with inherited classes</title>
   <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  To check if an object is <emphasis>not</emphasis> an instanceof a class, the
  <link linkend="language.operators.logical">logical <literal>not</literal>
   operator</link> can be used.
  <example>
   <title>Using <literal>instanceof</literal> to check if object is <emphasis>not</emphasis> an
    instanceof a class</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Lastly, <literal>instanceof</literal> can also be used to determine whether
  a variable is an instantiated object of a class that implements an
  <link linkend="language.oop5.interfaces">interface</link>:
  <example>
   <title>Using <literal>instanceof</literal> with interfaces</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Although <literal>instanceof</literal> is usually used with a literal classname,
  it can also be used with another object or a string variable:
  <example>
   <title>Using <literal>instanceof</literal> with other variables</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b is an object of class MyClass
var_dump($a instanceof $c); // $c is a string 'MyClass'
var_dump($a instanceof $d); // $d is a string 'NotMyClass'
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  instanceof does not throw any error if the variable being tested is not
  an object, it simply returns &false;. Constants, however, were not allowed
  prior to PHP 7.3.0.
  <example>
   <title>Using <literal>instanceof</literal> to test other variables</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = imagecreate(5, 5);
var_dump($a instanceof stdClass); // $a is an integer
var_dump($b instanceof stdClass); // $b is NULL
var_dump($c instanceof stdClass); // $c is a resource
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para>
 <para>
  As of PHP 7.3.0, constants are allowed on the left-hand-side of the
  <literal>instanceof</literal> operator.
  <example>
   <title>Using <literal>instanceof</literal> to test constants</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  As of PHP 8.0.0, <literal>instanceof</literal> can now be used with arbitrary expressions.
  The expression must be wrapped in parentheses and produce a <type>string</type>.
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title>Using <literal>instanceof</literal> with an arbitrary expression</title>
   <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  The <literal>instanceof</literal> operator has a functional variant
  with the <function>is_a</function> function.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
