<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<sect1 xml:id="language.types.object">
 <title>Objects</title>

 <sect2 xml:id="language.types.object.init">
  <title>Object Initialization</title>

  <para>
   To create a new <type>object</type>, use the <literal>new</literal> statement
   to instantiate a class:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class foo
{
    function do_foo()
    {
        echo "Doing foo."; 
    }
}

$bar = new foo;
$bar->do_foo();
?>
]]>
   </programlisting>
  </informalexample>

  <simpara>
   For a full discussion, see the
   <link linkend="language.oop5">Classes and Objects</link> chapter.
  </simpara>

 </sect2>
 
 <sect2 xml:id="language.types.object.casting">
  <title>Converting to object</title>
  
  <para>
   If an <type>object</type> is converted to an <type>object</type>, it is not
   modified. If a value of any other type is converted to an
   <type>object</type>, a new instance of the <classname>stdClass</classname>
   built-in class is created. If the value was &null;, the new instance will be
   empty. An <type>array</type> converts to an <type>object</type> with properties
   named by keys and corresponding values. Note that in this case before PHP 7.2.0 numeric keys
   have been inaccessible unless iterated.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$obj = (object) array('1' => 'foo');
var_dump(isset($obj->{'1'})); // outputs 'bool(true)' as of PHP 7.2.0; 'bool(false)' previously
var_dump(key($obj)); // outputs 'string(1) "1"' as of PHP 7.2.0; 'int(1)' previously
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   For any other value, a member variable named <literal>scalar</literal> will contain 
   the value.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$obj = (object) 'ciao';
echo $obj->scalar;  // outputs 'ciao'
?>
]]>
   </programlisting>
  </informalexample>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
