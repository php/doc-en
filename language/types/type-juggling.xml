<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<sect1 xml:id="language.types.type-juggling">
 <title>Type Juggling</title>

 <simpara>
  PHP does not require (or support) explicit type definition in variable
  declaration; a variable's type is determined by the context in which the
  variable is used. That is to say, if a <type>string</type> value is assigned
  to variable <varname>$var</varname>, <varname>$var</varname> becomes a
  <type>string</type>. If an <type>int</type> value is then assigned to
  <varname>$var</varname>, it becomes an <type>int</type>.
 </simpara>

 <para>
  An example of PHP's automatic type conversion is the multiplication operator '*'.
  If either operand is a <type>float</type>, then both operands are evaluated as
  <type>float</type>s, and the result will be a <type>float</type>. Otherwise,
  the operands will be interpreted as <type>int</type>s, and the result will
  also be an <type>int</type>. Note that this does <emphasis>not</emphasis>
  change the types of the operands themselves; the only change is in how the
  operands are evaluated and what the type of the expression itself is.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$foo = "1";  // $foo is string (ASCII 49)
$foo *= 2;   // $foo is now an integer (2)
$foo = $foo * 1.3;  // $foo is now a float (2.6)
$foo = 5 * "10 Little Piggies"; // $foo is integer (50)
$foo = 5 * "10 Small Pigs";     // $foo is integer (50)
?>
]]>
<!-- bad example, no real operator (must be used with variable, modifies it too)
$foo++;      // $foo is the string "2" (ASCII 50)

TODO: explain ++/- - behaviour with strings

examples:

++'001' = '002'
++'abc' = 'abd'
++'xyz' = 'xza'
++'9.9' = '9.0'
++'-3'  = '-4'
- -'9'   = 8 (integer!)
- -'5.5' = '5.5'
- -'-9'  = -10 (integer)
- -'09'  = 8 (integer)
- -'abc' = 'abc'

-->
  </programlisting>
 </informalexample>

 <simpara>
  If the last two examples above seem odd, see
  <link linkend="language.types.string.conversion">String conversion to
  numbers</link>.
 </simpara>

 <simpara>
  To force a variable to be evaluated as a certain type, see the section on
  <link linkend="language.types.typecasting">Type casting</link>. To change the
  type of a variable, see the <function>settype</function> function.
 </simpara>

 <para>
  To test any of the examples in this section, use the
  <function>var_dump</function> function.
 </para>

 <note>
  <para>
   The behaviour of an automatic conversion to <type>array</type> is currently
   undefined.
  </para>

  <para>
   Also, because PHP supports indexing into <type>string</type>s via offsets
   using the same syntax as <type>array</type> indexing, the following example
   holds true for all PHP versions:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a is a string
$a[0] = 'b';   // $a is still a string
echo $a;       // bar
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   See the section titled <link linkend="language.types.string.substr">String
   access by character</link> for more information.
  </para>
 </note>

 <sect2 xml:id="language.types.typecasting">
  <title>Type Casting</title>

  <para>
   Type casting in PHP works much as it does in C: the name of the desired type
   is written in parentheses before the variable which is to be cast.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;   // $foo is an integer
$bar = (boolean) $foo;   // $bar is a boolean
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   The casts allowed are:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>(int), (integer) - cast to <type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara>(bool), (boolean) - cast to <type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara>(float), (double), (real) - cast to <type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara>(string) - cast to <type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>(array) - cast to <type>array</type></simpara>
   </listitem>
   <listitem>
    <simpara>(object) - cast to <type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara>(unset) - cast to <type>NULL</type></simpara>
   </listitem>
  </itemizedlist>

  <para>
   (binary) casting and b prefix exists for forward support. Note that 
   the (binary) cast is essential the same as (string), but it should not be relied 
   upon.
  </para>

  <para>
   The (unset) cast has been deprecated as of PHP 7.2.0. Note that the (unset) cast 
   is the same as assigning the value <type>NULL</type> to the variable or call. The 
   (unset) cast is removed as of PHP 8.0.0.
  </para>

  <para>
   Note that tabs and spaces are allowed inside the parentheses, so the
   following are functionally equivalent:
  </para>
   
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
   </programlisting>

   <para>
    Casting literal <type>string</type>s and variables to binary
    <type>string</type>s:
   </para>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <note>
   <para>
    Instead of casting a variable to a <type>string</type>, it is also possible
    to enclose the variable in double quotes.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo is an integer
$str = "$foo";        // $str is a string
$fst = (string) $foo; // $fst is also a string

// This prints out that "they are the same"
if ($fst === $str) {
    echo "they are the same";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>
   
  <para>
   It may not be obvious exactly what will happen when casting between certain
   types. For more information, see these sections:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <link linkend="language.types.boolean.casting">Converting to boolean</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.integer.casting">Converting to integer</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.float.casting">Converting to float</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.string.casting">Converting to string</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.array.casting">Converting to array</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.object.casting">Converting to object</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.resource.casting">Converting to
     resource</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.null.casting">Converting to NULL</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="types.comparisons">The type comparison tables</link>
    </simpara>
   </listitem>
  </itemizedlist>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
