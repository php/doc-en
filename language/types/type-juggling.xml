<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="language.types.type-juggling">
 <title>Type Juggling</title>

 <para>
  PHP does not require explicit type definition in variable declaration.
  In this case, the type of a variable is determined by the value it stores.
  That is to say, if a <type>string</type> is assigned to variable
  <varname>$var</varname>, then <varname>$var</varname> is of type
  <type>string</type>. If afterwards an <type>int</type> value is then assigned
  to <varname>$var</varname>, it will be of type <type>int</type>.
 </para>

 <para>
  PHP may attempt to convert the type of a value to another automatically
  in certain contextes. The different contextes which exist are:
  <itemizedlist>
   <listitem>
    <simpara>Numeric</simpara>
   </listitem>
   <listitem>
    <simpara>String</simpara>
   </listitem>
   <listitem>
    <simpara>Logical</simpara>
   </listitem>
   <listitem>
    <simpara>Integral and string</simpara>
   </listitem>
   <listitem>
    <simpara>Comparative</simpara>
   </listitem>
   <listitem>
    <simpara>Function</simpara>
   </listitem>
  </itemizedlist>
 </para>

 <note>
  <simpara>
   When a value needs to be interpreted as a different type, the value itself
   does <emphasis>not</emphasis> change types.
  </simpara>
 </note>

 <para>
  To force a variable to be evaluated as a certain type, see the section on
  <link linkend="language.types.typecasting">Type casting</link>. To change the
  type of a variable, see the <function>settype</function> function.
 </para>

 <sect2>
  <title>Numeric contexts</title>

  <para>
   This is the context when using an
   <link linkend="language.operators.arithmetic">arithmetical operator</link>.
  </para>

  <para>
   In this context if either operand is a <type>float</type> (or not
   interpretable as an <type>int</type>), both operands are interpreted as
   <type>float</type>s, and the result will be a <type>float</type>.
   Otherwise, the operands will be interpreted as <type>int</type>s,
   and the result will also be an <type>int</type>.
   As of PHP 8.0.0, if one of the operands cannot be interpreted a
   <classname>TypeError</classname> is thrown.
  </para>
 </sect2>

 <sect2>
  <title>String contexts</title>

  <para>
   This is the context when using <function>echo</function>,
   <function>print</function>, string interpolation, or the string
   <link linkend="language.operators.string">concatenation operator</link>.
  </para>

  <para>
   In this context the value will be interpreted as <type>string</type>.
  </para>
 </sect2>

 <sect2>
  <title>Logical contexts</title>

  <para>
   This is the context when using conditional statements, the
   <link linkend="language.operators.comparison.ternary">ternary operator</link>,
   or a <link linkend="language.operators.logical">logical operator</link>.
  </para>

  <para>
   In this context the value will be interpreted as <type>bool</type>.
  </para>
 </sect2>

 <sect2>
  <title>Integral and string contexts</title>

  <para>
   This is the context when using a
   <link linkend="language.operators.bitwise">bitwise operators</link>.
  </para>

  <para>
   In this context if all operands are of type <type>string</type> the result
   will also be a <type>string</type>.
   Otherwise, the operands will be interpreted as <type>int</type>s,
   and the result will also be an <type>int</type>.
   As of PHP 8.0.0, if one of the operands cannot be interpreted a
   <classname>TypeError</classname> is thrown.
  </para>
 </sect2>

 <sect2>
  <title>Comparative contexts</title>

  <para>
   This is the context when using a
   <link linkend="language.operators.comparison">comparison operator</link>.
  </para>

  <para>
   The type conversions which occur in this context are explained in the
   Comparison with Various Types
   <link linkend="language.operators.comparison.types">table</link>.
  </para>
 </sect2>

 <sect2>
  <title>Function contexts</title>

  <para>
   This is the context when a value is passed to a typed parameter, property,
   or returned from a function which declares a return type.
  </para>

  <para>
   In this context only scalar values may be converted to another scalar value.
   For simple types declarations the behaviour is as follows:
   <itemizedlist>
    <listitem>
     <simpara>
      <type>bool</type> type declaration: value is interpreted as <type>bool</type>.
     </simpara>
     <simpara>
      <type>int</type> type declaration: value is interpreted as <type>int</type>
      if conversion is well-defined. I.e. the string is
      <link linkend="language.types.numeric-strings">numeric</link>.
     </simpara>
     <simpara>
      <type>float</type> type declaration: value is interpreted as <type>float</type>
      if conversion is well-defined. I.e. the string is
      <link linkend="language.types.numeric-strings">numeric</link>.
     </simpara>
     <simpara>
      <type>string</type> type declaration: value is interpreted as <type>string</type>.
     </simpara>
    </listitem>
   </itemizedlist>

   If the type declaration is a union, see the section about
   <link linkend="language.types.declarations.union.coercive">Coercive typing with union types</link>.
  </para>

  <warning>
   <simpara>
    <!-- TODO add link to internal function definition if we have? -->
    Internal functions automatically coerce &null; to scalar types,
    this behaviour is <emphasis>DEPRECATED</emphasis> as of PHP 8.1.0.
   </simpara>
  </warning>
 </sect2>

 <sect2 xml:id="language.types.typecasting">
  <title>Type Casting</title>

  <para>
   Type casting converts the value to a chosen type by writing the type within
   parentheses before the value to convert.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;   // $foo is an integer
$bar = (bool) $foo;   // $bar is a boolean
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   The casts allowed are:
  </para>

  <itemizedlist>
   <listitem>
    <simpara><literal>(int)</literal> - cast to <type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara><literal>(bool)</literal> - cast to <type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara><literal>(float)</literal> - cast to <type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara><literal>(string)</literal> - cast to <type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara><literal>(array)</literal> - cast to <type>array</type></simpara>
   </listitem>
   <listitem>
    <simpara><literal>(object)</literal> - cast to <type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara><literal>(unset)</literal> - cast to <type>NULL</type></simpara>
   </listitem>
  </itemizedlist>

  <note>
   <simpara>
    <literal>(integer)</literal> is an alias of the <literal>(int)</literal> cast.
    <literal>(boolean)</literal> is an alias of the <literal>(bool)</literal> cast.
    <literal>(binary)</literal> is an alias of the <literal>(string)</literal> cast.
    <literal>(double)</literal> and <literal>(real)</literal> are aliases of
    the <literal>(float)</literal> cast.
    These casts do not use the canonical type name and are not recommended.
   </simpara>
  </note>

  <warning>
   <simpara>
    The <literal>(real)</literal> cast alias has been deprecated as of PHP 8.0.0.
   </simpara>
  </warning>

  <warning>
   <simpara>
    The <literal>(unset)</literal> cast has been deprecated as of PHP 7.2.0.
    Note that the <literal>(unset)</literal> cast is the same as assigning the
    value <type>NULL</type> to the variable or call.
    The <literal>(unset)</literal> cast is removed as of PHP 8.0.0.
   </simpara>
  </warning>

  <caution>
   <para>
    The <literal>(binary)</literal> cast and <literal>b</literal> prefix exists
    for forward support. Currently <literal>(binary)</literal> and
    <literal>(string)</literal> are identical, however this may change and
    should not be relied upon.
   </para>
  </caution>

  <note>
   <para>
    Whitespaces are ignored within the parentheses of a cast.
    Therefore, the following are two casts are equivalent:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <informalexample>
   <para>
    Casting literal <type>string</type>s and variables to binary
    <type>string</type>s:
   </para>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO Remove or move into string context section? -->
  <note>
   <para>
    Instead of casting a variable to a <type>string</type>, it is also possible
    to enclose the variable in double quotes.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo is an integer
$str = "$foo";        // $str is a string
$fst = (string) $foo; // $fst is also a string

// This prints out that "they are the same"
if ($fst === $str) {
    echo "they are the same";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>
   
  <para>
   It may not be obvious exactly what will happen when casting between certain
   types. For more information, see these sections:
   <itemizedlist>
    <listitem>
     <simpara>
      <link linkend="language.types.boolean.casting">Converting to boolean</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.integer.casting">Converting to integer</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.float.casting">Converting to float</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.string.casting">Converting to string</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.array.casting">Converting to array</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.object.casting">Converting to object</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.resource.casting">Converting to resource</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.null.casting">Converting to NULL</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="types.comparisons">The type comparison tables</link>
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </sect2>

 <simplesect>
  <!-- when can this happen? TODO Remove? -->
  <note>
   <para>
    The behaviour of an automatic conversion to <type>array</type> is currently
    undefined.
   </para>

   <para>
    Also, because PHP supports indexing into <type>string</type>s via offsets
    using the same syntax as <type>array</type> indexing, the following example
    holds true for all PHP versions:
   </para>

   <informalexample>
    <programlisting role="php">
     <![CDATA[
<?php
$a    = 'car'; // $a is a string
$a[0] = 'b';   // $a is still a string
echo $a;       // bar
?>
]]>
    </programlisting>
   </informalexample>

   <para>
    See the section titled <link linkend="language.types.string.substr">String
    access by character</link> for more information.
   </para>
  </note>
 </simplesect>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
