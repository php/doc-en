<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<sect1 xml:id="language.types.iterable">
 <title>Iterables</title>

 <para>
  <type>Iterable</type> is a built-in compile time type alias for
  <!-- Need to improve rendering of free-standing type elements in PhD
  <type class="union"><type>array</type><type>Traversable</type></type>.
  -->
  <literal>array|Traversable</literal>.
  From its introduction in PHP 7.1.0 and prior to PHP 8.2.0,
  <type>iterable</type> was a built-in pseudo-type that acted as the
  aforementioned type alias and can be used as a type declaration.
  An iterable type can be used in &foreach; and with
  <command>yield from</command> within a
  <link linkend="language.generators">generator</link>.
 </para>

 <note>
  <para>
   Functions declaring iterable as a return type may also be <link
   linkend="language.generators">generators</link>.

   <example>
    <title>
     Iterable generator return type example
    </title>
    <programlisting role="php">
     <![CDATA[
<?php

function gen(): iterable {
    yield 1;
    yield 2;
    yield 3;
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
