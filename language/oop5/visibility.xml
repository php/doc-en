<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12.2.1 $ -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Visibility</title>
  <para>
   The visibility of a property or method can be defined by prefixing the
   declaration with the keywords: public, protected or private. Public
   declared items can be accessed everywhere. Protected limits access to
   inherited and parent classes (and to the class that defines the item).
   Private limits visibility only to the class that defines the item.
  </para>
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Members Visibility</title>
   <para>
   Class members must be defined with public, private, or protected.
   </para>
   <para>
    <example>
     <title>Member declaration</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Define MyClass
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Works
echo $obj->protected; // Fatal Error
echo $obj->private; // Fatal Error
$obj->printHello(); // Shows Public, Protected and Private


/**
 * Define MyClass2
 */
class MyClass2 extends MyClass
{
    // We can redeclare the public and protected method, but not private
    protected $protected = 'Protected2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // Works
echo $obj2->private; // Undefined
echo $obj2->protected; // Fatal Error
$obj2->printHello(); // Shows Public, Protected2, Undefined

?> 
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
     The PHP 4 method of declaring a variable with the
     <emphasis>var</emphasis> keyword is still supported for compatibility
     reasons (as a synonym for the public keyword). In PHP 5 before 5.1.3, its
     usage would generate an <constant>E_STRICT</constant> warning.
    </simpara>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Method Visibility</title>
   <para>
    Class methods must be defined with public, private, or protected. Methods
    without any declaration are defined as public.
   </para>
   <para>
    <example>
     <title>Method Declaration</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Define MyClass
 */
class MyClass
{
    // Contructors must be public
    public function __construct() { }

    // Declare a public method
    public function MyPublic() { }

    // Declare a protected method
    protected function MyProtected() { }

    // Declare a private method
    private function MyPrivate() { }

    // This is public
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Works
$myclass->MyProtected(); // Fatal Error
$myclass->MyPrivate(); // Fatal Error
$myclass->Foo(); // Public, Protected and Private work


/**
 * Define MyClass2
 */
class MyClass2 extends MyClass
{
    // This is public
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Fatal Error
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Works
$myclass2->Foo2(); // Public and Protected work, not Private

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
