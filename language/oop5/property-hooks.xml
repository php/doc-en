<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.property-hooks" xmlns="http://docbook.org/ns/docbook">
  <title>Property Hooks</title>

  <para>
   Property hooks, also known as "property accessors" in some other languages,
   are a way to intercept and override the read and write behavior of a property.
   This functionality serves two purposes:
  </para>
  <para>
   One, it allows for properties to be used directly, without get- and set- methods,
   while leaving the option open to add additional behavior in the future.
   That renders most boilerplate get/set methods unnecessary, even without
   using hooks.
  </para>
  <para>
   Two, it allows for properties that describe an object without needing to store
   a value directly.
  </para>
  <para>
   There are two hooks available on all properties: <literal>get</literal> and <literal>set</literal>.
   They allow overriding the read and write behavior of a property, respectively.
  </para>
  <para>
   A property may be "backed" or "virtual".  A backed property
   is one that actually stores a value.  Any property that has no hooks is backed.
   A virtual property is one that has hooks and those hooks do not interact with
   the property itself.  In this case, the hooks are effectively the same as methods,
   and the object does not use any space to store a value for that property.
  </para>
  <sect2>
   <title>Basic Hook Syntax</title>
   <para>
    The general syntax for declaring a hook is as follows.
   </para>
   <para>
    <example>
     <title>Property hooks (full version)</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
   private bool $modified = false;

    public string $foo {
        get {
            if ($this->modified) {
                return $this->foo . ' (modified)';
            }
            return $this->foo;
        }
        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}

$example = new Example();
$example->foo = 'changed';
print $example->foo;
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    The <literal>$foo</literal> property ends in <literal>{}</literal>, rather than a semicolon.
    That indicates the presence of hooks.  Both a <literal>get</literal> and <literal>set</literal>
    hook are defined, although it is allowed to define only one or the other.  Both hooks have a body,
    denoted by <literal>{}</literal>, that may contain arbitrary code.
   </para>
   <para>
    The <literal>set</literal> hook additionally allows specifying the type and name of an incoming value,
    using the same syntax as a method.  The type must be either the same as the type of the property, 
    or contravariant (wider) to it.  For instance, a property of type <literal>string</literal> could 
    have a <literal>set</literal> hook that accepts <literal>string|Stringable</literal>,
    but not one that only accepts <literal>array</literal>.
   </para>
   <para>
    At least one of the hooks references <literal>$this->foo</literal>, the property itself. That means
    the property wll be "backed."  When calling <literal>$example->foo = 'changed'</literal>, 
    the provided string will be first cast to lowercase, then saved to the backing value.  
    When reading from the property, the previously saved value may conditionally be appended
    with additional text.
   </para>
   <para>
    There are a number of short-hand syntax variants as well to handle common cases.
   </para>
   <para>
    If the <literal>get</literal> hook is a single expression, then the <literal>{}</literal>
    may be omitted and replaced with an arrow expression.
   </para>
   <para>
    <example>
     <title>Property get expression</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
   private bool $modified = false;

    public string $foo {
        get => $this->foo . ($this->modified ? ' (modified)' : '');
        
        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    This example is equivalent to the previous.
   </para>
   <para>
    If the <literal>set</literal> hook's parameter type is the same as the property type (which is typical), 
    it may be omitted.  In that case, the value to set is automatically given the name <literal>$value</literal>.
   </para>
   <para>
    <example>
     <title>Property set defaults</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
   private bool $modified = false;

    public string $foo {
        get => $this->foo . ($this->modified ? ' (modified)' : '');
        
        set {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    This example is equivalent to the previous.
   </para>
   <para>
    If the <literal>set</literal> hook is only setting a modified version of the passed in value, then it may
    also be simplified to an arrow expression.  The value the expression evaluates to will be set on the backing
    value.
   </para>
   <para>
    <example>
     <title>Property set expression</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public string $foo {
        get => $this->foo . ($this->modified ? ' (modified)' : '');
        set => strtolower($value);
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    This example is not quite equivalent to the previous, as it does not also modify <literal>$this->modified</literal>.
    If multiple statements are needed in the set hook body, use the braces version.
   </para>
  </sect2>
 
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
