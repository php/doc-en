<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.property-hooks" xmlns="http://docbook.org/ns/docbook">
  <title>Property Hooks</title>

  <para>
   Property hooks, also known as "property accessors" in some other languages,
   are a way to intercept and override the read and write behavior of a property.
   This functionality serves two purposes:
  </para>
  <para>
   One, it allows for properties to be used directly, without get- and set- methods,
   while leaving the option open to add additional behavior in the future.
   That renders most boilerplate get/set methods unnecessary, even without
   using hooks.
  </para>
  <para>
   Two, it allows for properties that describe an object without needing to store
   a value directly.
  </para>
  <para>
   There are two hooks available on all properties: <literal>get</literal> and <literal>set</literal>.
   They allow overriding the read and write behavior of a property, respectively.
  </para>
  <para>
   A property may be "backed" or "virtual".  A backed property
   is one that actually stores a value.  Any property that has no hooks is backed.
   A virtual property is one that has hooks and those hooks do not interact with
   the property itself.  In this case, the hooks are effectively the same as methods,
   and the object does not use any space to store a value for that property.
  </para>
  <sect2>
   <title>Basic Hook Syntax</title>
   <para>
    The general syntax for declaring a hook is as follows.
   </para>
   <para>
    <example>
     <title>Property hooks (full version)</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'default value' {
        get {
            if ($this->modified) {
                return $this->foo . ' (modified)';
            }
            return $this->foo;
        }
        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}

$example = new Example();
$example->foo = 'changed';
print $example->foo;
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    The <literal>$foo</literal> property ends in <literal>{}</literal>, rather than a semicolon.
    That indicates the presence of hooks.  Both a <literal>get</literal> and <literal>set</literal>
    hook are defined, although it is allowed to define only one or the other.  Both hooks have a body,
    denoted by <literal>{}</literal>, that may contain arbitrary code.
   </para>
   <para>
    The <literal>set</literal> hook additionally allows specifying the type and name of an incoming value,
    using the same syntax as a method.  The type must be either the same as the type of the property, 
    or contravariant (wider) to it.  For instance, a property of type <literal>string</literal> could 
    have a <literal>set</literal> hook that accepts <literal>string|Stringable</literal>,
    but not one that only accepts <literal>array</literal>.
   </para>
   <para>
    At least one of the hooks references <literal>$this->foo</literal>, the property itself. That means
    the property wll be "backed."  When calling <literal>$example->foo = 'changed'</literal>, 
    the provided string will be first cast to lowercase, then saved to the backing value.  
    When reading from the property, the previously saved value may conditionally be appended
    with additional text.
   </para>
   <para>
    There are a number of short-hand syntax variants as well to handle common cases.
   </para>
   <para>
    If the <literal>get</literal> hook is a single expression, then the <literal>{}</literal>
    may be omitted and replaced with an arrow expression.
   </para>
   <para>
    <example>
     <title>Property get expression</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'default value' {
        get => $this->foo . ($this->modified ? ' (modified)' : '');
        
        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    This example is equivalent to the previous.
   </para>
   <para>
    If the <literal>set</literal> hook's parameter type is the same as the property type (which is typical), 
    it may be omitted.  In that case, the value to set is automatically given the name <literal>$value</literal>.
   </para>
   <para>
    <example>
     <title>Property set defaults</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'default value' {
        get => $this->foo . ($this->modified ? ' (modified)' : '');
        
        set {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    This example is equivalent to the previous.
   </para>
   <para>
    If the <literal>set</literal> hook is only setting a modified version of the passed in value, then it may
    also be simplified to an arrow expression.  The value the expression evaluates to will be set on the backing
    value.
   </para>
   <para>
    <example>
     <title>Property set expression</title>
     <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public string $foo = 'default value' {
        get => $this->foo . ($this->modified ? ' (modified)' : '');
        set => strtolower($value);
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    This example is not quite equivalent to the previous, as it does not also modify <literal>$this->modified</literal>.
    If multiple statements are needed in the set hook body, use the braces version.
   </para>
   <para>
    A property may implement zero, one, or both hooks as the situation requires.  All shorthand versions are mutually-independent.
    That is, using a short-get with a long-set, or a short-set with an explicit type, or so on is all valid.
   </para>
   <para>
    On a backed property, omitting a <literal>get</literal> or <literal>set</literal> hook means the default read or
    write behavior will be used.
   </para>
  </sect2>
 <sect2>
  <title>Virtual properties</title>
  <para>
   Virtual properties are properties that have no backing value.  A property is virtual if neither its <literal>get</literal>
   nor <literal>set</literal> hook references the property itself using exact syntax.
   That is, a property named <literal>$foo</literal> whose hook contains <literal>$this->foo</literal> will be backed.
   But the following is not a backed property, and will error:
  </para>
  <para>
   <example>
    <title>Invalid virtual property</title>
    <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public string $foo {
        get {
            $temp = __PROPERTY__;
            return $this->$temp; // Doesn't refer to $this->foo, so it doesn't count.
        }
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   For virtual properties, if a hook is omitted then that operation does not exist and
   trying to use it wil produce an error.  Virtual properties take up no memory space in an object.
   Virtual properties are suited for "derived" properties, such as those that are the combination
   of two other properties.
  </para>
  <para>
   <example>
    <title>Virtual property</title>
    <programlisting role="php">
<![CDATA[
<?php
readonly class Rectangle
{
    // A virtual property.
    public int $area {
        get => $this->h * $this->w;
    }

    public function __construct(public int $h, public int $w) {}
}

$s = new Rectangle(4, 5);
print $s->area; // prints 20
$s->area = 30; // Error, as there is no set operation defined.
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Defining both a <literal>get</literal> and <literal>set</literal> hook on a virtual property is also allowed.
  </para>
 </sect2>
 <sect2>
  <title>Scoping</title>
  <para>
   All hooks operate in the scope of the object being modified.
   That means they have access to all public, private, or protected methods of the object, as well as any public,
   private, or protected properties, including properties that may have their own property hooks.
   Accessing another property from within a hook does not bypass the hooks defined on that property.
  </para>
  <para>The most notable implication of this is that non-trivial hooks may sub-call to an arbitrarily complex method if they wish.</para>
  <para>
   <example>
    <title>Calling a method from a hook</title>
    <programlisting role="php">
<![CDATA[
<?php
class Person {
    public string $phone {
        set => $this->sanitizePhone($value);
    }
 
    private function sanitizePhone(string $value): string {
        $value = ltrim($value, '+');
        $value = ltrim($value, '1');
 
        if (!preg_match('/\d\d\d\-\d\d\d\-\d\d\d\d/', $value)) {
            throw new \InvalidArgumentException();
        }
        return $value;
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>
 <sect2>
  <title>References</title>
  <para>
   Because the presence of hooks intercept the read and write process for properties,
   they cause issues when acquiring a reference to a property or with indirect
   modification, such as <literal>$this->arrayProp['key'] = 'value';</literal>.
   That is because any attempted modification of the value by reference would bypass a set hook, if one is defined.
  </para>
  <para>
   In the rare case that getting a reference to a property that has hooks defined is necessary, the <literal>get</literal>
   hook may be prefixed with <literal>&amp;</literal> to cause it to return by reference. Defining both <literal>get</literal>
   and <literal>&amp;get</literal> on the same property is a syntax error.
  </para>
  <para>
   Defining both <literal>&amp;get</literal> and <literal>set</literal> hooks on a backed property is not allowed.
   As noted above, writing to the value returned by reference would bypass the <literal>set</literal> hook.
   On virtual properties, there is no necessary common value shared between the two hooks, so defining both is allowed.
  </para>
  <para>
   Writing to an index of an array property also involves an implicit reference.  For that reason, writing to a backed array property
   with hooks defined is allowed if and only if it defines only a <literal>&amp;get</literal> hook.
   On a virtual property, writing to the array returned from either <literal>get</literal> or <literal>&amp;get</literal>
   is legal, but whether that has any impact on the object depends on the hook implementation.
  </para>
  <para>
   Overwriting the entire array property is fine, and behaves the same as any other property.  Only working with
   elements of the array require special care.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
