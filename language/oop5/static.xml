<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13.2.1 $ -->
 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Static Keyword</title>

  <para>
   Declaring class members or methods as static makes them accessible
   without needing an instantiation of the class. A member declared as
   static can not be accessed with an instantiated class object (though
   a static method can).
  </para>

  <para>
   For compatibility with PHP 4, if no <link
   linkend="language.oop5.visibility">visibility</link>
   declaration is used, then the member or method will be treated
   as if it was declared as <literal>public</literal>.
  </para>

  <para>
   Because static methods are callable without an instance of
   the object created, the pseudo variable <varname>$this</varname> is
   not available inside the method declared as static.
  </para>
  
  <para>
   Static properties cannot be accessed through the object using the arrow
   operator -&gt;.
  </para>

  <para>
   Calling non-static methods statically generates an E_STRICT level warning.
  </para>

  <para>
   As of PHP 5.3.0, it's possible to reference the class  using a variable.
  </para>

  <example>
   <title>Static member example</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Undefined "Property" my_static 

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n";

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Static method example</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod();
?> 
]]>
    </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
