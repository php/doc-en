<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Static Keyword</title>

  <tip>
   <simpara>
    This page describes the use of the <literal>static</literal> keyword to
    define static methods and properties. <literal>static</literal> can also
    be used to
    <link linkend="language.variables.scope.static">define static variables</link>
    and for
    <link linkend="language.oop5.late-static-bindings">late static bindings</link>.
    Please refer to those pages for information on those meanings of
    <literal>static</literal>.
   </simpara>
  </tip>

  <para>
   Declaring class properties or methods as static makes them accessible
   without needing an instantiation of the class.
   These can also be accessed statically within an instantiated class object.
  </para>

  <sect2 xml:id="language.oop5.static.methods">
   <title>Static methods</title>

   <para>
    Because static methods are callable without an instance of
    the object created, the pseudo-variable <varname>$this</varname> is
    not available inside methods declared as static.
   </para>

   <warning>
    <para>
     Calling non-static methods statically throws an <classname>Error</classname>.
    </para>
    <para>
     Prior to PHP 8.0.0, calling non-static methods statically were deprecated, and
     generated an <constant>E_DEPRECATED</constant> warning.
    </para>
   </warning>

   <example>
    <title>Static method example</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod();
?> 
]]>
     </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.static.properties">
   <title>Static properties</title>

   <para>
    Static properties are accessed using the
    <link linkend="language.oop5.paamayim-nekudotayim">Scope Resolution Operator</link>
    (<literal>::</literal>) and cannot be accessed through the object operator
    (<literal>-&gt;</literal>).
   </para>

   <para>
    It's possible to reference the class using a variable.
    The variable's value cannot be a keyword (e.g. <literal>self</literal>,
    <literal>parent</literal> and <literal>static</literal>).
   </para>

   <example>
    <title>Static property example</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Undefined "Property" my_static 

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n";

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
    </programlisting>
    &example.outputs.8.similar;
    <screen>
<![CDATA[
foo
foo

Notice: Accessing static property Foo::$my_static as non static in /in/V0Rvv on line 23

Warning: Undefined property: Foo::$my_static in /in/V0Rvv on line 23

foo
foo
foo
foo
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
