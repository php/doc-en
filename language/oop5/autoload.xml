<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.autoload" xmlns="http://docbook.org/ns/docbook">
  <title>Autoloading Classes</title>
  <para>
   Many developers writing object-oriented applications create
   one PHP source file per class definition. One of the biggest
   annoyances is having to write a long list of needed includes
   at the beginning of each script (one for each class).
  </para>
  <para>
   The <function>spl_autoload_register</function> function registers any number of
   autoloaders, enabling for classes and interfaces to be automatically loaded
   if they are currently not defined. By registering autoloaders, PHP is given
   a last chance to load the class or interface before it fails with an error.
  </para>
  <tip>
   <para>
    Although the <function>__autoload</function> function can also be used for
    autoloading classes and interfaces, it's preferred to use the
    <function>spl_autoload_register</function> function. This is because it is
    a more flexible alternative (enabling for any number of autoloaders to be
    specified in the application, such as in third party libraries). For this
    reason, using <function>__autoload</function> is discouraged and deprecated
    as of PHP 7.2.0.
   </para>
  </tip>
  <note>
   <para>
    If the class name is used e.g. in <function>call_user_func</function> then
    it can contain some dangerous characters such as <literal>../</literal>.
    It is recommended to not use the user-input in such functions or at least
    verify the input in <function>__autoload</function>.
   </para>
  </note>
  <para>
   <example>
    <title>Autoload example</title>
    <para>
     This example attempts to load the classes <literal>MyClass1</literal>
     and <literal>MyClass2</literal> from the files <filename>MyClass1.php</filename>
     and <filename>MyClass2.php</filename> respectively.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
spl_autoload_register(function ($class_name) {
    include $class_name . '.php';
});

$obj  = new MyClass1();
$obj2 = new MyClass2(); 
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Autoload other example</title>
    <para>
     This example attempts to load the interface <literal>ITest</literal>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

spl_autoload_register(function ($name) {
    var_dump($name);
});

class Foo implements ITest {
}

/*
string(5) "ITest"

Fatal error: Interface 'ITest' not found in ...
*/
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Autoloading with exception handling</title>
    <para>
     This example throws an exception and demonstrates the try/catch block.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
spl_autoload_register(function ($name) {
    echo "Want to load $name.\n";
    throw new Exception("Unable to load $name.");
});

try {
    $obj = new NonLoadableClass();
} catch (Exception $e) {
    echo $e->getMessage(), "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Want to load NonLoadableClass.
Unable to load NonLoadableClass.
]]>
    </screen>
   </example>
   <example>
    <title>Autoloading with exception handling - Missing custom exception</title>
    <para>
     This example throws an exception for a non-loadable, custom exception.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
spl_autoload_register(function ($name) {
    echo "Want to load $name.\n";
    throw new MissingException("Unable to load $name.");
});

try {
    $obj = new NonLoadableClass();
} catch (Exception $e) {
    echo $e->getMessage(), "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Want to load NonLoadableClass.
Want to load MissingException.

Fatal error: Class 'MissingException' not found in testMissingException.php on line 4
]]>
    </screen>
   </example>
  </para>

  <simplesect role="seealso">
   &reftitle.seealso;
   <para>
    <simplelist>
     <member><function>unserialize</function></member>
     <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
     <member><function>spl_autoload_register</function></member>
     <member><function>spl_autoload</function></member>
     <member><function>__autoload</function></member>
    </simplelist>
   </para>
  </simplesect>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
