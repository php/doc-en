<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>Types</title>

 <sect1 xml:id="language.types.intro">
  <title>Introduction</title>

  <para>
   Every single expression in PHP resolves to a type, which will be one
   of these nine primitive types:
   <itemizedlist>
    <listitem><simpara><type>null</type></simpara></listitem>
    <listitem>
     <simpara>Scalar types:</simpara>
     <itemizedlist>
      <listitem><simpara><type>bool</type></simpara></listitem>
      <listitem><simpara><type>int</type></simpara></listitem>
      <listitem><simpara><type>float</type> (floating-point number)</simpara></listitem>
      <listitem><simpara><type>string</type></simpara></listitem>
     </itemizedlist>
    </listitem>
    <listitem><simpara><type>array</type></simpara></listitem>
    <listitem><simpara><type>object</type></simpara></listitem>
    <listitem><simpara><type>callable</type></simpara></listitem>
    <listitem><simpara><type>resource</type></simpara></listitem>
   </itemizedlist>
  </para>

  <para>
   In general, the type of an expression or variable is determined at runtime
   by PHP depending on the value. However, it is sometimes possible to add
   <link linkend="language.types.declarations">type declarations</link>
   to ensure the value is of a specific type.
  </para>

  <caution>
   <simpara>
    An expression/variable might be evaluated as a different type depending
    on the context it is used. For more information, see the section on
    <link linkend="language.types.type-juggling">Type Juggling</link>.
   </simpara>
   <simpara>
    <link linkend="types.comparisons">The type comparison tables</link>
    may also be useful, as various examples of comparison between values of
    different types are present.
   </simpara>
  </caution>
  
  <note>
   <simpara>
    It is possible to force an expression to be evaluated to a certain type by
    using a <link linkend="language.types.typecasting">type cast</link>.
    A variable can also be type cast in-place by using the
    <function>settype</function> function on it.
   </simpara>
  </note>

  <para>
   To check the value and type of an
   <link linkend="language.expressions">expression</link>,
   use the <function>var_dump</function> function.
   To retrieve the type of an
   <link linkend="language.expressions">expression</link>,
   use the <function>get_debug_type</function> function.
   However, to check if an expression is of a certain type use the
   <literal>is_<replaceable>type</replaceable></literal> functions instead.

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a_bool = true;   // a bool
$a_str  = "foo";  // a string
$a_str2 = 'foo';  // a string
$an_int = 12;     // an int

echo get_debug_type($a_bool), "\n";
echo get_debug_type($a_str), "\n";

// If this is an integer, increment it by four
if (is_int($an_int)) {
    $an_int += 4;
}
var_dump($an_int);

// If $a_bool is a string, print it out
if (is_string($a_bool)) {
    echo "String: $a_bool";
}
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
bool
string
int(16)
]]>
    </screen>
   </informalexample>
  </para>
  <note>
   <simpara>
    Prior to PHP 8.0.0, where the <function>get_debug_type</function> is not
    available, the <function>gettype</function> function can be used instead.
    However, it doesn't use the canonical type names.
   </simpara>
  </note>
 </sect1>

 &language.types.null;
 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.numeric-strings;
 &language.types.array;
 &language.types.object;
 &language.types.enumerations;
 &language.types.resource;
 &language.types.callable;
 &language.types.declarations;
 &language.types.iterable;
 &language.types.type-juggling;

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
