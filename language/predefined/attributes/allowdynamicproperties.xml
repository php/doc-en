<?xml version="1.0" encoding="utf-8"?>
<phpdoc:classref xml:id="class.allowdynamicproperties" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>The AllowDynamicProperties class</title>
 <titleabbrev>AllowDynamicProperties</titleabbrev>

 <partintro>

  <section xml:id="allowdynamicproperties.intro">
   &reftitle.intro;
   <para>
    This attribute is used to mark classes that allow
    <link linkend="language.oop5.properties.dynamic-properties">dynamic properties</link>.
   </para>
   <note>
     <para>
       <literal>AllowDynamicProperties</literal> was introduced in PHP 8.2.
       In prior versions, all classes implicitly allowed dynamic properties.
       Implicit creation of dynamic properties is now deprecated.
     </para>
   </note>
  </section>

  <section xml:id="allowdynamicproperties.synopsis">
   &reftitle.classsynopsis;

   <classsynopsis>
    <ooclass>
     <classname>AllowDynamicProperties</classname>
    </ooclass>

    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>AllowDynamicProperties</classname>
     </ooclass>
    </classsynopsisinfo>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.allowdynamicproperties')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='AllowDynamicProperties'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>

  </section>

  <section>
   &reftitle.examples;
   <example>
    <para>
     To enable dynamic properties, add <literal>#[\AllowDynamicProperties]</literal>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
#[\AllowDynamicProperties]
class ValidExample { }

$obj = new ValidExample();
$obj->myDynamicProp = 1234;
?>
]]>
    </programlisting>
   </example>

   <example>
    <para>
     As of PHP 8.2.0, the declaration is required. If the declaration is omitted
     and an undeclared property is accessed, PHP will raise a warning.
    </para>

    <programlisting role="php">
<![CDATA[
<?php
class InvalidExample { }

$obj = new InvalidExample();
$obj->myUnknownProperty = 1234;
?>
]]>
    </programlisting>
    &example.outputs.82;
    <screen>
<![CDATA[
Deprecated: Creation of dynamic property InvalidExample::$myUnknownProperty is deprecated in file on line 5
]]>
    </screen>

    <para>
     In future versions, <literal>InvalidExample</literal> may create a hard failure.
    </para>

   </example>
  </section>

  <section xml:id="allowdynamicproperties.seealso">
   &reftitle.seealso;
   <para><link linkend="language.attributes">Attributes overview</link></para>
  </section>

 </partintro>

 &language.predefined.allowdynamicproperties.construct;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
