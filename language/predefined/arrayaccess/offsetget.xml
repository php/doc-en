<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="arrayaccess.offsetget" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ArrayAccess::offsetGet</refname>
  <refpurpose>Offset to retrieve</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>ArrayAccess::offsetGet</methodname>
   <methodparam><type>mixed</type><parameter>offset</parameter></methodparam>
  </methodsynopsis>
  <para>
   Returns the value at specified offset.
  </para>
  <para>
   This method is executed when checking if offset is <function>empty</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       The offset to retrieve.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Can return all value types.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
    <para>
      It's possible for implementations of this method to return by reference.
      This makes indirect modifications to the overloaded array dimensions of
      <classname>ArrayAccess</classname> objects possible.
    </para>
    <para>
      A direct modification is one that replaces completely the value of
      the array dimension, as in <literal>$obj[6] = 7</literal>. An
      indirect modification, on the other hand, only changes part of the
      dimension, or attempts to assign the dimension by reference to
      another variable, as in <literal>$obj[6][7] = 7</literal> or
      <literal>$var =&amp; $obj[6]</literal>. Increments with
      <literal>++</literal> and decrements with <literal>--</literal>
      are also implemented in a way that requires indirect modification.
    </para>
    <para>
      While direct modification triggers a call to
      <function>ArrayAccess::offsetSet</function>, indirect modification
      triggers a call to <function>ArrayAccess::offsetGet</function>.
      In that case, the implementation of
      <function>ArrayAccess::offsetGet</function> must be able to return by
      reference, otherwise an <constant>E_NOTICE</constant> message is raised.
    </para>
  </note>
 </refsect1>

<!--
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>ArrayAccess::offsetGet</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
/* ... */
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
...
]]>
    </screen>
   </example>
  </para>
 </refsect1>
-->

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ArrayAccess::offsetExists</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
