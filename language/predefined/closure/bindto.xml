<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Duplicates the closure with a new bound object and class scope
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>Closure</type><methodname>Closure::bindTo</methodname>
   <methodparam><type>object</type><parameter>newthis</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>newscope</parameter>
   <initializer>"static"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Create and return a new <link linkend="functions.anonymous">anonymous
   function</link> with the same body and bound variables as this one, but
   possibly with a different bound object and a new class scope.
  </para>

  <para>
   The “bound object” determines the value <literal>$this</literal> will
   have in the function body and the “class scope” represents a class
   which determines which private and protected members the anonymous
   function will be able to access. Namely, the members that will be
   visible are the same as if the anonymous function were a method of
   the class given as value of the <parameter>newscope</parameter>
   parameter.
  </para>

  <para>
   Static closures cannot have any bound object (the value of the parameter
   <parameter>newthis</parameter> should be &null;), but this function can
   nevertheless be used to change their class scope.
  </para>

  <para>
   This function will ensure that for a non-static closure, having a bound
   instance will imply being scoped and vice-versa. To this end,
   non-static closures that are given a scope but a &null; instance are made
   static and non-static non-scoped closures that are given a non-null
   instance are scoped to an unspecified class.
  </para>

  <note>
   <para>
    If you only want to duplicate the anonymous functions, you can use
    <link linkend="language.oop5.cloning">cloning</link> instead.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newthis</parameter></term>
    <listitem>
     <para>
      The object to which the given anonymous function should be bound, or
      &null; for the closure to be unbound. 
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newscope</parameter></term>
    <listitem>
     <para>
      The class scope to which the closure is to be associated, or
      'static' to keep the current one. If an object is given, the type of the
      object will be used instead. This determines the visibility of protected
      and private methods of the bound object.
      It is not allowed to pass (an object of) an internal class as this parameter.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the newly created <classname>Closure</classname> object
   &return.falseforfailure;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <parameter>newscope</parameter> can not be (an object of) an internal
        class anymore, what was possible prior to this version.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Closure::bindTo</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php

class A {
    function __construct($val) {
        $this->val = $val;
    }
    function getClosure() {
        //returns closure bound to this object and scope
        return function() { return $this->val; };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";
$cl = $cl->bindTo($ob2);
echo $cl(), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Anonymous functions</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
