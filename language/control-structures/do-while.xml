<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<sect1 xml:id="control-structures.do.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>do-while</title>
 <?phpdoc print-version-for="dowhile"?>
 <simpara>
  <literal>do-while</literal> loops are very similar to
  <literal>while</literal> loops, except the truth expression is
  checked at the end of each iteration instead of in the beginning.
  The main difference from regular <literal>while</literal> loops is
  that the first iteration of a <literal>do-while</literal> loop is
  guaranteed to run (the truth expression is only checked at the end
  of the iteration), whereas it may not necessarily run with a
  regular <literal>while</literal> loop (the truth expression is
  checked at the beginning of each iteration, if it evaluates to
  &false; right from the beginning, the loop
  execution would end immediately).
 </simpara>
 <para>
  There is just one syntax for <literal>do-while</literal> loops:

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
    echo $i;
} while ($i > 0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
   The above loop would run one time exactly, since after the first
   iteration, when truth expression is checked, it evaluates to
   &false; (<varname>$i</varname> is not bigger than 0) and the loop
   execution ends.
 </simpara>
 <para>
  Advanced C users may be familiar with a different usage of the
  <literal>do-while</literal> loop, to allow stopping execution in
  the middle of code blocks, by encapsulating them with
  <literal>do-while</literal> (0), and using the <link
  linkend="control-structures.break"><literal>break</literal></link>
  statement.  The following code fragment demonstrates this:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        echo "i is not big enough";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
   echo "i is ok";

    /* process i */

} while (0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  It is possible to use the
  <link linkend="control-structures.goto"><literal>goto</literal></link>
  operator instead of this hack.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
