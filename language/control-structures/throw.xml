<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="control-structures.throw" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>throw</title>
 <?phpdoc print-version-for="throw"?>
 <para>
  The &throw; keyword is an expression, and may be used in any expression context,
  which takes an instance of a <classname>Throwable</classname> object as an
  argument.
 </para>
 <caution>
  <simpara>
   Prior to PHP 8.0, the &throw; keyword was a statement and not an expression.
  </simpara>
 </caution>
 <para>
  Attempting to &throw; a non-<classname>Throwable</classname> object will
  throw an <classname>Error</classname>.

  <example>
   <title>Throwing a non-<classname>Throwable</classname> object</title>
   <programlisting role="php">
<![CDATA[
<?php
throw new class {};
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
PHP Fatal error:  Uncaught Error: Cannot throw objects that do not implement Throwable in Command line code:1
Stack trace:
#0 {main}
]]>
   </screen>
  </example>
 </para>

 <para>
  After using &throw; the normal flow of execution is halted and the call stack
  is unwound until the global scope is reached and terminates the program with
  a fatal error containing the stack trace indicating where the
  <classname>Throwable</classname> object has been thrown.
 </para>
 <example>
  <title>Throwing an Exception in the global scope</title>
  <programlisting role="php">
<![CDATA[
<?php
echo "Before exception\n";
throw new Exception('Stop execution');
echo "After exception\n";
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
Before exception
PHP Fatal error:  Uncaught Exception: Stop execution in Command line code:2
Stack trace:
#0 {main}
  thrown in Command line code on line 2
]]>
  </screen>
 </example>
 <example>
  <title>Throwing an Exception in a function</title>
  <programlisting role="php">
   <![CDATA[
<?php

function foo() {
    echo "Before exception\n";
    throw new Exception('Stop execution');
    echo "After exception\n";
}

foo();
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
Before exception
PHP Fatal error:  Uncaught Exception: Stop execution in Command line code:3
Stack trace:
#0 Command line code(7): foo()
#1 {main}
  thrown in Command line code on line 3
]]>
  </screen>
 </example>

 <para>
  As &throw; is an expression it can be used to branch out on the result
  of another expression if its value is inappropriate.
 </para>
 <example>
  <title>Using throw as an expression</title>
  <para>Only permitted in PHP 8.0.0 and later.</para>
  <programlisting role="php">
<![CDATA[
<?php

function_which_might_return_null() ?? throw new Exception('Cannot handle null');

function_which_might_return_false() or throw new Exception('Cannot handle false');

]]>
  </programlisting>
 </example>

 <para>
  It is possible to handle a thrown <classname>Throwable</classname> by using
  a <link linkend="control-structures.try-catch">try-catch</link> block.
  See the <link linkend="language.error-handling.throwable">error handling</link>
  section for more information.
 </para>
</sect1>
