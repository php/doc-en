<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<sect1 xml:id="internals2.memory.management" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Basic memory management</title>

 <para>
  The engine's memory management is implemented with features important to a system like PHP. The exact functionality of the engine's memory management and the optimizations performed are out of the scope of this document. However, a good understanding of its functionality provides a basis for a good understanding of the rest of the <code>Hacker's Guide</code>, and introduce you to terminology and functionality used throughout PHP.
 </para>

 <para>
  The most important of its features for the <code>Hacker</code>, and the first thing to mention is tracking allocations. Tracking allocations allow the memory manager to avoid leaks, a thorn in the side of most <code>Hackers</code>. When PHP is built in debug mode (<code>--enable-debug</code>), detected leaks are reported, in a perfect world they would never get to deployment.
 </para>

 <para>While tracking allocations is an important, and highly useful feature, the <code>Hacker</code> should not become lazy! Always attempt to resolve leaks before deploying your code, a memory leak in a SAPI environment can become a very big problem, very quickly.</para>

 <para>Another, perhaps more incidental but still noteworthy, feature is that the memory manager is the part that allows a hard limit on memory usage for each instance of PHP. As we all know, there is no such thing as unlimited. If some code is running out of memory, it is likely to be written wrong, either by the <code>Hacker</code>, or the programmer of PHP. Limiting the memory therefore is not a restriction on the language that is supposed to be experienced in production, it is simply a way from stopping development environments from spiraling out of control when mistakes are made, and equally, when bugs are found in production.</para>

 <para>From the <code>Hacker's</code> perspective, the memory management API looks very much like libc's (or whoever the <code>Hacker</code> prefers !) malloc implementation.</para>

 <table xml:id="internals2.memory.management.apis">
  <title>Main memory APIs</title>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>Prototype</entry>
     <entry>Description</entry>
    </row>
   </thead>
   <tbody>

    <row>
     <entry><code>void *emalloc(size_t size)</code></entry>
     <entry>Allocate <code>size</code> bytes of memory.</entry>
    </row>

    <row>
     <entry><code>void *ecalloc(size_t nmemb, size_t size)</code></entry>
     <entry>
      Allocate a buffer for <code>nmemb</code> elements of
      <code>size</code> bytes and makes sure it is initialized with zeros.
     </entry>
    </row>

    <row>
     <entry><code>void *erealloc(void *ptr, size_t size)</code></entry>
     <entry>
      Resize the buffer <code>ptr</code>, which was allocated using
      <code>emalloc</code> to hold <code>size</code> bytes of memory.
     </entry>
    </row>

    <row>
     <entry><code>void efree(void *ptr)</code></entry>
     <entry>
      Free the buffer pointed by <code>ptr</code>. The buffer had to be
      allocated by <code>emalloc</code>.
     </entry>
    </row>

    <row>
     <entry>
      <code>void *safe_emalloc(size_t nmemb, size_t size, size_t offset)</code>
     </entry>
     <entry>
      Allocate a buffer for holding <code>nmemb</code> blocks of each
      <code>size</code> bytes and an additional <code>offset</code> bytes.
      This is similar to <code>emalloc(nmemb * size + offset)</code> but adds
      a special protection against overflows.
     </entry>
    </row>

    <row>
     <entry><code>char *estrdup(const char *s)</code></entry>
     <entry>
      Allocate a buffer that can hold the NULL-terminated string
      <code>s</code> and copy the <code>s</code> into that buffer.
     </entry>
    </row>

    <row>
     <entry>
      <code>char *estrndup(const char *s, unsigned int length)</code>
     </entry>
     <entry>
      Similar to <code>estrdup</code> while the length of the
      NULL-terminated string is already known.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <note>
  <simpara>
   The engine's memory management functions do not return <code>NULL</code> upon failure, if memory cannot be allocated at runtime, the engine bails and raises an error.
  </simpara>
 </note>

 <caution>
  <simpara>
   Always use valgrind before deploying code and as a normal part of the <code>Hacker's</code> process. The engine can only report and detect leaks where it has allocated the memory. All of PHP is only a thin wrapper around third parties, those third parties do not use the engines memory management. Additionally, valgrind will catch errors that do not always halt or even have an apparent effect at execution time, it is just as important that there should be no errors, as it is important that avoidable leaks should be avoided.
  </simpara>
 </caution>

 <note>
  <simpara>Some leaks are unavoidable, some libraries rely on the end of a process to free some of their structures, this is normal under some circumstances and acceptable where it is out of the <code>Hacker's</code> control.</simpara>
 </note>

 <simpara>While executing in a debug environment, configured with <code>--enable-debug</code> and <code>--enable-zend-test</code>, the leak function used in the next example is actually implemented by the engine and is available to call in userland.</simpara>

 <example xml:id="internals2.memory.management.example.leak">
  <title>Leak Detection in Action</title>
  <programlisting role="c">
<![CDATA[
ZEND_FUNCTION(zend_leak_bytes)
{
    zend_long leakbytes = 3;

    if (zend_parse_parameters(ZEND_NUM_ARGS(), "|l", &leakbytes) == FAILURE) {
        return;
    }

    emalloc(leakbytes);
}
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
$ sapi/cli/php -r 'zend_leak_bytes();'
[Mon Apr 23 17:43:42 2018]  Script:  'Standard input code'
/home/mbaynton/projects/php-src/ext/zend_test/test.c(106) :  Freeing 0x00007f3203c92050 (3 bytes), script=Standard input code
=== Total 1 memory leaks detected ===
]]>
  </screen>
 </example>

 <note>
  <simpara>
   USE_ZEND_ALLOC=0 in the environment will stop the memory manager from functioning,
   all allocations fall back on the default system allocators which can be useful for debugging leaks,
   and should only be used for this purpose.
  </simpara>
 </note>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
