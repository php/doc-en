<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <chapter xml:id="internals2.funcs" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Writing Functions</title>
  <para>
   Functions and Methods in PHP take much the same form, a method is simply a function with a specific scope; the scope of their class entry.
   The <code>Hacker</code> will read about class entries in other sections of the <code>Hacker's</code> guide.
   The purpose of this section is to introduce the <code>Hacker</code> to the anatomy of a function or method;
   the <code>Hacker</code> will learn how to define functions, how to accept variables and how to return variables to the programmer of PHP.
  </para>

  <para>
   The anatomy of a function could not be simpler:
  </para>

  <screen>
<![CDATA[
PHP_FUNCTION(hackers_function) {
  /* your accepted arguments here */
  long number;

  /* accepting arguments */
  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &number) != SUCCESS) {
      return;
  }

  /* do some work on the input */
  number *= 2;

  /* set return value */
  RETURN_LONG(number);
}]]>
  </screen>

  <para>
   The <code>PHP_FUNCTION(hackers_function)</code> preprocessor instruction will result in the following declaration:
  </para>

  <screen>
<![CDATA[
void zif_hackers_function(INTERNAL_FUNCTION_PARAMETERS)
]]>
  </screen>

  <para>
   <code>INTERNAL_FUNCTION_PARAMETERS</code> is defined as a macro and explained in the following table:
  </para>

  <table xml:id="internals2.funcs.index.internal-func-params">
   <title>INTERNAL_FUNCTION_PARAMETERS</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Name and type</entry>
      <entry>Description</entry>
      <entry>Access macros</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry><code>int ht</code></entry>
      <entry>Number of actual parameters passed by user</entry>
      <entry><code>ZEND_NUM_ARGS()</code></entry>
     </row>

     <row>
      <entry><code>zval *return_value</code></entry>
      <entry>
       Pointer to a PHP variable that can be filled with the return value
       passed to the user. The default type is <code>IS_NULL</code>.
      </entry>
      <entry><code>RETVAL_*</code>, <code>RETURN_*</code></entry>
     </row>

     <row>
      <entry><code>zval **return_value_ptr</code></entry>
      <entry>When returning references to PHP set this to a pointer to
       your variable. It is not suggested to return references.</entry>
      <entry/>
     </row>

     <row>
      <entry><code>zval *this_ptr</code></entry>
      <entry>
       If this is a method call, points to the PHP variable
       holding the <code>$this</code> object.
      </entry>
      <entry><code>getThis()</code></entry>
     </row>

     <row>
      <entry><code>int return_value_used</code></entry>
      <entry>
       Flag indicating whether the returned value will be used by the
       caller.
      </entry>
      <entry/>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   For clarity, the fully expanded declaration for <code>PHP_FUNCTION(hackers_function)</code> looks like:
  </para>

  <screen>
<![CDATA[
void zif_hackers_function(int ht, zval* return_value, zval** return_value_ptr, zval* this_ptr, int return_value_used)
]]>
  </screen>

  <para>
    The presence of <code>this_ptr</code> may be confusing, classes are covered in detail in later sections,
    suffice to say that <code>PHP_METHOD(MyClass, hackersFunction)</code> would result in the following declaration:
  </para>

  <screen>
<![CDATA[
void zim_MyClass_hackersFunction(INTERNAL_FUNCTION_PARAMETERS)
]]>
  </screen>

  <para>
   <code>hackers_function</code> doesn't do anything useful, it accepts a number using the <code>zend_parse_parameters</code> API, doubles it, and returns it to the engine.
   It is obvious that a normal function would have to do something more complex than double the input, for the purposes of education we are keeping it simple.
   On entry to the function <code>return_value</code> is allocated and initialized to <code>null</code>, making <code>null</code> the default return value of any function in PHP.
  </para>

  <para>
   If <code>zend_parse_parameters</code> does not recieve what is specified by the <code>Hacker</code> as the correct arguments, and the arguments recieved cannot be converted
   to conform with <code>type_spec</code> an error will be raised, and by convention, the <code>Hacker</code> should <code>return</code> immediately.
  </para>

  <note>
   <para><code>Arrays</code>, <code>Objects</code>, and <code>Resources</code> cannot be converted.</para>
  </note>

  <table xml:id="internals2.funcs.parameters.api">
   <title>Parsing Parameters Prototypes</title>
   <tgroup cols="1">
    <tbody>
     <row>
      <entry><code>int zend_parse_parameters(int num_args TSRMLS_DC, char *type_spec, ...)</code></entry>
     </row>
     <row>
      <entry><code>int zend_parse_parameters_ex(int flags, int num_args TSRMLS_DC, char *type_spec, ...)</code></entry>
     </row>
     <row>
      <entry><code>int zend_parse_parameter(int flags, int arg_num TSRMLS_DC, zval **arg, const char *spec, ...)</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
    <code>zend_parse_parameter</code> is available from version 5.5, it behaves like <code>zend_parse_parameters_ex</code>
    except that instead of reading the arguments from the stack, it receives a single zval to convert, which may be changed in place.
   </para>
  </note>

  <note>
   <para>
    <code>flags</code> is intended to be a mask, currently only <code>ZEND_PARSE_PARAMS_QUIET</code> will have any impact (supress warnings)
   </para>
  </note>

  <para>
   The variable arguments recieved by these API functions are expected to be the address of C variables, and should be considered the output of the <code>zend_parse_parameters</code> API functions.
  </para>

  <table xml:id="internals2.funcs.parameters.types">
   <title>Type Specifiers</title>
   <tgroup cols="3">
     <thead>
     <row>
      <entry>Spec</entry>
      <entry>Type</entry>
      <entry>Locals</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>a</entry>
      <entry><code>array</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>A</entry>
      <entry><code>array</code> or <code>object</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>b</entry>
      <entry><code>boolean</code></entry>
      <entry><code>zend_bool</code></entry>
     </row>
     <row>
      <entry>C</entry>
      <entry><code>class</code></entry>
      <entry><code>zend_class_entry*</code></entry>
     </row>
     <row>
      <entry>d</entry>
      <entry><code>double</code></entry>
      <entry><code>double</code></entry>
     </row>
     <row>
      <entry>f</entry>
      <entry><code>function</code></entry>
      <entry><code>zend_fcall_info*</code>, <code>zend_fcall_info_cache*</code></entry>
     </row>
     <row>
      <entry>h</entry>
      <entry><code>array</code></entry>
      <entry><code>HashTable*</code></entry>
     </row>
     <row>
      <entry>H</entry>
      <entry><code>array</code> or <code>object</code></entry>
      <entry><code>HashTable*</code></entry>
     </row>
     <row>
      <entry>l</entry>
      <entry><code>long</code></entry>
      <entry><code>long</code></entry>
     </row>
     <row>
      <entry>L</entry>
      <entry><code>long</code> (limits out-of-range LONG_MAX/LONG_MIN)</entry>
      <entry><code>long</code></entry>
     </row>
     <row>
      <entry>o</entry>
      <entry><code>object</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>O</entry>
      <entry><code>object</code> (of specified <code>zend_class_entry</code>)</entry>
      <entry><code>zval*</code>, <code>zend_class_entry*</code></entry>
     </row>
     <row>
      <entry>p</entry>
      <entry><code>string</code> (a valid path)</entry>
      <entry><code>char*</code>, <code>int</code></entry>
     </row>
     <row>
      <entry>r</entry>
      <entry><code>resource</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>s</entry>
      <entry><code>string</code></entry>
      <entry><code>char*</code>, <code>int</code></entry>
     </row>
     <row>
      <entry>z</entry>
      <entry><code>mixed</code></entry>
      <entry><code>zval*</code></entry>
     </row>
     <row>
      <entry>Z</entry>
      <entry><code>mixed</code></entry>
      <entry><code>zval**</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
    Where the type specifier is <code>O</code>, the local <code>zend_class_entry*</code> is to be
    considered input (part of the type spec) to <code>zend_parse_parameter</code>
   </para>
  </note>

  <table xml:id="internals2.funcs.parameters.advanced">
   <title>Advanced Type Specifiers</title>
   <tgroup cols="3">
     <thead>
     <row>
      <entry>Spec</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>*</entry>
      <entry>a variable number of argument of the preceeding type, 0 or more</entry>
     </row>
     <row>
      <entry>+</entry>
      <entry>a variable number of argument of the preceeding type, 1 or more</entry>
     </row>
     <row>
      <entry>|</entry>
      <entry>indicates that the remaining parameters are optional</entry>
     </row>
     <row>
      <entry>/</entry>
      <entry><code>SEPARATE_ZVAL_IF_NOT_REF</code> on the parameter it follows</entry>
     </row>
     <row>
      <entry>!</entry>
      <entry>
       the preceeding parameter can be of the specified type or <code>null</code>
       For 'b', 'l' and 'd', an extra argument of type zend_bool* must be passed after
       the corresponding <code>bool*</code>, <code>long*</code> or <code>double*</code>
       addresses which will be set <code>true</code> if <code>null</code> is recieved.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <note>
   <para>Consult <code>README.PARAMETER_PARSING_API</code> included in source distributions for more information on parsing parameters</para>
  </note>

  <para>
   Once the <code>Hacker's</code> function has executed whatever it was implemented to execute, it is time to set the <code>return_value</code> for the engine.
   The <code>RETURN_</code> and <code>RETVAL_</code> macros are just wrappers around <code>Z_*_P</code> macros that work with <code>return_value</code>.
  </para>

  <note>
   <para><code>RETURN_</code> macros cause execution to leave the function immediately (ie: <code>return;</code>), while <code>RETVAL_</code> macros allow execution to continue after <code>return_value</code> has been set.</para>
  </note>

  <para>
   The <code>Hacker</code> should now have a reasonable understanding of the anatomy of a function, and to some degree, the anatomy of a method.
  </para>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
