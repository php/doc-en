<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.ftp-nb-get" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ftp_nb_get</refname>
  <refpurpose>Retrieves a file from the FTP server and writes it to a local file (non-blocking)</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>ftp_nb_get</methodname>
   <methodparam><type>resource</type><parameter>ftp</parameter></methodparam>
   <methodparam><type>string</type><parameter>local_filename</parameter></methodparam>
   <methodparam><type>string</type><parameter>remote_filename</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer><constant>FTP_BINARY</constant></initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>ftp_nb_get</function> retrieves a remote file from the FTP server,
   and saves it into a local file. 
  </para>
  <para>
   The difference between this function and <function>ftp_get</function> is that
   this function retrieves the file asynchronously, so your program can perform 
   other operations while the file is being downloaded.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>ftp</parameter></term>
     <listitem>
      <para>
       The link identifier of the FTP connection.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>local_filename</parameter></term>
     <listitem>
      <para>
       The local file path (will be overwritten if the file already exists).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>remote_filename</parameter></term>
     <listitem>
      <para>
       The remote file path.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       The transfer mode. Must be either <constant>FTP_ASCII</constant> or
       <constant>FTP_BINARY</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>The position in the remote file to start downloading from.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns <constant>FTP_FAILED</constant> or <constant>FTP_FINISHED</constant>
   or <constant>FTP_MOREDATA</constant>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.3.0</entry>
      <entry>
       The <parameter>mode</parameter> parameter is now optional. Formerly it
       has been mandatory.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>ftp_nb_get</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php

// Initiate the download
$ret = ftp_nb_get($my_connection, "test", "README", FTP_BINARY);
while ($ret == FTP_MOREDATA) {
   
   // Do whatever you want
   echo ".";

   // Continue downloading...
   $ret = ftp_nb_continue($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error downloading the file...";
   exit(1);
}
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Resuming a download with <function>ftp_nb_get</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Initiate 
$ret = ftp_nb_get($my_connection, "test", "README", FTP_BINARY, 
                      filesize("test"));
// OR: $ret = ftp_nb_get($my_connection, "test", "README", 
//                           FTP_BINARY, FTP_AUTORESUME);
while ($ret == FTP_MOREDATA) {
   
   // Do whatever you want
   echo ".";

   // Continue downloading...
   $ret = ftp_nb_continue($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error downloading the file...";
   exit(1);
}
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>
     Resuming a download at position 100 to a new
     file with <function>ftp_nb_get</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Disable Autoseek
ftp_set_option($my_connection, FTP_AUTOSEEK, false);

// Initiate
$ret = ftp_nb_get($my_connection, "newfile", "README", FTP_BINARY, 100);
while ($ret == FTP_MOREDATA) {

   /* ... */
   
   // Continue downloading...
   $ret = ftp_nb_continue($my_connection);
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In the example above, <filename>newfile</filename> is 100 bytes smaller
   than <filename>README</filename> on the FTP server because we started
   reading at offset 100. If we didn't disable 
   <constant>FTP_AUTOSEEK</constant>, the first 100 bytes of
   <filename>newfile</filename> would be <literal>'\0'</literal>.
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ftp_nb_fget</function></member>
    <member><function>ftp_nb_continue</function></member>
    <member><function>ftp_fget</function></member>
    <member><function>ftp_get</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
