<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="simplexmlelement.construct" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SimpleXMLElement::__construct</refname>
  <refpurpose>
   Creates a new SimpleXMLElement object
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>SimpleXMLElement::__construct</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>dataIsURL</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>namespaceOrPrefix</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>isPrefix</parameter><initializer>&false;</initializer></methodparam>
  </constructorsynopsis>
  <para>
   Creates a new <classname>SimpleXMLElement</classname> object.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       A well-formed XML string or the path or URL to an XML document if 
       <parameter>dataIsURL</parameter> is &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Optionally used to specify <link linkend="libxml.constants">additional
       Libxml parameters</link>, which affect reading of XML documents. Options which affect the
       output of XML documents (e.g. <constant>LIBXML_NOEMPTYTAG</constant>) are silently ignored.
      </para>
      <note>
       <para>
        It may be necessary to pass <constant><link linkend="constant.libxml-parsehuge">LIBXML_PARSEHUGE</link></constant>
        to be able to process deeply nested XML or very large text nodes.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dataIsURL</parameter></term>
     <listitem>
      <para>
       By default, <parameter>dataIsURL</parameter> is &false;. Use &true; to
       specify that <parameter>data</parameter> is a path or URL to an XML 
       document instead of <type>string</type> data.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>namespaceOrPrefix</parameter></term>
     <listitem>
      <para>
       Namespace prefix or URI.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>isPrefix</parameter></term>
     <listitem>
      <para>
       &true; if <parameter>namespaceOrPrefix</parameter> is a prefix, &false; if it's a URI;
       defaults to &false;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a <type>SimpleXMLElement</type> object representing 
   <parameter>data</parameter>.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Produces an <constant>E_WARNING</constant> error message for each error
   found in the XML data and additionally throws an <classname>Exception</classname> if the XML data
   could not be parsed.
  </para>
  <tip>
   <para>
    Use <function>libxml_use_internal_errors</function> to suppress all XML
    errors, and <function>libxml_get_errors</function> to iterate over them
    afterwards.
   </para>
  </tip>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <note>
    <para>
     Listed examples may include <literal>example.php</literal>,
     which refers to the XML string found in the first example
     of the <link linkend="simplexml.examples-basic">basic usage</link> guide.
    </para>
   </note>
   <example>
    <title>Create a SimpleXMLElement object</title>
    <programlisting role="php">
<![CDATA[
<?php

include 'example.php';

$sxe = new SimpleXMLElement($xmlstr);
echo $sxe->movie[0]->title;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PHP: Behind the Parser
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Create a SimpleXMLElement object from a URL</title>
    <programlisting role="php">
<![CDATA[
<?php

$sxe = new SimpleXMLElement('http://example.org/document.xml', NULL, TRUE);
echo $sxe->asXML();

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="simplexml.examples-basic"/></member>
    <member><function>simplexml_load_string</function></member>
    <member><function>simplexml_load_file</function></member>
    <member><xref linkend="simplexml.examples-errors"/></member>
    <member><function>libxml_use_internal_errors</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
