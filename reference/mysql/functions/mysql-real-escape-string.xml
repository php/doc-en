<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Escapes special characters in a string for use in an SQL statement</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <warning>
   &mysql.alternative.note;
   <simplelist role="alternatives">
    <member><function>mysqli_real_escape_string</function></member>
    <member><methodname>PDO::quote</methodname></member>
   </simplelist>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter><initializer>NULL</initializer></methodparam>
  </methodsynopsis>
  <para>
   Escapes special characters in the <parameter>unescaped_string</parameter>, 
   taking into account the current character set of the connection so that it 
   is safe to place it in a <function>mysql_query</function>. If binary data 
   is to be inserted, this function must be used.
  </para>
  <para>
   <function>mysql_real_escape_string</function> calls MySQL's library function
   mysql_real_escape_string, which prepends backslashes to the following characters:
   <literal>\x00</literal>, <literal>\n</literal>,
   <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
   <literal>"</literal> and <literal>\x1a</literal>.
  </para>
  <para>
   This function must always (with few exceptions) be used to make data
   safe before sending a query to MySQL.
  </para>
  
  <caution>
   <title>Security: the default character set</title>
   <para>
    The character set must be set either at the server level, or with
    the API function <function>mysql_set_charset</function> for it to affect
    <function>mysql_real_escape_string</function>. See the concepts section
    on <link linkend="mysqlinfo.concepts.charset">character sets</link> for
    more information.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>unescaped_string</parameter></term>
     <listitem>
      <para>
       The string that is to be escaped.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the escaped string, or &false; on error.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Executing this function without a MySQL connection present will
   also emit <constant>E_WARNING</constant> level PHP errors. Only
   execute this function with a valid MySQL connection present.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Simple <function>mysql_real_escape_string</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// Connect
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
    OR die(mysql_error());

// Query
$query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
            mysql_real_escape_string($user),
            mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_real_escape_string</function> requires a connection example</title>
    <para>
     This example demonstrates what happens if a MySQL connection is not
     present when calling this function.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// We have not connected to MySQL

$lastname  = "O'Reilly";
$_lastname = mysql_real_escape_string($lastname);

$query = "SELECT * FROM actors WHERE last_name = '$_lastname'";

var_dump($_lastname);
var_dump($query);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Warning: mysql_real_escape_string(): No such file or directory in /this/test/script.php on line 5
Warning: mysql_real_escape_string(): A link to the server could not be established in /this/test/script.php on line 5

bool(false)
string(41) "SELECT * FROM actors WHERE last_name = ''"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>An example SQL Injection Attack</title>
    <programlisting role="php">
<![CDATA[
<?php
// We didn't check $_POST['password'], it could be anything the user wanted! For example:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Query database to check if there are any matching users
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// This means the query sent to MySQL would be:
echo $query;
?>
]]>
    </programlisting>
     <para>
      The query sent to MySQL:
     </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE user='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     This would allow anyone to log in without a valid password.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    A MySQL connection is required before using 
    <function>mysql_real_escape_string</function> otherwise an error of
    level <constant>E_WARNING</constant> is generated, and &false; is 
    returned. If <parameter>link_identifier</parameter> isn't defined, the
    last MySQL connection is used.
   </para>
  </note>
  <note>
   <para>
    If <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> is enabled,
    first apply <function>stripslashes</function> to the data. Using this function
    on data which has already been escaped will escape the data twice.
   </para>
  </note>
  <note>
   <para>
    If this function is not used to escape data, the query is vulnerable to
    <link linkend="security.database.sql-injection">SQL Injection Attacks</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> does not escape
    <literal>%</literal> and <literal>_</literal>. These are wildcards in
    MySQL if combined with <literal>LIKE</literal>, <literal>GRANT</literal>,
    or <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_set_charset</function></member>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>The <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> directive</member>
    <member>The <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link> directive</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
