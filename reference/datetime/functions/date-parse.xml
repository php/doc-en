<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.date-parse" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>date_parse</refname>
  <refpurpose>Returns associative array with detailed info about given date/time</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>date_parse</methodname>
   <methodparam><type>string</type><parameter>datetime</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>date_parse</function> parses the given
   <parameter>datetime</parameter> string according to the same rules as
   <function>strtotime</function> and
   <function>DateTimeImmutable::__construct</function>. Instead of returning a
   Unix timestamp (with <function>strtotime</function>) or a
   <classname>DateTimeImmutable</classname> object (with
   <function>DateTimeImmutable::__construct</function>), it returns an
   associative array with the information that it could detect in the given
   <parameter>datetime</parameter> string.
  </para>
  <para>
   If no information about a certain group of elements can be found, these
   array elements will be set to &false; or are missing. If needed for
   constructing a timestamp or <classname>DateTimeImmutable</classname> object from
   the same <parameter>datetime</parameter> string, more fields can be set to
   a non-&false; value. See the examples for cases where that happens.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>datetime</parameter></term>
     <listitem>
      <para>
       Date/time in format accepted by
       <function>DateTimeImmutable::__construct</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns <type>array</type> with information about the parsed date/time.
  </para>
  <para>
   The returned array has keys for <literal>year</literal>,
   <literal>month</literal>, <literal>day</literal>, <literal>hour</literal>,
   <literal>minute</literal>, <literal>second</literal>,
   <literal>fraction</literal>, and <literal>is_localtime</literal>.
  </para>
  <para>
   If <literal>is_localtime</literal> is present then
   <literal>zone_type</literal> indicates the type of timezone. For type
   <literal>1</literal> (UTC offset) the <literal>zone</literal>,
   <literal>is_dst</literal> fields are added; for type <literal>2</literal>
   (abbreviation) the fields <literal>tz_abbr</literal>,
   <literal>is_dst</literal> are added; and for type <literal>3</literal>
   (timezone identifier) the <literal>tz_abbr</literal>,
   <literal>tz_id</literal> are added.
  </para>
  <para>
   If relative time elements are present in the
   <parameter>datetime</parameter> string such as <literal>+3 days</literal>,
   the then returned array includes a nested array with the key
   <literal>relative</literal>. This array then contains the keys
   <literal>year</literal>, <literal>month</literal>, <literal>day</literal>,
   <literal>hour</literal>, <literal>minute</literal>,
   <literal>second</literal>, and if necessary <literal>weekday</literal>, and
   <literal>weekdays</literal>, depending on the string that was passed in.
  </para>
  <para>
   The array includes <literal>warning_count</literal> and
   <literal>warnings</literal> fields. The first one indicate how many
   warnings there were.
   The keys of elements <literal>warnings</literal> array indicate the
   position in the given <parameter>datetime</parameter> where the warning
   occurred, with the string value describing the warning itself.
  </para>
  <para>
   The array also contains <literal>error_count</literal> and
   <literal>errors</literal> fields. The first one indicate how many errors
   were found.
   The keys of elements <literal>errors</literal> array indicate the
   position in the given <parameter>datetime</parameter> where the error
   occurred, with the string value describing the error itself.
  </para>
  <warning>
   <para>
    The number of array elements in the <literal>warnings</literal> and
    <literal>errors</literal> arrays might be less than
    <literal>warning_count</literal> or <literal>error_count</literal> if they
    occurred at the same position.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   In case the date/time format has an error, the element 'errors' will
   contain the error messages.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.2.0</entry>
      <entry>
       The <literal>zone</literal> element of the returned array represents
       seconds instead of minutes now, and its sign is inverted. For instance
       <literal>-120</literal> is now <literal>7200</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>date_parse</function> example with a comprehensive
    <parameter>datetime</parameter> string</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("2006-12-12 10:00:00.5"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(12) {
  ["year"]=>
  int(2006)
  ["month"]=>
  int(12)
  ["day"]=>
  int(12)
  ["hour"]=>
  int(10)
  ["minute"]=>
  int(0)
  ["second"]=>
  int(0)
  ["fraction"]=>
  float(0.5)
  ["warning_count"]=>
  int(0)
  ["warnings"]=>
  array(0) {
  }
  ["error_count"]=>
  int(0)
  ["errors"]=>
  array(0) {
  }
  ["is_localtime"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>

  <para>
   The timezone elements only show up if they are included in the given
   <parameter>datetime</parameter> string. In that case there will
   always be a <literal>zone_type</literal> element and a few more depending
   on its value.
   <example>
    <title><function>date_parse</function> with timezone abbreviation information</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("June 2nd, 2022, 10:28:17 BST"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(16) {
  ["year"]=>
  int(2022)
  ["month"]=>
  int(6)
  ["day"]=>
  int(2)
  ["hour"]=>
  int(10)
  ["minute"]=>
  int(28)
  ["second"]=>
  int(17)
  ["fraction"]=>
  float(0)
  ["warning_count"]=>
  int(0)
  ["warnings"]=>
  array(0) {
  }
  ["error_count"]=>
  int(0)
  ["errors"]=>
  array(0) {
  }
  ["is_localtime"]=>
  bool(true)
  ["zone_type"]=>
  int(2)
  ["zone"]=>
  int(0)
  ["is_dst"]=>
  bool(true)
  ["tz_abbr"]=>
  string(3) "BST"
}
]]>
    </screen>
   </example>
   <example>
    <title><function>date_parse</function> with timezone identifier information</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("June 2nd, 2022, 10:28:17 Europe/London"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(14) {
  ["year"]=>
  int(2022)
  ["month"]=>
  int(6)
  ["day"]=>
  int(2)
  ["hour"]=>
  int(10)
  ["minute"]=>
  int(28)
  ["second"]=>
  int(17)
  ["fraction"]=>
  float(0)
  ["warning_count"]=>
  int(0)
  ["warnings"]=>
  array(0) {
  }
  ["error_count"]=>
  int(0)
  ["errors"]=>
  array(0) {
  }
  ["is_localtime"]=>
  bool(true)
  ["zone_type"]=>
  int(3)
  ["tz_id"]=>
  string(13) "Europe/London"
}
]]>
    </screen>
   </example>
  </para>

  <para>
   If a more minimal <parameter>datetime</parameter> string is parsed, less
   information is available. In this example, all the time parts are returned
   as &false;.
   <example>
    <title><function>date_parse</function> with a minimal string</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("June 2nd, 2022"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(12) {
  ["year"]=>
  int(2022)
  ["month"]=>
  int(6)
  ["day"]=>
  int(2)
  ["hour"]=>
  bool(false)
  ["minute"]=>
  bool(false)
  ["second"]=>
  bool(false)
  ["fraction"]=>
  bool(false)
  ["warning_count"]=>
  int(0)
  ["warnings"]=>
  array(0) {
  }
  ["error_count"]=>
  int(0)
  ["errors"]=>
  array(0) {
  }
  ["is_localtime"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>

  <para>
   <link linkend="datetime.formats.relative">Relative formats</link> do not
   influence the values parsed from absolute formats, but are parsed into the
   "relative" element.
   <example>
    <title><function>date_parse</function> with relative formats</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("2006-12-12 10:00:00.5 +1 week +1 hour"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(13) {
  ["year"]=>
  int(2006)
  ["month"]=>
  int(12)
  ["day"]=>
  int(12)
  ["hour"]=>
  int(10)
  ["minute"]=>
  int(0)
  ["second"]=>
  int(0)
  ["fraction"]=>
  float(0.5)
  ["warning_count"]=>
  int(0)
  ["warnings"]=>
  array(0) {
  }
  ["error_count"]=>
  int(0)
  ["errors"]=>
  array(0) {
  }
  ["is_localtime"]=>
  bool(false)
  ["relative"]=>
  array(6) {
    ["year"]=>
    int(0)
    ["month"]=>
    int(0)
    ["day"]=>
    int(7)
    ["hour"]=>
    int(1)
    ["minute"]=>
    int(0)
    ["second"]=>
    int(0)
  }
}
]]>
    </screen>
   </example>
  </para>

  <para>
   Some stanzas, such as <literal>Thursday</literal> will set the time portion
   of the string to <literal>0</literal>. If <literal>Thursday</literal> is
   passed to <function>DateTimeImmutable::__construct</function> it would also
   have resulted in the hour, minute, second, and fraction being set to
   <literal>0</literal>. In the example below, the year element is however
   left as &false;.
   <example>
    <title><function>date_parse</function> with side-effects</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("Thursday, June 2nd"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(13) {
  ["year"]=>
  bool(false)
  ["month"]=>
  int(6)
  ["day"]=>
  int(2)
  ["hour"]=>
  int(0)
  ["minute"]=>
  int(0)
  ["second"]=>
  int(0)
  ["fraction"]=>
  float(0)
  ["warning_count"]=>
  int(0)
  ["warnings"]=>
  array(0) {
  }
  ["error_count"]=>
  int(0)
  ["errors"]=>
  array(0) {
  }
  ["is_localtime"]=>
  bool(false)
  ["relative"]=>
  array(7) {
    ["year"]=>
    int(0)
    ["month"]=>
    int(0)
    ["day"]=>
    int(0)
    ["hour"]=>
    int(0)
    ["minute"]=>
    int(0)
    ["second"]=>
    int(0)
    ["weekday"]=>
    int(4)
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>date_parse_from_format</function> for
    parsing a <parameter>datetime</parameter> with a specific given format</member>
    <member><function>checkdate</function> for Gregorian date validation</member>
    <member><function>getdate</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
