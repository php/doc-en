<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.date-parse-from-format" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>date_parse_from_format</refname>
  <refpurpose>Get info about given date formatted according to the specified format</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>date_parse_from_format</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam><type>string</type><parameter>datetime</parameter></methodparam>
  </methodsynopsis>
  <para>
   Returns associative array with detailed info about given date/time.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Documentation on how the <parameter>format</parameter> is used, please
       refer to the documentation of
       <function>DateTimeImmutable::createFromFormat</function>. The same
       rules apply.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>datetime</parameter></term>
     <listitem>
      <para>
       String representing the date/time.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <!-- See also &return.success; -->
  <para>
   Returns associative array with detailed info about given date/time.
  </para>
  <para>
   The returned array has keys for <literal>year</literal>,
   <literal>month</literal>, <literal>day</literal>, <literal>hour</literal>,
   <literal>minute</literal>, <literal>second</literal>,
   <literal>fraction</literal>, and <literal>is_localtime</literal>.
  </para>
  <para>
   If <literal>is_localtime</literal> is present then
   <literal>zone_type</literal> indicates the type of timezone. For type
   <literal>1</literal> (UTC offset) the <literal>zone</literal>,
   <literal>is_dst</literal> fields are added; for type <literal>2</literal>
   (abbreviation) the fields <literal>tz_abbr</literal>,
   <literal>is_dst</literal> are added; and for type <literal>3</literal>
   (timezone identifier) the <literal>tz_abbr</literal>,
   <literal>tz_id</literal> are added.
  </para>
  <para>
   The array includes <literal>warning_count</literal> and
   <literal>warnings</literal> fields. The first one indicate how many
   warnings there were.
   The keys of elements <literal>warnings</literal> array indicate the
   position in the given <parameter>datetime</parameter> where the warning
   occurred, with the string value describing the warning itself. An example
   below shows such a warning.
  </para>
  <para>
   The array also contains <literal>error_count</literal> and
   <literal>errors</literal> fields. The first one indicate how many errors
   were found.
   The keys of elements <literal>errors</literal> array indicate the
   position in the given <parameter>datetime</parameter> where the error
   occurred, with the string value describing the error itself. An example
   below shows such an error.
  </para>
  <warning>
   <para>
    The number of array elements in the <literal>warnings</literal> and
    <literal>errors</literal> arrays might be less than
    <literal>warning_count</literal> or <literal>error_count</literal> if they
    occurred at the same position.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   This functions throws <exceptionname>ValueError</exceptionname> when the
   <parameter>datetime</parameter> contains NULL-bytes.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.21, 8.1.8, 8.2.0</entry>
      <entry>
       Now throws <exceptionname>ValueError</exceptionname> when NULL-bytes
       are passed into <parameter>datetime</parameter>, which previously was silently
       ignored.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       The <literal>zone</literal> element of the returned array represents
       seconds instead of minutes now, and its sign is inverted. For instance
       <literal>-120</literal> is now <literal>7200</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>date_parse_from_format</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$date = "6.1.2009 13:00+01:00";
print_r(date_parse_from_format("j.n.Y H:iP", $date));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [year] => 2009
    [month] => 1
    [day] => 6
    [hour] => 13
    [minute] => 0
    [second] => 0
    [fraction] =>
    [warning_count] => 0
    [warnings] => Array
        (
        )

    [error_count] => 0
    [errors] => Array
        (
        )

    [is_localtime] => 1
    [zone_type] => 1
    [zone] => 3600
    [is_dst] =>
)
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title><function>date_parse_from_format</function> with warnings example</title>
    <programlisting role="php">
<![CDATA[
<?php
$date = "26 August 2022 22:30 pm";
$parsed = date_parse_from_format("j F Y G:i a", $date);

echo "Warnings count: ", $parsed['warning_count'], "\n";
foreach ($parsed['warnings'] as $position => $message) {
    echo "\tOn position {$position}: {$message}\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Warnings count: 1
	On position 23: The parsed time was invalid
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title><function>date_parse_from_format</function> with errors example</title>
    <programlisting role="php">
<![CDATA[
<?php
$date = "26 August 2022 CEST";
$parsed = date_parse_from_format("j F Y H:i", $date);

echo "Errors count: ", $parsed['error_count'], "\n";
foreach ($parsed['errors'] as $position => $message) {
    echo "\tOn position {$position}: {$message}\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Errors count: 3
	On position 15: A two digit hour could not be found
	On position 19: Data missing
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>DateTimeImmutable::createFromFormat</function></member>
    <member><function>checkdate</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
