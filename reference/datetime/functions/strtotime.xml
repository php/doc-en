<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- splitted from ./en/functions/datetime.xml, last change in rev 1.8 -->
<refentry xml:id="function.strtotime" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtotime</refname>
  <refpurpose>Parse about any English textual datetime description into a Unix timestamp</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>strtotime</methodname>
   <methodparam><type>string</type><parameter>datetime</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>baseTimestamp</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   The function expects to be given a string containing an English date format
   and will try to parse that format into a Unix timestamp (the number of
   seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given
   in <parameter>baseTimestamp</parameter>, or the current time if
   <parameter>baseTimestamp</parameter> is not supplied.
  </simpara>
  <warning>
   <para>
    The Unix timestamp that this function returns does not contain information
    about time zones. In order to do calculations with date/time information,
    you should use the more capable <classname>DateTimeImmutable</classname>.
   </para>
  </warning>
  <para>
   Each parameter of this function uses the default time zone unless a
   time zone is specified in that parameter.  Be careful not to use
   different time zones in each parameter unless that is intended.
   See <function>date_default_timezone_get</function> on the various
   ways to define the default time zone.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>datetime</parameter></term>
     <listitem>
      <para>&date.formats.parameter;</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>baseTimestamp</parameter></term>
     <listitem>
      <para>
       The timestamp which is used as a base for the calculation of relative
       dates.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a timestamp on success, &false; otherwise.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
   
   &date.timezone.errors.description;
 
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>baseTimestamp</parameter> is nullable now.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1>
  <para>
   The order of date components varies in different parts of the world, as does
   the separator commonly used.  The algorithm attempts to guess what date is intended
   based on the separator used, as well as whether the date is specified using 2 digits or 4 digits.
  </para>
  <para>If the year component is 2 digits, then the algorithm is as follows:</para>
  <simplelist>
   <member>
    Strings with a <literal>/</literal> separator are interpreted in US order.
    That is, <literal>m/d/y</literal>.
   </member>
   <member>
    Strings with a <literal>.</literal> separator are interpreted as a time, not a date.
    That is, <literal>h.i.s</literal>.
   </member>
   <member>
    Strings with a <literal>-</literal> separator are interpreted as an ISO 8601 (ATOM)
    formatted date with the year first.  That is, <literal>y-m-d</literal>.
   </member>
  </simplelist>
  <para>If the year component is 4 digits, then the algorithm is as follows:</para>
  <simplelist>
   <member>
    Strings with a <literal>/</literal> separator are interpreted in US order.
    That is, <literal>m/d/y</literal>.
   </member>
   <member>
    Strings with a <literal>.</literal> separator are interpreted in international order.
    That is, <literal>d.m.y</literal>.
   </member>
   <member>
    Strings with a <literal>-</literal> separator are interpreted in international order.
    That is, <literal>d-m-y</literal>.
   </member>
  </simplelist>
  <para>If the selected interpretation results in an out of range month component, &false; will be returned.</para>
  <para>
   <example>
    <title><function>time</function> example</title>
    <programlisting role="php">
     <![CDATA[
<?php
function format(string $s)
{
    print $s . ' is interpreted as ' . date('r', strtotime($s)) . PHP_EOL;
}

// Strings without timezones will be interpreted
// in the system default timezone.
date_default_timezone_set('America/Chicago');

format('5/6/21');
format('5.6.21');
format('5-6-21');
format('5/6/2021');
format('5.6.2021');
format('5-6-2021');

format('5/20/21');
format('5.20.21');
format('5-20-21');
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
     <![CDATA[
5/6/21 is interpreted as Thu, 06 May 2021 00:00:00 -0500
5.6.21 is interpreted as Mon, 4 Jul 2022 05:06:21 -0500  (date will be when the code is run)
5-6-21 is interpreted as Tue, 21 Jun 2005 00:00:00 -0500
5/6/2021 is interpreted as Thu, 06 May 2021 00:00:00 -0500
5.6.2021 is interpreted as Sat, 05 Jun 2021 00:00:00 -0500
5-6-2021 is interpreted as Sat, 05 Jun 2021 00:00:00 -0500
]]>
    </screen>
   </example>
  </para>
  <para>
   For the full description of the string parsing logic, see <link linkend="datetime.formats">Date and Time Formats</link>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>strtotime</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
echo strtotime("now"), "\n";
echo strtotime("10 September 2000"), "\n";
echo strtotime("+1 day"), "\n";
echo strtotime("+1 week"), "\n";
echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
echo strtotime("next Thursday"), "\n";
echo strtotime("last Monday"), "\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Checking for failure</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'Not Good';

if (($timestamp = strtotime($str)) === false) {
    echo "The string ($str) is bogus";
} else {
    echo "$str == " . date('l dS \o\f F Y h:i:s A', $timestamp);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    "Relative" date in this case also means that if a particular component
    of the date/time stamp is not provided, it will be taken verbatim from
    the <parameter>baseTimestamp</parameter>.  That is, <code>strtotime('February')</code>,
    if run on the 31st of May 2022, will be interpreted as <literal>31 February 2022</literal>,
    which will overflow into a timestamp on <literal>3 March</literal>.
    (In a leap year, it would be <literal>2 March</literal>.)  Using
    <code>strtotime('1 February')</code> or <code>strtotime('first day of February')</code>
    would eliminate that problem.
   </para>
  </note>
  <note>
   <para>
    If the number of the year is specified in a two digit format, the values
    between 00-69 are mapped to 2000-2069 and 70-99 to 1970-1999. See the notes
    below for possible differences on 32bit systems (possible dates might end on 
    2038-01-19 03:14:07).
   </para>
  </note>
  <note>
   <para>
    The valid range of a timestamp is typically from Fri, 13 Dec
    1901 20:45:54 UTC to Tue, 19 Jan 2038 03:14:07 UTC. (These are
    the dates that correspond to the minimum and maximum values for
    a 32-bit signed integer.)
   </para>
   <para>
    For 64-bit versions of PHP, the valid range of a timestamp is effectively
    infinite, as 64 bits can represent approximately 293 billion years in either
    direction.
   </para>
  </note>
  <note>
   <para>
    Using this function for mathematical operations is not advisable.
    It is better to use <methodname>DateTime::add</methodname> and
    <methodname>DateTime::sub</methodname>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="datetime.formats">Date and Time Formats</link></member>
    <member><methodname>DateTime::createFromFormat</methodname></member>
    <member><function>checkdate</function></member>
    <member><function>strptime</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
