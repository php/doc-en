<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.cubrid-get-db-parameter" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_get_db_parameter</refname>
  <refpurpose>Returns the CUBRID database parameters</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>cubrid_get_db_parameter</methodname>
   <methodparam><type>resource</type><parameter>conn_identifier</parameter></methodparam>  
  </methodsynopsis>
  <para>
   This function returns the CUBRID database parameters,&return.falseforfailure;. 
   It returns an associative array with the values for the following parameters:
  </para>
  <para>
  <simplelist>
   <member><constant>PARAM_ISOLATION_LEVEL</constant></member>
   <member><constant>PARAM_LOCK_TIMEOUT</constant></member>
   <member><constant>PARAM_MAX_STRING_LENGTH</constant></member>
   <member><constant>PARAM_AUTO_COMMIT</constant></member>
  </simplelist>
  </para>
  <para>
  <table>
   <title>Database parameters</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Parameter</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PARAM_ISOLATION_LEVEL</entry>
       <entry>The transaction isolation level.</entry>
      </row>
      <row>
       <entry>LOCK_TIMEOUT</entry>
       <entry>CUBRID provides the lock timeout feature, which sets the waiting
        time (in seconds) for the lock until the transaction lock setting is
        allowed. The default value of the lock_timeout_in_secs parameter is
        -1, which means the application client will wait indefinitely until
        the transaction lock is allowed.
       </entry>
      </row>
      <row>
       <entry>PARAM_AUTO_COMMIT</entry>
       <entry>In CUBRID PHP, auto-commit mode is disabled by default for
        transaction management. It can be set by using
        <function>cubrid_set_autocommit</function>. 
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   The following table shows the isolation levels from 1 to 6. It consists of
   table schema (row) and isolation level:
  <table>
   <title>Levels of Isolation Supported by CUBRID</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Name</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>SERIALIZABLE (6)</entry>
       <entry>In this isolation level, problems concerning concurrency (e.g.
        dirty read, non-repeatable read, phantom read, etc.) do not
        occur.</entry>
      </row>
      <row>
       <entry>REPEATABLE READ CLASS with REPEATABLE READ INSTANCES (5)</entry>
       <entry>Another transaction T2 cannot update the schema of table A while
        transaction T1 is viewing table A.
       Transaction T1 may experience phantom read for the record R that was
       inserted by another transaction T2 when it is repeatedly retrieving a
       specific record.</entry>
      </row>
      <row>
       <entry>REPEATABLE READ CLASS with READ COMMITTED INSTANCES (or CURSOR STABILITY) (4)</entry>
       <entry>Another transaction T2 cannot update the schema of table A while
        transaction T1 is viewing table A.
       Transaction T1 may experience R read (non-repeatable read) that was
       updated and committed by another transaction T2 when it is repeatedly
       retrieving the record R.</entry>
      </row>
      <row>
       <entry>REPEATABLE READ CLASS with READ UNCOMMITTED INSTANCES (3)</entry>
       <entry>Default isolation level.  Another transaction T2 cannot update
        the schema of table A  while transaction T1 is viewing table A.
        Transaction T1 may experience R' read (dirty read) for the record that
        was updated but not committed by another transaction T2.</entry>
      </row>
      <row>
       <entry>READ COMMITTED CLASS with READ COMMITTED INSTANCES (2)</entry>
       <entry>Transaction T1 may experience A' read (non-repeatable read) for
        the table that was updated and committed by another transaction  T2
        while it is viewing table A repeatedly.  Transaction T1 may experience
        R' read (non-repeatable read) for the record that was updated and
        committed by another transaction T2 while it is retrieving the record
        R repeatedly.</entry>
      </row>
      <row>
       <entry>READ COMMITTED CLASS with READ UNCOMMITTED INSTANCES (1)</entry>
       <entry>Transaction T1 may experience A' read (non-repeatable read) for
        the table that was updated and committed by another transaction T2
        while it is repeatedly viewing table A.  Transaction T1 may experience
        R' read (dirty read) for the record that was updated but not committed
        by another transaction T2.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>

 <refsect1 role="parameters">
 &reftitle.parameters;
 <para>
  <variablelist>
   <varlistentry>
    <term><parameter>conn_identifier</parameter></term>
    <listitem><para>
      The CUBRID connection. If the connection identifier is not specified,
      the last link opened by <function>cubrid_connect</function> is assumed. 
    </para></listitem>
   </varlistentry>
  </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   An associative array with CUBRID database parameters; on success,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.4.0</entry>
       <entry>
        Change LOCK_TIMEOUT to PARAM_LOCK_TIMEOUT, and MAX_STRING_LENGTH to
        PARAM_MAX_STRING_LENGTH in result.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>cubrid_get_db_parameter</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
printf("%-30s %s\n", "CUBRID PHP Version:", cubrid_version());

printf("\n");

$conn = cubrid_connect("localhost", 33088, "demodb");

if (!$conn) {
    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());
}

$db_params = cubrid_get_db_parameter($conn);

while (list($param_name, $param_value) = each($db_params)) {
    printf("%-30s %s\n", $param_name, $param_value);
}

printf("\n");

$server_info = cubrid_get_server_info($conn);
$client_info = cubrid_get_client_info();

printf("%-30s %s\n", "Server Info:", $server_info);
printf("%-30s %s\n", "Client Info:", $client_info);

printf("\n");

$charset = cubrid_get_charset($conn);

printf("%-30s %s\n", "CUBRID Charset:", $charset);

cubrid_disconnect($conn);

?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
CUBRID PHP Version:            9.1.0.0001

PARAM_ISOLATION_LEVEL          3
LOCK_TIMEOUT                   -1
MAX_STRING_LENGTH              1073741823
PARAM_AUTO_COMMIT              1

Server Info:                   9.1.0.0212
Client Info:                   9.1.0

CUBRID Charset:                iso8859-1
]]>
    </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_set_db_parameter</function></member>
    <member><function>cubrid_get_autocommit</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
