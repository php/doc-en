<?xml version="1.0" encoding="utf-8"?>
<refentry xml:id="function.sqlsrv-fetch-object" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sqlsrv_fetch_object</refname>
  <refpurpose>Retrieves the next row of data in a result set as an object</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>sqlsrv_fetch_object</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>className</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>ctorParams</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>row</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retrieves the next row of data in a result set as an instance of the specified 
   class with properties that match the row field names and values that correspond 
   to the row field values.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       A statement resource created by <function>sqlsrv_query</function> or 
       <function>sqlsrv_execute</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>className</parameter></term>
     <listitem>
      <para>
       The name of the class to instantiate. If no class name is specified, 
       stdClass is instantiated.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ctorParams</parameter></term>
     <listitem>
      <para>
       Values passed to the constructor of the specified class. If the constructor 
       of the specified class takes parameters, the ctorParams array must be 
       supplied.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>row</parameter></term>
     <listitem>
      <para>
       The row to be accessed. This parameter can only be used if the specified 
       statement was prepared with a scrollable cursor. In that case, this parameter 
       can take on one of the following values:
       <simplelist>
        <member>SQLSRV_SCROLL_NEXT</member>
        <member>SQLSRV_SCROLL_PRIOR</member>
        <member>SQLSRV_SCROLL_FIRST</member>
        <member>SQLSRV_SCROLL_LAST</member>
        <member>SQLSRV_SCROLL_ABSOLUTE</member>
        <member>SQLSRV_SCROLL_RELATIVE</member>
       </simplelist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Specifies the row to be accessed if the row parameter is set to
       <constant>SQLSRV_SCROLL_ABSOLUTE</constant> or
       <constant>SQLSRV_SCROLL_RELATIVE</constant>. Note that the first row in
       a result set has index 0.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para> 
   Returns an object on success, &null; if there are no more rows to return, 
   and &false; if an error occurs or if the specified class does not exist.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>sqlsrv_fetch_object</function> example</title>
    <para>
    The following example demonstrates how to retrieve a row as a stdClass object.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$serverName = "serverName\sqlexpress";
$connectionInfo = array( "Database"=>"dbName", "UID"=>"username", "PWD"=>"password");
$conn = sqlsrv_connect( $serverName, $connectionInfo);
if( $conn === false ) {
     die( print_r( sqlsrv_errors(), true));
}

$sql = "SELECT fName, lName FROM Table_1";
$stmt = sqlsrv_query( $conn, $sql);
if( $stmt === false ) {
     die( print_r( sqlsrv_errors(), true));
}

// Retrieve each row as an object.
// Because no class is specified, each row will be retrieved as a stdClass object.
// Property names correspond to field names.
while( $obj = sqlsrv_fetch_object( $stmt)) {
      echo $obj->fName.", ".$obj->lName."<br />";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   If a class name is specified with the optional $className parameter and the 
   class has properties whose names match the result set field names, the corresponding 
   result set values are applied to the properties. If a result set field name 
   does not match a class property, a property with the result set field name is added 
   to the object and the result set value is applied to the property. The following 
   rules apply when using the $className parameter:
   <simplelist>
      <member>Field-property name matching is case-sensitive.</member>
      <member>Field-property matching occurs regardless of access modifiers.</member>
      <member>Class property data types are ignored when applying a field value to a property.</member>
      <member>If the class does not exist, the function returns &false; and adds an error to the error collection.</member>
   </simplelist>
   Regardless of whether the $className parameter is supplied, if a field with no 
   name is returned, the field value will be ignored and a warning will be added 
   to the error collection.
  </para>
  <para>
   When consuming a result set that has multiple columns with the same name, it may 
   be better to use <function>sqlsrv_fetch_array</function> or the combination of 
   <function>sqlsrv_fetch</function> and <function>sqlsrv_get_field</function>.
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlsrv_fetch</function></member>
    <member><function>sqlsrv_fetch_array</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
