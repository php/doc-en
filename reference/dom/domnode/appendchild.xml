<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="domnode.appendchild" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMNode::appendChild</refname>
  <refpurpose>
   Adds new child at the end of the children
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>DOMNode</type><type>false</type></type><methodname>DOMNode::appendChild</methodname>
   <methodparam><type>DOMNode</type><parameter>node</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function appends a child to an existing list of children or creates
   a new list of children. The child can be created with e.g. 
   <methodname>DOMDocument::createElement</methodname>,
   <methodname>DOMDocument::createTextNode</methodname> etc. or simply by using
   any other node.
  </para>
  <para>
   When using an existing node it will be moved.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>node</parameter></term>
     <listitem>
      <para>
       The appended child.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   The node added.
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <variablelist>
    <varlistentry>
     <term><constant>DOM_NO_MODIFICATION_ALLOWED_ERR</constant></term>
     <listitem>
      <para>
       Raised if this node is readonly or if the previous parent of the node
       being inserted is readonly.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>DOM_HIERARCHY_REQUEST_ERR</constant></term>
     <listitem>
      <para>
       Raised if this node is of a type that does not allow children of the 
       type of the <parameter>node</parameter> node, or if the node to 
       append is one of this node's ancestors or this node itself.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>DOM_WRONG_DOCUMENT_ERR</constant></term>
     <listitem>
      <para>
       Raised if <parameter>node</parameter> was created from a different 
       document than the one that created this node.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   The following example will add a new element node to a fresh document.
   <example>
    <title>Adding a child</title>
    <programlisting role="php">
<![CDATA[
<?php

$doc = new DOMDocument;

$node = $doc->createElement("para");
$newnode = $doc->appendChild($node);

echo $doc->saveXML();
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   <example>
    <title>Nested children</title>
    <programlisting role="php">
<![CDATA[
<?php

$doc = new DOMDocument;

$headNode = $doc->createElement("head");
$doc->appendChild($headNode);

$titleNode = $doc->createElement("title");
$headNode->appendChild($titleNode);

echo $doc->saveXML();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>DOMChildNode::after</methodname></member>
    <member><methodname>DOMNode::insertBefore</methodname></member>
    <member><methodname>DOMNode::removeChild</methodname></member>
    <member><methodname>DOMNode::replaceChild</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
