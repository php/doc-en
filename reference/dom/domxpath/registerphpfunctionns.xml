<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="domxpath.registerphpfunctionns" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <refnamediv>
  <refname>DOMXPath::registerPhpFunctionNS</refname>
  <refpurpose>Register a PHP functions as namespaced XPath function</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="DOMXPath">
   <modifier>public</modifier> <type>void</type><methodname>DOMXPath::registerPhpFunctionNS</methodname>
   <methodparam><type>string</type><parameter>namespaceURI</parameter></methodparam>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callable</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   This method enables the ability to use a PHP function as a namespaced XPath function
   inside XPath expressions.
  </simpara>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>namespaceURI</parameter></term>
    <listitem>
     <simpara>
      The URI of the namespace.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>name</parameter></term>
    <listitem>
     <simpara>
      The local function name inside the namespace.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>callable</parameter></term>
    <listitem>
     <simpara>
      The PHP function to call when the XPath function gets called within the XPath expression.
      When a node list is passed as parameter to the callback,
      they are arrays containing the matched DOM nodes.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <xi:include xpointer="domxpath.registerphpfunctions..errors" />

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   &return.void;
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Register a namespaced XPath function and call it from the XPath expression</title>
   <programlisting role="php">
<![CDATA[
<?php
$xml = <<<EOB
<books>
<book>
 <title>PHP Basics</title>
 <author>Jim Smith</author>
 <author>Jane Smith</author>
</book>
<book>
 <title>PHP Secrets</title>
 <author>Jenny Smythe</author>
</book>
<book>
 <title>XML basics</title>
 <author>Joe Black</author>
</book>
</books>
EOB;

$doc = new DOMDocument;
$doc->loadXML($xml);

$xpath = new DOMXPath($doc);

// Register the my: namespace (required)
$xpath->registerNamespace("my", "urn:my.ns");

// Register PHP functions (no restrictions)
$xpath->registerPHPFunctionNS(
    'urn:my.ns',
    'substring',
    fn (array $arg1, int $start, int $length) => substr($arg1[0]->textContent, $start, $length)
);

// Call substr function on the book title
$nodes = $xpath->query('//book[my:substring(title, 0, 3) = "PHP"]');

echo "Found {$nodes->length} books starting with 'PHP':\n";
foreach ($nodes as $node) {
   $title  = $node->getElementsByTagName("title")->item(0)->nodeValue;
   $author = $node->getElementsByTagName("author")->item(0)->nodeValue;
   echo "$title by $author\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Found 2 books starting with 'PHP':
PHP Basics by Jim Smith
PHP Secrets by Jenny Smythe
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>DOMXPath::registerNamespace</methodname></member>
   <member><methodname>DOMXPath::query</methodname></member>
   <member><methodname>DOMXPath::evaluate</methodname></member>
   <member><methodname>XSLTProcessor::registerPHPFunctions</methodname></member>
   <member><methodname>XSLTProcessor::registerPHPFunctionNS</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
