<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.stream-filter-append" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_append</refname>
  <refpurpose>Attach a filter to a stream</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>stream_filter_append</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>read_write</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <para>
   Adds <parameter>filtername</parameter> to the list of filters
   attached to <parameter>stream</parameter>.  
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      <para>
       The target stream.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       The filter name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read_write</parameter></term>
     <listitem>
      <para>
       By default, <function>stream_filter_append</function> will
       attach the filter to the <literal>read filter chain</literal>
       if the file was opened for reading (i.e. File Mode:
       <literal>r</literal>, and/or <literal>+</literal>).  The filter
       will also be attached to the <literal>write filter chain</literal>
       if the file was opened for writing (i.e. File Mode:
       <literal>w</literal>, <literal>a</literal>, and/or <literal>+</literal>).
       <constant>STREAM_FILTER_READ</constant>,
       <constant>STREAM_FILTER_WRITE</constant>, and/or
       <constant>STREAM_FILTER_ALL</constant> can also be passed to the
       <parameter>read_write</parameter> parameter to override this behavior.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       This filter will be added with the specified 
       <parameter>params</parameter> to the <emphasis>end</emphasis> of
       the list and will therefore be called last during stream operations.
       To add a filter to the beginning of the list, use
       <function>stream_filter_prepend</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a resource on success or &false; on failure. The resource can be
   used to refer to this filter instance during a call to
   <function>stream_filter_remove</function>.
  </para>

  <para>
   &false; is returned if <parameter>stream</parameter> is not a resource or
   if <parameter>filtername</parameter> cannot be located.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Controlling where filters are applied</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Open a test file for reading and writing */
$fp = fopen('test.txt', 'w+');

/* Apply the ROT13 filter to the
 * write filter chain, but not the
 * read filter chain */
stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);

/* Write a simple string to the file
 * it will be ROT13 transformed on the
 * way out */
fwrite($fp, "This is a test\n");

/* Back up to the beginning of the file */
rewind($fp);

/* Read the contents of the file back out.
 * Had the filter been applied to the
 * read filter chain as well, we would see
 * the text ROT13ed back to its original state */
fpassthru($fp);

fclose($fp);

/* Expected Output
   ---------------

Guvf vf n grfg

 */
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>When using custom (user) filters</title>
   <simpara>
    <function>stream_filter_register</function> must be called first
    in order to register the desired user filter to <parameter>filtername</parameter>.
   </simpara>
  </note>
  <note>
   <simpara>
    Stream data is read from resources (both local and remote) in chunks,
    with any unconsumed data kept in internal buffers.  When a new
    filter is appended to a stream, data in the internal buffers is processed through
    the new filter at that time.  This differs from the behavior of
    <function>stream_filter_prepend</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    When a filter is added for read and write, two instances of the filter
    are created. <function>stream_filter_append</function> must be called twice 
    with <constant>STREAM_FILTER_READ</constant> and 
    <constant>STREAM_FILTER_WRITE</constant> to get both filter resources.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_filter_register</function></member>
   <member><function>stream_filter_prepend</function></member>
   <member><function>stream_get_filters</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
