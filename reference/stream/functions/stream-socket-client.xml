<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.stream-socket-client" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_socket_client</refname>
  <refpurpose>Open Internet or Unix domain socket connection</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>stream_socket_client</methodname>
   <methodparam><type>string</type><parameter>remote_socket</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">errno</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">errstr</parameter></methodparam>
   <methodparam choice="opt"><type>float</type><parameter>timeout</parameter><initializer>ini_get("default_socket_timeout")</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>STREAM_CLIENT_CONNECT</initializer></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Initiates a stream or datagram connection to the destination specified
   by <parameter>remote_socket</parameter>.  The type of socket created
   is determined by the transport specified using standard URL formatting:
   <literal>transport://target</literal>.  For Internet Domain sockets
   (AF_INET) such as TCP and UDP, the <literal>target</literal> portion
   of the <parameter>remote_socket</parameter> parameter should consist of
   a hostname or IP address followed by a colon and a port number.  For Unix
   domain sockets, the <parameter>target</parameter> portion should point
   to the socket file on the filesystem.
  </para>
  <note>
   <para>
    The stream will by default be opened in blocking mode.  You can
    switch it to non-blocking mode by using
    <function>stream_set_blocking</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters"><!-- {{{ -->
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>remote_socket</parameter></term>
     <listitem>
      <para>
       Address to the socket to connect to.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errno</parameter></term>
     <listitem>
      <para>
       Will be set to the system level error number if connection fails.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errstr</parameter></term>
     <listitem>
      <para>
       Will be set to the system level error message if the connection fails.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Number of seconds until the <literal>connect()</literal> system call
       should timeout.
       <note>
        <simpara>
         This parameter only applies when not making asynchronous
         connection attempts.
        </simpara>
       </note>
       <note>
        <para>
         To set a timeout for reading/writing data over the socket, use the
         <function>stream_set_timeout</function>, as the
         <parameter>timeout</parameter> only applies while making connecting
         the socket.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Bitmask field which may be set to any combination of connection flags.
       Currently the select of connection flags is limited to
       <constant>STREAM_CLIENT_CONNECT</constant> (default),
       <constant>STREAM_CLIENT_ASYNC_CONNECT</constant> and
       <constant>STREAM_CLIENT_PERSISTENT</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       A valid context resource created with <function>stream_context_create</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   On success a stream resource is returned which may
   be used together with the other file functions (such as
   <function>fgets</function>, <function>fgetss</function>,
   <function>fwrite</function>, <function>fclose</function>, and
   <function>feof</function>), &false; on failure.
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   On failure the <parameter>errno</parameter> and
   <parameter>errstr</parameter> arguments will be populated with the actual
   system level error that occurred in the system-level
   <literal>connect()</literal> call. If the value returned in
   <parameter>errno</parameter> is <literal>0</literal> and the
   function returned &false;, it is an indication that the error
   occurred before the <literal>connect()</literal> call. This is
   most likely due to a problem initializing the socket. Note that
   the <parameter>errno</parameter> and
   <parameter>errstr</parameter> arguments will always be passed by
   reference.
  </para>
 </refsect1><!-- }}} -->
 
 
 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="stream-socket-client.example.basic"><!-- {{{ -->
    <title><function>stream_socket_client</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    fwrite($fp, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\n");
    while (!feof($fp)) {
        echo fgets($fp, 1024);
    }
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example><!-- }}} -->
   <example xml:id="stream-socket-client.example.daytime"><!-- {{{ -->
    <title>Using UDP connection</title>
    <para>
     Retrieving the day and time from the UDP service "daytime" (port 13)
     on localhost.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$fp = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
if (!$fp) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($fp, "\n");
    echo fread($fp, 26);
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example><!-- }}} -->
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="notes"><!-- {{{ -->
  &reftitle.notes;
  <warning>
   <simpara>
     UDP sockets will sometimes appear to have opened without an error,
     even if the remote host is unreachable.  The error will only
     become apparent when you read or write data to/from the socket.
     The reason for this is because UDP is a "connectionless" protocol,
     which means that the operating system does not try to establish
     a link for the socket until it actually needs to send or receive data.
   </simpara>
  </warning>
  &ipv6.brackets;
  <note>
   <para>
    Depending on the environment, the Unix domain or the optional
    connect timeout may not be available.  A list of available
    transports can be retrieved using <function>stream_get_transports</function>.
    See <xref linkend="transports"/> for a list of built in transports.
   </para>
  </note>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso"><!-- {{{ -->
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_socket_server</function></member>
    <member><function>stream_set_blocking</function></member>
    <member><function>stream_set_timeout</function></member>
    <member><function>stream_select</function></member>
    <member><function>fgets</function></member>
    <member><function>fgetss</function></member>
    <member><function>fwrite</function></member>
    <member><function>fclose</function></member>
    <member><function>feof</function></member>
    <member><xref linkend="ref.curl" /></member>
   </simplelist>
  </para>
 </refsect1><!-- }}} -->

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
