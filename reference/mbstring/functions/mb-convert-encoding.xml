<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.mb-convert-encoding" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mb_convert_encoding</refname>
  <refpurpose>Convert a string from one character encoding to another</refpurpose>
 </refnamediv>
   
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>string</type><type>false</type></type><methodname>mb_convert_encoding</methodname>
   <methodparam><type class="union"><type>array</type><type>string</type></type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>to_encoding</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>array</type><type>string</type><type>null</type></type><parameter>from_encoding</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Converts <parameter>string</parameter> from <parameter>from_encoding</parameter>,
   or the current internal encoding, to <parameter>to_encoding</parameter>.
   If <parameter>string</parameter> is an &array;, all its &string; values will be
   converted recursively.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       The &string; or &array; to be converted.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>to_encoding</parameter></term>
     <listitem>
      <para>
       The desired encoding of the result.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>from_encoding</parameter></term>
     <listitem>
      <para>
       The current encoding used to interpret <parameter>string</parameter>.
       Multiple encodings may be specified as an &array; or comma separated
       list, in which case the correct encoding will be guessed using the
       same algorithm as <function>mb_detect_encoding</function>.
      </para>
      <para>
       If <parameter>from_encoding</parameter> is &null; or not specified, the
       <link linkend="ini.mbstring.internal-encoding">mbstring.internal_encoding setting</link>
       will be used if set, otherwise the <link linkend="ini.default-charset">default_charset setting</link>.
      </para>
      <para>
       See <link linkend="mbstring.supported-encodings">supported encodings</link>
       for valid values of <parameter>to_encoding</parameter>
       and <parameter>from_encoding</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   The encoded &string; or &array; on success, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   As of PHP 8.0.0, a <classname>ValueError</classname> is thrown if the
   value of <parameter>to_encoding</parameter> or 
   <parameter>from_encoding</parameter> is an invalid encoding.
   Prior to PHP 8.0.0, a <constant>E_WARNING</constant> was emitted instead.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>mb_convert_encoding</function> will now throw a
       <classname>ValueError</classname> when 
       <parameter>to_encoding</parameter> is passed an invalid encoding.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>mb_convert_encoding</function> will now throw a
       <classname>ValueError</classname> when 
       <parameter>from_encoding</parameter> is passed an invalid encoding.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>from_encoding</parameter> is nullable now.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       This function now also accepts an &array; as <parameter>string</parameter>.
       Formerly, only &string;s have been supported.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>mb_convert_encoding</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Convert internal character encoding to SJIS */
$str = mb_convert_encoding($str, "SJIS");

/* Convert EUC-JP to UTF-7 */
$str = mb_convert_encoding($str, "UTF-7", "EUC-JP");

/* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE */
$str = mb_convert_encoding($str, "UCS-2LE", "JIS, eucjp-win, sjis-win");

/* If mbstring.language is "Japanese", "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS" */
$str = mb_convert_encoding($str, "EUC-JP", "auto");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
  
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mb_detect_order</function></member>
    <member><methodname>UConverter::transcode</methodname></member>
    <member><function>iconv</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
