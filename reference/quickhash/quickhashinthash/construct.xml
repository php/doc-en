<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="quickhashinthash.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>QuickHashIntHash::__construct</refname>
  <refpurpose>Creates a new QuickHashIntHash object</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>QuickHashIntHash::__construct</methodname>
   <methodparam><type>int</type><parameter>size</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   This constructor creates a new <classname>QuickHashIntHash</classname>. The size is the amount of
   bucket lists to create. The more lists there are, the less collisions you
   will have. Options are also supported.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>size</parameter></term>
     <listitem>
      <para>
       The amount of bucket lists to configure. The number you pass in will be
       automatically rounded up to the next power of two. It is also
       automatically limited from <literal>64</literal> to <literal>4194304</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       The options that you can pass in are: <constant>QuickHashIntHash::CHECK_FOR_DUPES</constant>,
       which makes sure no duplicate entries are added to the hash;
       <constant>QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC</constant> to not use PHP's internal memory
       manager as well as one of <constant>QuickHashIntHash::HASHER_NO_HASH</constant>,
       <constant>QuickHashIntHash::HASHER_JENKINS1</constant> or <constant>QuickHashIntHash::HASHER_JENKINS2</constant>.
       These last three configure which hashing algorithm to use. All options
       can be combined using bitmasks.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a new <classname>QuickHashIntHash</classname> object.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>QuickHashIntHash::__construct</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump( new QuickHashIntHash( 1024 ) );
var_dump( new QuickHashIntHash( 1024, QuickHashIntHash::CHECK_FOR_DUPES ) );
var_dump(
    new QuickHashIntHash(
        1024,
        QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC | QuickHashIntHash::HASHER_JENKINS2 
    )
);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
