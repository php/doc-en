<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.preg-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>Perform a regular expression search and replace</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   Searches <parameter>subject</parameter> for matches to
   <parameter>pattern</parameter> and replaces them with
   <parameter>replacement</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       The pattern to search for. It can be either a string or an array with
       strings.
      </para>
      <para>
       Several <link linkend="reference.pcre.pattern.modifiers">PCRE modifiers</link>
       are also available.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement</parameter></term>
     <listitem>
      <para>
       The string or an array with strings to replace. If this parameter is a
       string and the <parameter>pattern</parameter> parameter is an array,
       all patterns will be replaced by that string. If both
       <parameter>pattern</parameter> and <parameter>replacement</parameter>
       parameters are arrays, each <parameter>pattern</parameter> will be
       replaced by the <parameter>replacement</parameter> counterpart. If
       there are fewer elements in the <parameter>replacement</parameter>
       array than in the <parameter>pattern</parameter> array, any extra
       <parameter>pattern</parameter>s will be replaced by an empty string.
      </para>
      <para>
       <parameter>replacement</parameter> may contain references of the form
       <literal>\<replaceable>n</replaceable></literal> or
       <literal>$<replaceable>n</replaceable></literal>, with the latter form
       being the preferred one. Every such reference will be replaced by the text
       captured by the <replaceable>n</replaceable>'th parenthesized pattern.
       <replaceable>n</replaceable> can be from 0 to 99, and
       <literal>\0</literal> or <literal>$0</literal> refers to the text matched
       by the whole pattern. Opening parentheses are counted from left to right
       (starting from 1) to obtain the number of the capturing subpattern.
       Note that backslashes in &string; literals may require to be escaped.
      </para>
      <para>
       When working with a replacement pattern where a backreference is 
       immediately followed by another number (i.e.: placing a literal number
       immediately after a matched pattern), you cannot use the familiar 
       <literal>\1</literal> notation for your backreference.  
       <literal>\11</literal>, for example, would confuse
       <function>preg_replace</function> since it does not know whether you
       want the <literal>\1</literal> backreference followed by a literal 
       <literal>1</literal>, or the <literal>\11</literal> backreference
       followed by nothing.  In this case the solution is to use 
       <literal>${1}1</literal>.  This creates an isolated
       <literal>$1</literal> backreference, leaving the <literal>1</literal>
       as a literal.
      </para>
      <para>
       When using the deprecated <literal>e</literal> modifier, this function escapes
       some characters (namely <literal>'</literal>, <literal>"</literal>,
       <literal>\</literal> and NULL) in the strings that replace the
       backreferences. This is done to ensure that no syntax errors arise
       from backreference usage with either single or double quotes (e.g.
       <literal>'strlen(\'$1\')+strlen("$2")'</literal>). Make sure you are
       aware of PHP's <link linkend="language.types.string">string
       syntax</link> to know exactly how the interpreted string will look.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       The string or an array with strings to search and replace.
      </para>
      <para>
       If <parameter>subject</parameter> is an array, then the search and
       replace is performed on every entry of <parameter>subject</parameter>,
       and the return value is an array as well.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       The maximum possible replacements for each pattern in each
       <parameter>subject</parameter> string. Defaults to
       <literal>-1</literal> (no limit).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       If specified, this variable will be filled with the number of
       replacements done.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace</function> returns an array if the
   <parameter>subject</parameter> parameter is an array, or a string
   otherwise.
  </para>
  <para>
   If matches are found, the new <parameter>subject</parameter> will
   be returned, otherwise <parameter>subject</parameter> will be
   returned unchanged or &null; if an error occurred.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   As of PHP 5.5.0 <constant>E_DEPRECATED</constant> level error is emitted when
   passing in the "\e" modifier. As of PHP 7.0.0 using the "\e" modifier is an error;
   an <constant>E_WARNING</constant> is emitted in this case.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Using backreferences followed by numeric literals</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1}1,$3';
echo preg_replace($pattern, $replacement, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Using indexed arrays with <function>preg_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'The quick brown fox jumps over the lazy dog.';
$patterns = array();
$patterns[0] = '/quick/';
$patterns[1] = '/brown/';
$patterns[2] = '/fox/';
$replacements = array();
$replacements[2] = 'bear';
$replacements[1] = 'black';
$replacements[0] = 'slow';
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The bear black slow jumps over the lazy dog.
]]>
    </screen>
    <para>
     By ksorting patterns and replacements, we should get what we wanted.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
ksort($patterns);
ksort($replacements);
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The slow black bear jumps over the lazy dog.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Replacing several values</title>
    <programlisting role="php">
<![CDATA[
<?php
$patterns = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                   '/^\s*{(\w+)}\s*=/');
$replace = array ('\3/\4/\1\2', '$\1 =');
echo preg_replace($patterns, $replace, '{startDate} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Strip whitespace</title>
    <para>
     This example strips excess whitespace from a string.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);
// This will be 'foo o' now
echo $str;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Using the <parameter>count</parameter> parameter</title>
    <programlisting role="php">
<![CDATA[
<?php
$count = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1 , $count);
echo $count; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    When using arrays with <parameter>pattern</parameter> and
    <parameter>replacement</parameter>, the keys are processed in the order
    they appear in the array. This is <emphasis>not necessarily</emphasis> the
    same as the numerical index order. If you use indexes to identify which
    <parameter>pattern</parameter> should be replaced by which
    <parameter>replacement</parameter>, you should perform a
    <function>ksort</function> on each array prior to calling
    <function>preg_replace</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">PCRE Patterns</link></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_filter</function></member>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
    <member><function>preg_last_error</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
