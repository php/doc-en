<?xml version="1.0" encoding="utf-8"?>

<refentry xml:id="parle-rlexer.push" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Parle\RLexer::push</refname>
  <refpurpose>Add a lexer rule</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Parle\RLexer::push</methodname>
   <methodparam><type>string</type><parameter>regex</parameter></methodparam>
   <methodparam><type>int</type><parameter>id</parameter></methodparam>
   <!--<methodparam choice="opt"><type>int</type><parameter>userId</parameter></methodparam>-->
  </methodsynopsis>
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Parle\RLexer::push</methodname>
   <methodparam><type>string</type><parameter>state</parameter></methodparam>
   <methodparam><type>string</type><parameter>regex</parameter></methodparam>
   <methodparam><type>int</type><parameter>id</parameter></methodparam>
   <methodparam><type>string</type><parameter>newState</parameter></methodparam>
   <!--<methodparam choice="opt"><type>int</type><parameter>userId</parameter></methodparam>-->
  </methodsynopsis>
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Parle\RLexer::push</methodname>
   <methodparam><type>string</type><parameter>state</parameter></methodparam>
   <methodparam><type>string</type><parameter>regex</parameter></methodparam>
   <methodparam><type>string</type><parameter>newState</parameter></methodparam>
  </methodsynopsis>
  <para>
   Push a pattern for lexeme recognition.
  </para>
  <para>A 'start state' and 'exit state' can be specified by using a suitable signature. 
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>regex</parameter></term>
    <listitem>
     <para>
      Regular expression used for token matching.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>id</parameter></term>
    <listitem>
     <para>
      Token id. If the lexer instance is meant to be used standalone, this can be an arbitrary number. If the lexer instance is going to be passed to the parser, it has to be an id returned by <methodname>Parle\RParser::tokenid</methodname>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>state</parameter></term>
    <listitem>
     <para>
      State name. If '*' is used as start state, then the rule is applied to all lexer states.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newState</parameter></term>
     <listitem>
      <para>
       New state name, after the rule was applied.
      </para>
      <para>
       If '.' is specified as the exit state, then the lexer state is unchanged when that rule matches. An exit state with '&gt;' before the name means push. Use the signature without id for either continuation or to start matching, when a continuation or recursion is required.
      </para>
      <para>
       If '&lt;' is specified as exit state, it means pop. In that case, the signature containing the id can be used to identify the match. Note that even in the case an id is specified, the rule will finish first when all the previous pushes popped.
      </para>
     </listitem>
   </varlistentry>
   <!--<varlistentry>
    <term><parameter>userId</parameter></term>
    <listitem>
     <para>
      User supplied token id.
     </para>
    </listitem>
   </varlistentry>-->
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;   
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
