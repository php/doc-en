<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="luasandbox.setcpulimit" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandbox::setCPULimit</refname>
  <refpurpose>Set the CPU time limit for the Lua environment</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>LuaSandbox::setCPULimit</methodname>
   <methodparam><type class="union"><type>float</type><type>bool</type></type><parameter>limit</parameter></methodparam>
  </methodsynopsis>
  <para>
   Sets the CPU time limit for the Lua environment.
  </para>
  <para>
   If the total user and system time used by the environment after the call
   to this method exceeds this limit, a <classname>LuaSandboxTimeoutError</classname>
   exception is thrown.
  </para>
  <para>
   Time used in PHP callbacks is included in the limit.
  </para>
  <para>
   Setting the time limit from a callback while Lua is running causes the
   timer to be reset, or started if it was not already running.
  </para>
  <note>
   <para>
    On Windows, the CPU limit will be ignored. On operating systems that do
    not support <constant>CLOCK_THREAD_CPUTIME_ID</constant>, such as FreeBSD
    and Mac OS X, wall-clock time rather than CPU time will be limited.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>limit</parameter></term>
    <listitem>
     <para>
      Limit as a <type>float</type> in seconds, or <literal>false</literal> for no limit.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Calling a Lua function</title>
    <programlisting role="php">
<![CDATA[
<?php

// create a new LuaSandbox
$sandbox = new LuaSandbox();

// set a time limit
$sandbox->setCPULimit( 2 );

// Run Lua code
$sandbox->loadString( 'while true do end' )->call();

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
PHP Fatal error:  Uncaught LuaSandboxTimeoutError: The maximum execution time for this script was exceeded
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>LuaSandbox::getCPUUsage</methodname></member>
    <member><methodname>LuaSandbox::setMemoryLimit</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
