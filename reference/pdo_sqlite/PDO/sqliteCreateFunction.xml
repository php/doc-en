<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="pdo.sqlitecreatefunction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::sqliteCreateFunction</refname>
  <refpurpose>
   Registers a User Defined Function for use in SQL statements
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDO::sqliteCreateFunction</methodname>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  &warn.experimental.func;

  <para>
   This method allows you to register a PHP function with SQLite as an 
   <acronym>UDF</acronym> (User Defined Function), so that it can be called
   from within your SQL statements.
  </para>
  <para>
   The UDF can be used in any SQL statement that can call functions, such as
   SELECT and UPDATE statements and also in triggers.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       The name of the function used in SQL statements.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Callback function to handle the defined SQL function.
      </para>
      <note>
       <simpara>
        Callback functions should return a type understood by SQLite (i.e.
        <link linkend="language.types.intro">scalar type</link>).
       </simpara>
      </note>
      <para>
       This function need to be defined as:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>callback</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
        <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>value</parameter></term>
         <listitem>
          <para>
           The first argument passed to the SQL function.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>values</parameter></term>
         <listitem>
          <para>
           Further arguments passed to the SQL function.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </para> 
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       The number of arguments that the SQL function takes. If
       this parameter is <literal>-1</literal>, then the SQL function may take
       any number of arguments.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       A bitwise conjunction of flags. Currently, only
       <constant>PDO::SQLITE_DETERMINISTIC</constant> is supported, which specifies
       that the function always returns the same result given the same inputs
       within a single SQL statement.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.1.4</entry>
      <entry>
       The <parameter>flags</parameter> parameter has been added.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>PDO::sqliteCreateFunction</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_and_reverse($string) 
{
    return strrev(md5($string));
}

$db = new PDO('sqlite:sqlitedb');
$db->sqliteCreateFunction('md5rev', 'md5_and_reverse', 1);
$rows = $db->query('SELECT md5rev(filename) FROM files')->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In this example, we have a function that calculates the md5 sum of a
   string, and then reverses it.  When the SQL statement executes, it
   returns the value of the filename transformed by our function.  The data
   returned in <literal>$rows</literal> contains the processed result.
  </para>
  <para>
   The beauty of this technique is that you do not need to process the
   result using a &foreach; loop after you have queried for the data.
  </para>
  <!-- not for PDO it doesn't, at least not yet 
  <para>
   PHP registers a special function named <literal>php</literal> when the
   database is first opened.  The php function can be used to call any PHP
   function without having to register it first.
  </para>
  <para>
   <example>
    <title>Example of using the PHP function</title>
    <programlisting role="php">
<![CDATA[
<?php
$rows = $db->query("SELECT php('md5', filename) from files")->fetchAll();
?>
]]>
    </programlisting>
    <para>
     This example will call the <function>md5</function> on each
     <literal>filename</literal> column in the database and return the result
     into <parameter>$rows</parameter>
    </para>
   </example>
  </para>

  -->
  <tip>
   <para>
    You can use <xref linkend="pdo.sqlitecreatefunction" /> and
    <xref linkend="pdo.sqlitecreateaggregate" /> to override SQLite
    native SQL functions.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="pdo.sqlitecreateaggregate" /></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
