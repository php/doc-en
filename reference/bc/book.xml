<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 
<book xml:id="book.bc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="bundled" ?>
 <title>BCMath Arbitrary Precision Mathematics</title>
 <titleabbrev>BC Math</titleabbrev>
 
 <!-- {{{ preface -->
 <preface xml:id="intro.bc">
  &reftitle.intro;
  <para>
    For arbitrary precision mathematics PHP offers the Binary Calculator which
   supports numbers of any size and precision up to <literal>2147483647</literal> (or <literal>0x7FFFFFFF</literal>) decimals,
   if there is sufficient memory, represented as strings.
  </para>
  <caution>
   <para>
    Passing values of type <type>float</type> to a BCMath function which expects
    a <type>string</type> as operand may not have the desired effect due to the
    way PHP converts <type>float</type> values to <type>string</type>, namely
    that the <type>string</type> may be in exponential notation (which is not
    supported by BCMath), and that the decimal separator is locale dependent
    (while BCMath always expects a decimal point).
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$num1 = 0; // (string) 0 => '0'
$num2 = -0.000005; // (string) -0.000005 => '-5.05E-6'
echo bcadd($num1, $num2, 6); // => '0.000000'

setlocale(LC_NUMERIC, 'de_DE'); // uses a decimal comma
$num2 = 1.2; // (string) 1.2 => '1,2'
echo bcsub($num1, $num2, 1); // => '0.0'
?>
]]>
    </programlisting>
   </informalexample>
  </caution>
 </preface>
 <!-- }}} -->
 
 &reference.bc.setup;
 &reference.bc.constants;
 &reference.bc.reference;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

