<?xml version="1.0" encoding="utf-8"?>
<refentry xml:id="function.dio-fcntl" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>dio_fcntl</refname>
  <refpurpose>Performs a c library fcntl on fd</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>dio_fcntl</methodname>
   <methodparam><type>resource</type><parameter>fd</parameter></methodparam>
   <methodparam><type>int</type><parameter>cmd</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   The <function>dio_fcntl</function> function performs the
   operation specified by <parameter>cmd</parameter> on the file
   descriptor <parameter>fd</parameter>. Some commands require
   additional arguments <parameter>args</parameter> to be supplied.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>fd</parameter></term>
     <listitem>
      <para>
       The file descriptor returned by <function>dio_open</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cmd</parameter></term>
     <listitem>
      <para>
       Can be one of the following operations:
       <itemizedlist>
        <listitem>
         <para>
          <constant>F_SETLK</constant> - Lock is set or cleared. If the lock
          is held by someone else <function>dio_fcntl</function> returns
          -1.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>F_SETLKW</constant> - like <constant>F_SETLK</constant>,
          but in case the lock is held by someone else, 
          <function>dio_fcntl</function> waits until the lock is released.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>F_GETLK</constant> - <function>dio_fcntl</function> 
          returns an associative array (as described below) if someone else
          prevents lock. If there is no obstruction key "type" will set
          to <constant>F_UNLCK</constant>.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>F_DUPFD</constant> - finds the lowest numbered available
          file descriptor greater than or equal to <parameter>args</parameter>
          and returns them.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>F_SETFL</constant> - Sets the file descriptors flags to 
          the value specified by <parameter>args</parameter>, which can be
          <constant>O_APPEND</constant>, <constant>O_NONBLOCK</constant> or 
          <constant>O_ASYNC</constant>. To use <constant>O_ASYNC</constant> 
          you will need to use the <link linkend="ref.pcntl">PCNTL</link> 
          extension.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       <parameter>args</parameter> is an associative array, when
       <parameter>cmd</parameter> is <constant>F_SETLK</constant> or
       <constant>F_SETLLW</constant>, with the following keys:
       <itemizedlist>
        <listitem>
         <para>
          <literal>start</literal> - offset where lock begins
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>length</literal> - size of locked area. zero means to end
          of file
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>whence</literal> - Where l_start is relative to: can be 
          <constant>SEEK_SET</constant>,
          <constant>SEEK_END</constant> and <constant>SEEK_CUR</constant>
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>type</literal> - type of lock: can be
          <constant>F_RDLCK</constant> (read lock),
          <constant>F_WRLCK</constant> (write lock) or
          <constant>F_UNLCK</constant> (unlock)
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the result of the C call.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Setting and clearing a lock</title>
    <programlisting role="php">
<![CDATA[
<?php

$fd = dio_open('/dev/ttyS0', O_RDWR);

if (dio_fcntl($fd, F_SETLK, Array("type"=>F_WRLCK)) == -1) {
   // the file descriptor appears locked
   echo "The lock can not be cleared. It is held by someone else.";
} else {
   echo "Lock successfully set/cleared";
}

dio_close($fd);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.no-windows;
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
