<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="mysql-xdevapi-collection.createindex" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Collection::createIndex</refname>
  <refpurpose>Create collection index</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>mysql_xdevapi\Collection::createIndex</methodname>
   <methodparam><type>string</type><parameter>index_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>index_desc_json</parameter></methodparam>
  </methodsynopsis>
  <para>
    Creates an index on the collection.
  </para>
  <para>
    An exception is thrown if an index with the same name already exists,
    or if index definition is not correctly formed.
   </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>index_name</parameter></term>
    <listitem>
     <para>
      The name of the index that to create. This name must be a valid index name as
      accepted by the <literal>CREATE INDEX</literal> SQL query.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>index_desc_json</parameter></term>
    <listitem>
     <para>
      Definition of the index to create. It contains an array of IndexField objects,
      and each object describes a single document member to include in the index,
      and an optional string for the type of index that might be INDEX (default) or SPATIAL.
     </para>
     <para>
      A single IndexField description consists of the following fields:
     </para>
     <itemizedlist>
      <listitem>
        <para>
          <code>field</code>: string, the full document path to the document member or field to be indexed.
        </para>
      </listitem>
      <listitem>
       <para>
        <code>type</code>: string, one of the supported SQL column types to map the field into.
        For numeric types, the optional UNSIGNED keyword may follow.
        For the TEXT type, the length to consider for indexing may be added.
       </para>
      </listitem>
      <listitem>
        <para>
          <code>required</code>: bool, (optional) true if the field is required to exist in the document.
          Defaults to &false;, except for <literal>GEOJSON</literal> where it defaults to &true;.
         </para>
       </listitem>
      <listitem>
        <para>
          <code>options</code>: integer, (optional) special option flags for use
          when decoding <literal>GEOJSON</literal> data.
        </para>
      </listitem>
      <listitem>
        <para>
          <code>srid</code>: integer, (optional) srid value for use when
          decoding <literal>GEOJSON</literal> data.
        </para>
      </listitem>
      </itemizedlist>

      <para>
        It is an error to include other fields not described above in
        IndexDefinition or IndexField documents.
      </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para></para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>mysql_xdevapi\Collection::createIndex</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$session = mysql_xdevapi\getSession("mysqlx://user:password@localhost");
$session->sql("DROP DATABASE IF EXISTS addressbook")->execute();
$session->sql("CREATE DATABASE addressbook")->execute();

$schema     = $session->getSchema("addressbook");
$collection = $schema->createCollection("people");

// Creating a text index
$collection->createIndex(
  'myindex1',
  '{"fields": [{
    "field": "$.name",
    "type": "TEXT(25)",
    "required": true}],
    "unique": false}'
);

// A spatial index
$collection->createIndex(
  'myindex2',
  '{"fields": [{
    "field": "$.home",
    "type": "GEOJSON",
    "required": true}],
    "type": "SPATIAL"}'
);

// Index with multiple fields
$collection->createIndex(
  'myindex3',
  '{"fields": [
    {
      "field": "$.name",
      "type": "TEXT(20)",
      "required": true
    },
    {
      "field": "$.age",
      "type": "INTEGER"
    },
    {
      "field": "$.job",
      "type": "TEXT(30)",
      "required": false
    }
  ],
  "unique": true
  }'
);
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
