<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="mongodb-driver-bulkwritecommand.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\Driver\BulkWriteCommand::__construct</refname>
  <refpurpose>Create a new BulkWriteCommand</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>MongoDB\Driver\BulkWriteCommand::__construct</methodname>
   <methodparam choice="opt"><type class="union"><type>array</type><type>null</type></type><parameter>options</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Constructs a new <classname>MongoDB\Driver\BulkWriteCommand</classname>,
   which may be used to perform many insert, update, and delete operations on
   multiple collections in a single request using the
   <link xlink:href="&url.mongodb.docs.command;bulkWrite">bulkWrite</link>
   command introduced in MongoDB 8.0. This differs from
   <classname>MongoDB\Driver\BulkWrite</classname>, which is supported by all
   server versions but limited to a single collection.
  </para>
  <para>
   After all write operations have been added, this object may be executed with
   <methodname>MongoDB\Driver\Manager::executeBulkWriteCommand</methodname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>options</parameter> (<type>array</type>)</term>
    <listitem>
     <para>
      <table>
       <title>options</title>
       <tgroup cols="4">
        <thead>
         <row>
          <entry>Option</entry>
          <entry>Type</entry>
          <entry>Description</entry>
          <entry>Default</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>bypassDocumentValidation</entry>
          <entry><type>bool</type></entry>
          <entry>
           <para>
            If &true;, allows insert and update operations to circumvent
            document level validation.
           </para>
          </entry>
          <entry>&false;</entry>
         </row>
         <row>
          <entry>comment</entry>
          <entry><type>mixed</type></entry>
          <entry>
           <para>
            An arbitrary comment to help trace the operation through the
            database profiler, currentOp output, and logs.
           </para>
          </entry>
         </row>
         &mongodb.option.let;
         <row>
          <entry>ordered</entry>
          <entry><type>bool</type></entry>
          <entry>
           <para>
            Whether the operations in this bulk write should be executed in
            the order in which they were specified. If &false;, writes will
            continue to be executed if an individual write fails. If &true;,
            writes will stop executing if an individual write fails.
           </para>
          </entry>
          <entry>&true;</entry>
         </row>
         <row>
          <entry>verboseResults</entry>
          <entry><type>bool</type></entry>
          <entry>
           <para>
            Whether detailed results for each successful operation should be
            included in the returned
            <classname>MongoDB\Driver\BulkWriteCommandResult</classname>.
           </para>
          </entry>
          <entry>&false;</entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   &mongodb.throws.argumentparsing;
  </simplelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoDB\Driver\BulkWriteCommand::__construct</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$bulk = new MongoDB\Driver\BulkWriteCommand;

// Delete documents from both collections
$bulk->deleteMany('db.coll_one', []);
$bulk->deleteMany('db.coll_two', []);

// Insert documents into two collections
$bulk->insertOne('db.coll_one', ['_id' => 1]);
$bulk->insertOne('db.coll_two', ['_id' => 2]);
$bulk->insertOne('db.coll_two', ['_id' => 3]);

// Update a document in "coll_one"
$bulk->updateOne('db.coll_one', ['_id' => 1], ['$set' => ['x' => 1]]);

$result = $manager->executeBulkWriteCommand($bulk);

printf("Inserted %d document(s)\n", $result->getInsertedCount());
printf("Updated  %d document(s)\n", $result->getModifiedCount());

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Inserted 3 document(s)
Updated  1 document(s)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>MongoDB\Driver\Manager::executeBulkWriteCommand</methodname></member>
   <member><classname>MongoDB\Driver\BulkWriteCommandResult</classname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
