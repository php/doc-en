<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ --> 

<phpdoc:classref xml:id="class.mongodb-driver-cursor" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The MongoDB\Driver\Cursor class</title>
 <titleabbrev>MongoDB\Driver\Cursor</titleabbrev>

 <partintro>

<!-- {{{ MongoDB\Driver\Cursor intro -->
  <section xml:id="mongodb-driver-cursor.intro">
   &reftitle.intro;
   <para>
    The <classname>MongoDB\Driver\Cursor</classname> class encapsulates
    the results of a MongoDB command or query and may be returned by
    <methodname>MongoDB\Driver\Manager::executeCommand</methodname> or
    <methodname>MongoDB\Driver\Manager::executeQuery</methodname>, respectively.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongodb-driver-cursor.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoDB\Driver\Cursor</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <modifier>final</modifier>
     <ooclass>
      <classname>MongoDB\Driver\Cursor</classname>
     </ooclass>

     <oointerface>
      <interfacename>MongoDB\Driver\CursorInterface</interfacename>
     </oointerface>

     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongodb-driver-cursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section role="changelog">
   &reftitle.changelog;
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>PECL mongodb 1.9.0</entry>
        <entry>
         Implements <interfacename>Iterator</interfacename>.
        </entry>
       </row>
       <row>
        <entry>PECL mongodb 1.6.0</entry>
        <entry>
         Implements <interfacename>MongoDB\Driver\CursorInterface</interfacename>,
         which extends <interfacename>Traversable</interfacename>.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </section>

  <section xml:id="mongodb-driver-cursor.examples">
   &reftitle.examples;

   <example xml:id="mongodb-driver-cursor.examples.foreach">
    <title>Reading a result set</title>
    <para>
     <methodname>MongoDB\Driver\Manager::executeCommand</methodname> and
     <methodname>MongoDB\Driver\Manager::executeQuery</methodname> both return
     their result(s) as a <classname>MongoDB\Driver\Cursor</classname> object.
     This object can be used to iterate over the result set of the command or
     query.
    </para>
    <para>
     Because <classname>MongoDB\Driver\Cursor</classname> implements the
     <interfacename>Traversable</interfacename> interface, you can simply
     iterate over the result set with
     <link linkend="control-structures.foreach"><literal>foreach</literal></link>.
    </para>
   <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager();

/* Insert some documents so that our query returns information */
$bulkWrite = new MongoDB\Driver\BulkWrite;
$bulkWrite->insert(['name' => 'Ceres', 'size' => 946, 'distance' => 2.766]);
$bulkWrite->insert(['name' => 'Vesta', 'size' => 525, 'distance' => 2.362]);
$manager->executeBulkWrite("test.asteroids", $bulkWrite);

/* Query for all the items in the collection */
$query = new MongoDB\Driver\Query( [] );

/* Query the "asteroids" collection of the "test" database */
$cursor = $manager->executeQuery("test.asteroids", $query);

/* $cursor now contains an object that wraps around the result set. Use
 * foreach() to iterate over all the result */
foreach($cursor as $document) {
    print_r($document);
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
stdClass Object
(
    [_id] => MongoDB\BSON\ObjectId Object
        (
            [oid] => 5a4cff2f122d3321565d8cc2
        )

    [name] => Ceres
    [size] => 946
    [distance] => 2.766
)
stdClass Object
(
    [_id] => MongoDB\BSON\ObjectId Object
        (
            [oid] => 5a4cff2f122d3321565d8cc3
        )

    [name] => Vesta
    [size] => 525
    [distance] => 2.362
}
]]>
    </screen>
   </example>

   <example xml:id="mongodb-driver-cursor.examples.tailable">
    <title>Reading a result set for a tailable cursor</title>
    <para>
     <link xlink:href="&url.mongodb.docs;core/tailable-cursors">Tailable cursors</link>
     are a special type of MongoDB cursor that allows the client to read some
     results and then wait until more documents become available. These cursors
     are primarily used with
     <link xlink:href="&url.mongodb.docs;core/capped-collections">Capped Collections</link>
     and <link xlink:href="&url.mongodb.docs;changeStreams">Change Streams</link>.
    </para>
    <para>
     While normal cursors can be iterated once with <literal>foreach</literal>,
     that approach will not work with tailable cursors. When
     <literal>foreach</literal> is used with a tailable cursor, the loop will
     stop upon reaching the end of the initial result set. Attempting to
     continue iteration on the cursor with a second
     <literal>foreach</literal> would throw an exception, since PHP attempts to
     rewind the cursor. Similar to result objects in other database drivers,
     cursors in MongoDB only support forward iteration, which means they cannot
     be rewound.
    </para>
    <para>
     In order to continuously read from a tailable cursor, the Cursor object
     must be wrapped with an <classname>IteratorIterator</classname>. This
     allows the application to directly control the cursor's iteration, avoid
     inadvertently rewinding the cursor, and decide when to wait for new results
     or stop iteration entirely.
    </para>
    <para>
     In order to demonstrate a tailable cursor in action, two scripts will be
     used: a "producer" and a "consumer". The producer script will create a new
     capped collection using the
     <link xlink:href="&url.mongodb.docs.command;create">create</link> command
     and proceed to insert a new document into that collection each second.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$manager->executeCommand('test', new MongoDB\Driver\Command([
    'create' => 'asteroids',
    'capped' => true,
    'size' => 1048576,
]));

while (true) {
    $bulkWrite = new MongoDB\Driver\BulkWrite;
    $bulkWrite->insert(['createdAt' => new MongoDB\BSON\UTCDateTime]);
    $manager->executeBulkWrite('test.asteroids', $bulkWrite);

    sleep(1);
}

?>
]]>
    </programlisting>
    <para>
     With the producer script still running, a second consumer script may be
     executed to read the inserted documents using a tailable cursor, indicated
     by the <literal>tailable</literal> and <literal>awaitData</literal> options
     to <function>MongoDB\Driver\Query::__construct</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$query = new MongoDB\Driver\Query([], [
    'tailable' => true,
    'awaitData' => true,
]);

$cursor = $manager->executeQuery('test.asteroids', $query);

$iterator = new IteratorIterator($cursor);

$iterator->rewind();

while (true) {
    if ($iterator->valid()) {
        $document = $iterator->current();
        printf("Consumed document created at: %s\n", $document->createdAt);
    }

    $iterator->next();
}

?>
]]>
    </programlisting>
    <para>
     The consumer script will start by quickly printing all available documents
     in the capped collection (as if <literal>foreach</literal> had been used);
     however, it will not terminate upon reaching the end of the initial result
     set. Since the cursor is tailable, calling
     <function>IteratorIterator::next</function> will block and wait for
     additional results. <function>IteratorIterator::valid</function> is also
     used to check if there is actually data available to read at each step.
    </para>
    <note>
     <simpara>
      This example uses the <literal>awaitData</literal> query option to
      instruct the server to block for a short period (e.g. one second) at the
      end of the result set before returning a response to the driver. This is
      used to prevent the driver from aggressively polling the server when there
      are no results available. The <literal>maxAwaitTimeMS</literal> option may
      be used in conjunction with <literal>tailable</literal> and
      <literal>awaitData</literal> to specify the amount of time that the server
      should block when it reaches the end of the result set.
     </simpara>
    </note>
   </example>
  </section>

  <section role="errors">
   &reftitle.errors;
   <simpara>
    When iterating over the cursor object, BSON data is converted into PHP
    variables. This iteration can cause the following Exceptions:
   </simpara>
   <simplelist>
    <member>
     Throws
     <classname>MongoDB\Driver\Exception\InvalidArgumentException</classname> if
     a class in the type map cannot be instantiated or does not implement
     <interfacename>MongoDB\BSON\Unserializable</interfacename>.
    </member>
    &mongodb.throws.bson.unexpected;
   </simplelist>
  </section>

 </partintro>

 &reference.mongodb.mongodb.driver.entities.cursor;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
