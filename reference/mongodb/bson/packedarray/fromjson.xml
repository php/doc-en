<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="mongodb-bson-packedarray.fromjson" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\PackedArray::fromJSON</refname>
  <refpurpose>Construct a new BSON array instance from a JSON string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier> <modifier>static</modifier> <modifier>public</modifier> <type>MongoDB\BSON\PackedArray</type><methodname>MongoDB\BSON\PackedArray::fromJSON</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
  </methodsynopsis>
  <para>
   Converts an
   <link xlink:href="&url.mongodb.docs.extendedjson;">extended JSON</link>
   string to its BSON representation.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>json</parameter> (<type>string</type>)</term>
    <listitem>
     <para>
      JSON value to be converted.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a new <classname>MongoDB\BSON\PackedArray</classname> instance.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   &mongodb.throws.argumentparsing;
   <member>
    Throws
    <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname> if
    the JSON value cannot be converted to a BSON array (e.g. due to a syntax
    error).
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><methodname>MongoDB\BSON\PackedArray::fromJSON</methodname> example</title>
   <programlisting role="php">
    <![CDATA[
<?php

$json = '[ "foo", { "$numberInt" : "123" }, { "$numberLong" : "4294967295" }, { "$oid" : "56315a7c6118fd1b920270b1" } ]';
$packedArray = MongoDB\BSON\PackedArray::fromJSON($json);
var_dump($packedArray);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
object(MongoDB\BSON\PackedArray)#1 (2) {
  ["data"]=>
  string(68) "MQAAAAIwAAQAAABmb28AEDEAewAAABIyAP////8AAAAABzMAVjFafGEY/RuSAnCxAA=="
  ["value"]=>
  array(4) {
    [0]=>
    string(3) "foo"
    [1]=>
    int(123)
    [2]=>
    int(4294967295)
    [3]=>
    object(MongoDB\BSON\ObjectId)#2 (1) {
      ["oid"]=>
      string(24) "56315a7c6118fd1b920270b1"
    }
  }
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>MongoDB\BSON\PackedArray::fromPHP</methodname></member>
   <member><link xlink:href="&url.mongodb.docs.extendedjson;">MongoDB Extended JSON</link></member>
   <member><link xlink:href="&url.mongodb.docs.bson;">BSON Types</link></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
