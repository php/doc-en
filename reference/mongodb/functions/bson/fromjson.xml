<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.mongodb.bson-fromjson" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\fromJSON</refname>
  <refpurpose>Returns the BSON representation of a JSON value</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <warning>
   <para>
    This function has been <emphasis>DEPRECATED</emphasis> as of extension
    version 1.20.0 and will be removed in 2.0. Applications should use
    <methodname>MongoDB\BSON\Document::fromJSON</methodname> instead.
   </para>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>MongoDB\BSON\fromJSON</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
  </methodsynopsis>
  <para>
   Converts an
   <link xlink:href="&url.mongodb.docs.extendedjson;">extended JSON</link>
   string to its BSON representation.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>json</parameter> (<type>string</type>)</term>
    <listitem>
     <para>
      JSON value to be converted.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   The serialized BSON document as a binary string.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   <member>
    Throws
    <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname> if
    the JSON value cannot be converted to BSON (e.g. due to a syntax error).
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoDB\BSON\fromJSON</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php

$json = '{ "_id": { "$oid": "563143b280d2387c91807965" } }';
$bson = MongoDB\BSON\fromJSON($json);
$value = MongoDB\BSON\toPHP($bson);
var_dump($value);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#2 (1) {
  ["_id"]=>
  object(MongoDB\BSON\ObjectId)#1 (1) {
    ["oid"]=>
    string(24) "563143b280d2387c91807965"
  }
}
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>MongoDB\BSON\Document::fromJSON</methodname></member>
   <member><function>MongoDB\BSON\toJSON</function></member>
   <member><link xlink:href="&url.mongodb.docs.extendedjson;">MongoDB Extended JSON</link></member>
   <member><link xlink:href="&url.mongodb.docs.bson;">MongoDB BSON</link></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
