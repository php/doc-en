<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.flock">
 <refnamediv>
  <refname>flock</refname>
  <refpurpose>Portable advisory file locking</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>flock</methodname>
   <methodparam><type>resource</type><parameter>handle</parameter></methodparam>
   <methodparam><type>int</type><parameter>operation</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">wouldblock</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>flock</function> allows you to perform a simple reader/writer
   model which can be used on virtually every platform (including most Unix
   derivatives and even Windows).
  </para>
  <para>
   On versions of PHP before 5.3.2, the lock is released also by
   <function>fclose</function> (which is also called automatically when script
   finished).
  </para>
  <para>
   PHP supports a portable way of locking complete files in an advisory way
   (which means all accessing programs have to use the same way of locking
   or it will not work). By default, this function will block until the
   requested lock is acquired; this may be controlled with the <constant>LOCK_NB</constant> option documented below.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>handle</parameter></term>
     <listitem>
      &fs.file.pointer;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operation</parameter></term>
     <listitem>
      <para>
       <parameter>operation</parameter> is one of the following:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>LOCK_SH</constant> to acquire a shared lock (reader).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_EX</constant> to acquire an exclusive lock (writer).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_UN</constant> to release a lock (shared or exclusive).
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       It is also possible to add <constant>LOCK_NB</constant> as a bitmask to one 
       of the above operations, if <function>flock</function> should not
       block during the locking attempt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>wouldblock</parameter></term>
     <listitem>
      <para>
       The optional third argument is set to 1 if the lock would block
       (EWOULDBLOCK errno condition).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.5.22, 5.6.6</entry>
       <entry>
        Added support for the <parameter>wouldblock</parameter> parameter on
        Windows.
       </entry>
      </row>      
      <row>
       <entry>5.3.2</entry>
       <entry>
        The automatic unlocking when the file's resource handle is closed was
        removed. Unlocking now always has to be done manually.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>flock</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php

$fp = fopen("/tmp/lock.txt", "r+");

if (flock($fp, LOCK_EX)) {  // acquire an exclusive lock
    ftruncate($fp, 0);      // truncate file
    fwrite($fp, "Write something here\n");
    fflush($fp);            // flush output before releasing the lock
    flock($fp, LOCK_UN);    // release the lock
} else {
    echo "Couldn't get the lock!";
}

fclose($fp);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>flock</function> using the <constant>LOCK_NB</constant> option</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('/tmp/lock.txt', 'r+');

/* Activate the LOCK_NB option on an LOCK_EX operation */
if(!flock($fp, LOCK_EX | LOCK_NB)) {
    echo 'Unable to obtain lock';
    exit(-1);
}

/* ... */

fclose($fp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>flock</function> uses mandatory locking instead of advisory
    locking on Windows. Mandatory locking is also supported on Linux and
    System V based operating systems via the usual mechanism supported by the
    fcntl() system call: that is, if the file in question has the setgid
    permission bit set and the group execution bit cleared. On Linux, the file
    system will also need to be mounted with the mand option for this to work.
   </para>
  </note>
  <note>
   <para>
    Because <function>flock</function> requires a file pointer, you may have
    to use a special lock file to protect access to a file that you intend
    to truncate by opening it in write mode (with a "w" or "w+" argument to
    <function>fopen</function>).
   </para>
  </note>
  <note>
   <para>
    May only be used on file pointers returned by <function>fopen</function>
    for local files, or file pointers pointing to userspace streams that
    implement the <function>streamWrapper::stream_lock</function> method.
   </para>
  </note>
  <warning>
   <para>
    Assigning another value to <parameter>handle</parameter> argument in
    subsequent code will release the lock.
   </para>
  </warning>
  <warning>
   <para>
    On some operating systems <function>flock</function> is implemented at
    the process level. When using a multithreaded server API like ISAPI you
    may not be able to rely on <function>flock</function> to protect files
    against other PHP scripts running in parallel threads of the same server
    instance!
   </para>
   <para>
    <function>flock</function> is not supported on antiquated filesystems like
    <literal>FAT</literal> and its derivates and will therefore always
    return &false; under these environments.
   </para>
  </warning>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
