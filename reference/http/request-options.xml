<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.3.2.1 $ -->
<appendix xml:id="http.request.options" xmlns="http://docbook.org/ns/docbook">
 <title>Request Options</title>
 <titleabbrev>Options usable with the HttpRequest class and request functions</titleabbrev>
  <variablelist xml:id="http.request.options.timeouts">
   <title>Options related to time outs</title>
   <varlistentry xml:id="http.request.option.timeout">
    <term>
     timeout (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      seconds the whole request may take to complete
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="http.request.option.connecttimeout">
    <term>
     connecttimeout (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      seconds the connect, including name resolving, may take
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="http.request.option.dns_cache_timeout">
    <term>
     dns_cache_timeout (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      seconds after an dns cache entry times out
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.urls">
   <title>Options related to urls</title>
   <varlistentry xml:id="http.request.option.url">
    <term>
     url (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      the request url
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="http.request.option.port">
    <term>
     port (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use another port as specified in the url
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="http.request.option.redirect">
    <term>
     redirect (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      whether and how many redirects to follow; defaults to 0
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="http.request.option.unrestrictedauth">
    <term>
     unrestrictedauth (<type>bool</type>)
    </term>
    <listitem>
     <simpara>
      whether to continue sending credentials on redirects to a different host
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     referer (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      the refererring url to send
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.cookies">
   <title>Options related to cookies</title>
   <varlistentry>
    <term>
     encodecookies (<type>bool</type>)
    </term>
    <listitem>
     <simpara>
      whether custom cookies should be <function>urlencode</function>d prior sending
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     cookies (<type>array</type>)
    </term>
    <listitem>
     <simpara>
      list of cookies as associative array like <literal>array(&quot;cookie&quot; => &quot;value&quot;)</literal>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     cookiestore (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      path to a file where cookies are/will be stored
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     cookiesession (<type>bool</type>)
    </term>
    <listitem>
     <simpara>
      don't load session cookies from cookiestore if &true;
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.headers">
   <title>Options related to headers</title>
   <varlistentry>
    <term>
     useragent (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      the user agent to send; defaults to <literal>PECL::HTTP/x.y.z (PHP/x.y.z)</literal>; omitted if explicitly set to an empty string
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     lastmodified (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      timestamp for If-(Un)Modified-Since header
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     etag (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      quoted etag for If-(None-)Match header
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     headers (<type>array</type>)
    </term>
    <listitem>
     <simpara>
      list of custom headers as associative array like <literal>array(&quot;header&quot; => &quot;value&quot;)</literal>
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.auth">
   <title>Options related to authentication</title>
   <varlistentry>
    <term>
     httpauth (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      http credentials in &quot;user:pass&quot; format
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     httpauthtype (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      <link linkend="http.constants.request.httpauth">HTTP authentication type constant</link>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     (<type>array</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.proxy">
   <title>Options related to proxies</title>
   <varlistentry>
    <term>
     proxyhost (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      proxy host in &quot;host[:port]&quot; format
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     proxyport (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      use another proxy port as specified in proxyhost
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     proxytype (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      <link linkend="http.constants.request.proxy">HTTP proxy type constant</link>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     proxyauth (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      proxy credentials in &quot;user:pass&quot; format
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     proxyauthtype (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      <link linkend="http.constants.request.httpauth">HTTP authentication type constant</link>
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.transfer">
   <title>Options related to the transfer</title>
   <varlistentry>
    <term>
     compress (<type>bool</type>)
    </term>
    <listitem>
     <simpara>
      whether to request and accept a gzip/deflate content encoded response
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     resume (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      start the download at the specified byte offset if server support is given (indicated by a 206 response code)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     range (<type>array</type>)
    </term>
    <listitem>
     <simpara>
      array of arrays, each containing two <type>integer</type>s, specifying the ranges to download if server support is given (indicated by a 206 response code);
      only recognized if the resume option is empty
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.limits">
   <title>Options imposing limits</title>
   <varlistentry>
    <term>
     maxfilesize (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      maximum file size that should be downloaded;
      has no effect, if the size of the requested entity is unknown
      (eg. dynamic pages with chunked transfer encoding etc.)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     low_speed_limit (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      the lowest transfer speed a successful request may have
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     low_speed_time (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      the time in which <literal>low_speed_limit</literal> must be transferred for a successful request
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     max_send_speed (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      maximum send speed in bytes per second
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     max_recv_speed (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      maximum receive speed in bytes per second
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.callback">
   <title>Callback options</title>
   <varlistentry>
    <term>onprogress (<type>callback</type>)</term>
    <listitem><simpara>progress callback</simpara></listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.network">
   <title>Network options</title>
   <varlistentry>
    <term>interface (<type>string</type>)</term>
    <listitem><simpara>outgoing network interface (ifname, ip or hostname)</simpara></listitem>
   </varlistentry>
   <varlistentry>
    <term>portrange (<type>array</type>)</term>
    <listitem><simpara>2 integers specifying outgoing portrange to try</simpara></listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.request.options.ssl">
   <title>SSL options</title>
   <varlistentry>
    <term>
     ssl (<type>array</type>)
    </term>
    <listitem>
     <note>
      <simpara>SSL options are set through an array with the single &quot;ssl&quot; request option name.</simpara>
     </note>
     <variablelist>
      <varlistentry>
       <term>cert (<type>string</type>)</term>
       <listitem><simpara>path to certificate</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>certtype (<type>string</type>)</term>
       <listitem><simpara>type of certificate</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>certpasswd (<type>string</type>)</term>
       <listitem><simpara>password for certificate</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>key (<type>string</type>)</term>
       <listitem><simpara>path to key</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>keytype (<type>string</type>)</term>
       <listitem><simpara>type of key</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>keypasswd (<type>string</type>)</term>
       <listitem><simpara>pasword for key</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>engine (<type>string</type>)</term>
       <listitem><simpara>ssl engine to use</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>version (<type>int</type>)</term>
       <listitem><simpara>ssl version to use</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>verifypeer (<type>bool</type>)</term>
       <listitem><simpara>whether to verify the peer</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>verifyhost (<type>bool</type>)</term>
       <listitem><simpara>whether to verify the host</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>cipher_list (<type>string</type>)</term>
       <listitem><simpara>list of allowed ciphers</simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>cainfo (<type>string</type>)</term>
       <listitem><simpara></simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>capath (<type>string</type>)</term>
       <listitem><simpara></simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>random_file (<type>string</type>)</term>
       <listitem><simpara></simpara></listitem>
      </varlistentry>
      <varlistentry>
       <term>egdsocket (<type>string</type>)</term>
       <listitem><simpara></simpara></listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
  </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
