<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.7.2.1 $ -->
<appendix xml:id="http.constants" xmlns="http://docbook.org/ns/docbook">
  &reftitle.constants;
  &extension.constants;
  <variablelist xml:id="http.constants.support">
   <title>Constants usable with <function>http_support</function></title>
   <varlistentry>
    <term>
     <constant>HTTP_SUPPORT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      querying for this constant will always return &true;
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_SUPPORT_REQUESTS</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      whether support to issue HTTP requests is given, ie. libcurl support was compiled in
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_SUPPORT_MAGICMIME</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      whether support to guess the Content-Type of HTTP messages is given, ie. libmagic support was compiled in
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_SUPPORT_ENCODINGS</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      whether support for zlib encodings is given, ie. libz support was compiled in
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_SUPPORT_SSLREQUESTS</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      whether support to issue HTTP requests over SSL is givem, ie. linked libcurl was built with SSL support
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.params">
   <title>Constants usable with <function>http_parse_params</function></title>
   <varlistentry>
    <term>
     <constant>HTTP_PARAMS_ALLOW_COMMA</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      allow commans additionally to semicolons as separator
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_PARAMS_ALLOW_FAILURE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      continue parsing after an error occurred
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_PARAMS_RAISE_ERROR</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      raise PHP warnings on parse errors
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_PARAMS_DEFAULT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      all three values above, bitwise or'ed
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.cookie">
   <title>Constants usable with <function>http_parse_cookie</function> and its return value</title>
   <varlistentry>
    <term>
     <constant>HTTP_COOKIE_PARSE_RAW</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      don't urldecode values
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_COOKIE_SECURE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      whether &quot;secure&quot; was found in the cookie's parameters list
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_COOKIE_HTTPONLY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      whether &quot;httpOnly&quot; was found in the cookie's parameter list
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.deflate">
   <title>Constants usable with <function>http_deflate</function> and <classname>HttpDeflateStream</classname></title>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_LEVEL_DEF</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_LEVEL_MIN</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_LEVEL_MAX</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_TYPE_ZLIB</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_TYPE_GZIP</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_TYPE_RAW</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_DEF</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_FILT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_HUFF</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_RLE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_FIXED</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.encodingstream">
   <title>Constants usable with <classname>HttpDeflateStream</classname> and <classname>HttpInflateStream</classname></title>
   <varlistentry>
    <term>
     <constant>HTTP_ENCODING_STREAM_FLUSH_NONE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      don't flush
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_ENCODING_STREAM_FLUSH_SYNC</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      synchronized flush only
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_ENCODING_STREAM_FLUSH_FULL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      full data flush
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.error">
   <title>Constants used for error reporting and Exceptions</title>
   <varlistentry>
    <term>
     <constant>HTTP_E_RUNTIME</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      runtime error
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_INVALID_PARAM</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      an invalid parameter was passed
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_HEADER</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      header() or similar operation failed
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_MALFORMED_HEADERS</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      HTTP header parse error
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_REQUEST_METHOD</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      unknown/invalid request method
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_MESSAGE_TYPE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      with operation incompatible message type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_ENCODING</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      encoding/decoding error
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_REQUEST</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      request failure
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_REQUEST_POOL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      request pool failure
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_SOCKET</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      socket exception
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_RESPONSE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      response failure
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_URL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      invalid URL
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_E_QUERYSTRING</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      querystring operation failure
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.message">
   <title>Constants usable with <classname>HttpMessage</classname></title>
   <varlistentry>
    <term>
     <constant>HTTP_MSG_NONE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      the message is of no specific type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_MSG_REQUEST</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      request style message
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_MSG_RESPONSE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      response style message
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.querystring">
   <title>Constants usable with <classname>HttpQueryString</classname></title>
   <varlistentry>
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_BOOL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_INT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_FLOAT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_STRING</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_ARRAY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_OBJECT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.httpauth">
   <title>Constants used for the <literal>httpauthtype</literal> &link.http.request.option;</title>
   <varlistentry>
    <term>
     <constant>HTTP_AUTH_BASIC</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use &quot;basic&quot; authentication
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_AUTH_DIGEST</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use &quot;digest&quot; authentication
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_AUTH_NTLM</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use &quot;NTLM&quot; authentication
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_AUTH_GSSNEG</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use &quot;GSS-NEGOTIATE&quot; authentication
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_AUTH_ANY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      try any authentication scheme
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.protocol">
   <title>Constants used for the HTTP <literal>protocol</literal> version &link.http.request.option;</title>
   <varlistentry>
    <term>
     <constant>HTTP_VERSION_ANY</constant> <!-- HTTP_VERSION_NONE is deprecated -->
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      no specific HTTP protocol version
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_VERSION_1_0</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      HTTP version 1.0
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_VERSION_1_1</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      HTTP version 1.1
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.ssl">
   <title>Constants used for the SSL <literal>protocol</literal> type and version &link.http.request.option;</title>
   <varlistentry>
    <term>
     <constant>HTTP_SSL_VERSION_ANY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      no specific SSL protocol version
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_SSL_VERSION_TLSv1</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use TLSv1 only
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_SSL_VERSION_SSLv3</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use SSLv3 only
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_SSL_VERSION_SSLv2</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use SSLv2 only
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.proxy">
   <title>Constants used for the <literal>proxytype</literal> &link.http.request.option;</title>
   <varlistentry>
    <term>
     <constant>HTTP_PROXY_SOCKS4</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      the proxy is a SOCKS4 type proxy
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_PROXY_SOCKS5</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      the proxy is a SOCKS5 type proxy
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_PROXY_HTTP</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      standard HTTP proxy
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.dns">
   <title>Constants used for the <literal>ipresolve</literal> &link.http.request.option;</title>
   <varlistentry>
    <term>
     <constant>HTTP_IPRESOLVE_V4</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use IPv4 only for name lookups
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_IPRESOLVE_V6</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use IPv6 only for name lookups
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_IPRESOLVE_ANY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      use any IP mechanism only for name lookups
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.methods">
   <title>Predefined HTTP request method constants</title>
   <varlistentry>
    <term>
     <constant>HTTP_METH_GET</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_HEAD</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_POST</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_PUT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_DELETE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_OPTIONS</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_TRACE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_CONNECT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_PROPFIND</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_PROPPATCH</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_MKCOL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_COPY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_MOVE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_LOCK</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_UNLOCK</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_VERSION_CONTROL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_REPORT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_CHECKOUT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_CHECKIN</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_UNCHECKOUT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_MKWORKSPACE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_UPDATE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_LABEL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_MERGE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_BASELINE_CONTROL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_MKACTIVITY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_METH_ACL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.redirect">
   <title>Constants usable with <function>http_redirect</function></title>
   <varlistentry>
    <term>
     <constant>HTTP_REDIRECT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      guess applicable redirect method
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_REDIRECT_PERM</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      permanent redirect (<literal>301 Moved permanently</literal>)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_REDIRECT_FOUND</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      standard redirect (<literal>302 Found</literal>)
     </simpara>
     <note>
      <simpara>
       RFC 1945 and RFC 2068 specify that the client is not allowed
       to change the method on the redirected request.  However, most
       existing user agent implementations treat 302 as if it were a 303
       response, performing a GET on the Location field-value regardless
       of the original request method. The status codes 303 and 307 have
       been added for servers that wish to make unambiguously clear which
       kind of reaction is expected of the client.
      </simpara>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_REDIRECT_POST</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      redirect applicable to POST requests (<literal>303 See other</literal>)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_REDIRECT_PROXY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      proxy redirect (<literal>305 Use proxy</literal>)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_REDIRECT_TEMP</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      temporary redirect (<literal>307 Temporary Redirect</literal>)
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.url">
   <title>Constants usable with <function>http_build_url</function></title>
   <varlistentry>
    <term>
     <constant>HTTP_URL_REPLACE</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      replace every part of the first URL when there's one of the second URL
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_JOIN_PATH</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      join relative paths
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_JOIN_QUERY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      join query strings
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_USER</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip any user authentication information
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_PASS</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip any password authentication information
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_AUTH</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip any authentication information
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_PORT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip explicit port numbers
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_PATH</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip complete path
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_QUERY</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip query string
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_FRAGMENT</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip any fragments (#identifier)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>HTTP_URL_STRIP_ALL</constant>
      (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      strip anything but scheme and host
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
