<?xml version="1.0" encoding="utf-8"?>

<refentry xml:id="ds-sequence.rotate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ds\Sequence::rotate</refname>
  <refpurpose>Rotates the sequence by a given number of rotations</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>abstract</modifier> <modifier>public</modifier> <type>void</type><methodname>Ds\Sequence::rotate</methodname>
   <methodparam><type>int</type><parameter>rotations</parameter></methodparam>
  </methodsynopsis>
  <para>
    Rotates the sequence by a given number of rotations, which is equivalent
    to successively calling <code>$sequence-&gt;push($sequence-&gt;shift())</code> if the number
    of rotations is positive, or <code>$sequence-&gt;unshift($sequence-&gt;pop())</code> if negative.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>rotations</parameter></term>
    <listitem>
     <para>
        The number of times the sequence should be rotated.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    &return.void;. The sequence of the current instance will be rotated.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Ds\Sequence::rotate</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$sequence = new \Ds\Vector(["a", "b", "c", "d"]);

$sequence->rotate(1);  // "a" is shifted, then pushed.
print_r($sequence);

$sequence->rotate(2);  // "b" and "c" are both shifted, the pushed.
print_r($sequence);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
(
    [0] => b
    [1] => c
    [2] => d
    [3] => a
)
Ds\Vector Object
(
    [0] => d
    [1] => a
    [2] => b
    [3] => c
)
]]>
   </screen>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
