<?xml version="1.0" encoding="utf-8"?>
<refentry xml:id="random-randomizer.getfloat" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Randomizer::getFloat</refname>
  <refpurpose>Get a uniformly selected float</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Randomizer">
   <modifier>public</modifier> <type>float</type><methodname>Random\Randomizer::getFloat</methodname>
   <methodparam><type>float</type><parameter>min</parameter></methodparam>
   <methodparam><type>float</type><parameter>max</parameter></methodparam>
   <methodparam choice="opt"><type>Random\IntervalBoundary</type><parameter>boundary</parameter><initializer>Random\IntervalBoundary::ClosedOpen</initializer></methodparam>
  </methodsynopsis>
  <para>
   Returns a uniformly selected, equidistributed float from a requested interval.
  </para>
  <para>
   Due to the limited precision, not all real numbers can be exactly represented as
   a floating point number.

   If a number cannot be represented exactly, it is rounded to the nearest
   representable exact value.

   Furthermore, floats are not equally dense across the whole number line.

   Because floats use a binary exponent, the distance between two neighboring
   floats doubles at each power of two.

   In other words: There are the same number of representable floats between 1 and 2
   as they are between 2 and 4, 4 and 8, 8 and 16, and so on.
  </para>
  <para>
   Randomly sampling an arbitrary number within the requested interval, for example
   by dividing two integers, might result in a biased distribution for this reason.

   The necessary rounding will cause some floats to be returned more often than
   others, especially around powers of two when the density of floats changes.
  </para>
  <para>
   <methodname>Random\Randomizer::getFloat</methodname> implements an algorithm that
   will return a uniformly selected float from the largest possible set of exactly
   representable and equidistributed floats within the requested interval.

   The distance between the selectable floats (“step size”) matches the distance
   between the floats with the lowest density, i.e. the distance between floats
   at interval boundary with the larger absolute value.

   This means that not all representable floats within a given interval may be
   returned if the interval crosses one or more powers of two.

   Stepping will start from the interval boundary with the larger absolute value
   to ensure the steps align with the exactly representable floats.
  </para>
  <para>
   Closed interval boundaries will always be included in the set of selectable
   floats.

   Thus, if the size of the interval is not an exact multiple of the step size and
   the boundary with the smaller absolute value is a closed boundary, the distance
   between that boundary and its nearest selectable float will be smaller than the
   step size.
  </para>

  <caution>
   <para>
    Post-processing the returned floats is likely going to break the uniform
    equidistribution, because the intermediate floats within a mathematical
    operation are experiencing implicit rounding.

    The requested interval should match the desired interval as closely as possible
    and rounding should only be performed as an explicit operation right before
    displaying the selected number to a user.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>min</parameter></term>
     <listitem>
      <para>
       The lower bound of the interval.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>max</parameter></term>
     <listitem>
      <para>
       The upper bound of the interval.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>boundary</parameter></term>
     <listitem>
      <para>
       Specifies whether the interval boundaries are possible return values.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   A uniformly selected, equidistributed float from the interval specified by <parameter>min</parameter>,
   <parameter>max</parameter>, and <parameter>boundary</parameter>.

   Whether <parameter>min</parameter> and <parameter>max</parameter> are possible return values depends
   on the value of <parameter>boundary</parameter>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     If the value of <parameter>$min</parameter> is not finite (<function>is_finite</function>),
     a <classname>ValueError</classname> will be thrown.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     If the value of <parameter>$max</parameter> is not finite (<function>is_finite</function>),
     a <classname>ValueError</classname> will be thrown.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     If the requested interval does not contain any values,
     a <classname>ValueError</classname> will be thrown.
    </simpara>
   </listitem>
   &random.engineErrors;
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><methodname>Random\Randomizer::getFloat</methodname> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$randomizer = new \Random\Randomizer();

// Note that the latitude granularity is double the
// longitude’s granularity.
//
// For the latitude the value may be both -90 and 90.
// For the longitude the value may be 180, but not -180, because
// -180 and 180 refer to the same longitude.
printf(
    "Lat: %+.6f Lng: %+.6f",
    $randomizer->getFloat(-90, 90, \Random\IntervalBoundary::ClosedClosed),
    $randomizer->getFloat(-180, 180, \Random\IntervalBoundary::OpenClosed),
);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Lat: 69.244304 Lng: -53.548951
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    This method implements the γ-section algorithm as published in
    <link xlink:href="&url.random.gamma-section;">
     Drawing Random Floating-Point Numbers from an Interval.
     Frédéric Goualard, ACM Trans. Model. Comput. Simul., 32:3, 2022
    </link>
    to obtain the desired behavioral properties.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Random\Randomizer::nextFloat</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!--Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
