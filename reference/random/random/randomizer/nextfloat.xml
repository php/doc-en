<?xml version="1.0" encoding="utf-8"?>
<refentry xml:id="random-randomizer.nextfloat" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Randomizer::nextFloat</refname>
  <refpurpose>Get a float from the right-open interval [0.0, 1.0)</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Randomizer">
   <modifier>public</modifier> <type>float</type><methodname>Random\Randomizer::nextFloat</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Returns a uniformly selected, equidistributed float from the right-open
   interval from <literal>0.0</literal> until, but not including,
   <literal>1.0</literal>.
  </para>

  <para>
   The chance for returned float to be within a given right-open sub-interval
   is proportional to the size of the sub-interval.

   This means that the chance for a float to be <emphasis>less than</emphasis> <literal>0.5</literal>
   is 50 %, which is equal to the chance for a float to be <emphasis>at least</emphasis> <literal>0.5</literal>.

   Likewise the chance for a float to be within the right-open interval from
   <literal>0.2</literal> until, but not including, <literal>0.25</literal> is
   exactly 5 %.
  </para>

  <para>
   This property makes it easy to leverage <methodname>Random\Randomizer::nextFloat</methodname>
   to generate a random boolean with a given chance by checking if the returned float is
   <emphasis>less than</emphasis> a given chance.
  </para>

  <note>
   <para>
    The domain of the returnable floats of <methodname>Random\Randomizer::nextFloat</methodname>
    is identical to that of <code>Randomizer::getFloat(0.0, 1.0, IntervalBoundary::ClosedOpen)</code>.
   </para>

   <para>
    The internal implementation of <methodname>Random\Randomizer::nextFloat</methodname> is more
    efficient.
   </para>
  </note>

  <caution>
   <para>
    Scaling the return value to a different interval using multiplication
    or addition (a so-called affine transformation) might result in a bias
    in the resulting value as floats are not equally dense across the number
    line. As not all values can be exactly represented by a float, the
    result of the affine transformation might also result in values outside
    of the requested interval due to implicit rounding.

    An <link linkend="random-randomizer.getfloat.affine-transformation">in-depth explanation</link>
    of the problems with the affine transformation is given in the documentation
    for <methodname>Random\Randomizer::getFloat</methodname>.
   </para>
   <para>
    Use <methodname>Random\Randomizer::getFloat</methodname> to generate a
    random float within an arbitrary interval. Use <methodname>Random\Randomizer::getInt</methodname>
    to generate a random integer within an arbitrary interval.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   A uniformly selected, equidistributed float from the right-open (<literal>IntervalBoundary::ClosedOpen</literal>)
   interval [0.0, 1.0).

   <literal>0.0</literal> is a possible return value, <literal>1.0</literal> is not.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   &random.engineErrors;
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><methodname>Random\Randomizer::nextFloat</methodname> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$r = new \Random\Randomizer();

// The resulting bool will be true with the given chance.
$chance = 0.5;

$bool = $r->nextFloat() < $chance;

echo ($bool ? "You won" : "You lost"), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
You won
]]>
   </screen>
  </example>

  <example>
   <title>Incorrect scaling using an affine transformation</title>
   <programlisting role="php">
<![CDATA[
<?php
final class MaxEngine implements Random\Engine {
    public function generate(): string {
        return "\xff";
    }
}

$randomizer = new \Random\Randomizer(new MaxEngine);

$min = 3.5;
$max = 4.5;

// DO NOT DO THIS:
//
// This will output 4.5, despite nextFloat() sampling from
// a right-open interval, which will never return 1.
printf("Wrong scaling: %.17g", $randomizer->nextFloat() * ($max - $min) + $min);

// Correct:
// $randomizer->getFloat($min, $max, \Random\IntervalBoundary::ClosedOpen);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Wrong scaling: 4.5
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Random\Randomizer::getFloat</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!--Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
