<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="memcached.deletemulti" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Memcached::deleteMulti</refname>
  <refpurpose>Delete multiple items</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>Memcached::deleteMulti</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>time</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcached::deleteMulti</function> deletes the array of
   <parameter>keys</parameter> from the server. The <parameter>time</parameter>
   parameter is the amount of time in seconds (or Unix time until which) the
   client wishes the server to refuse <literal>add</literal> and
   <literal>replace</literal> commands for these keys. For this amount of time,
   the item is put into a delete queue, which means that it won't be possible to
   retrieve it by the <literal>get</literal> command, but
   <literal>add</literal> and <literal>replace</literal> command with these keys
   will also fail (the <literal>set</literal> command will succeed, however).
   After the time passes, the item is finally deleted from server memory. The
   parameter <parameter>time</parameter> defaults to 0 (which means that the
   item will be deleted immediately and further storage commands with these keys
   will succeed).
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>keys</parameter></term>
     <listitem>
      <para>
       The keys to be deleted.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>time</parameter></term>
     <listitem>
      <para>
       The amount of time the server will wait to delete the items.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns array indexed by <parameter>keys</parameter> and where values are indicating whether operation succeeded or not.
   In case of failed operations, a corresponding status code will be returned for the key.
   See <link linkend="memcached.constants.res-failure">Memcached RES_* Constants</link> for more information.
   The <methodname>Memcached::getResultCode</methodname> will return
   <constant>Memcached::RES_NOTFOUND</constant> if the key does not exist.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Memcached::delete</methodname></member>
    <member><methodname>Memcached::deleteByKey</methodname></member>
    <member><methodname>Memcached::deleteMultiByKey</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
