<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<section xml:id="memcached.configuration" xmlns="http://docbook.org/ns/docbook">
 &reftitle.runtime;
 &extension.runtime;
 <para>
  <table>
   <title>Memcached &ConfigureOptions;</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>&Name;</entry>
      <entry>&Default;</entry>
      <entry>&Changeable;</entry>
      <entry>&Changelog;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><link linkend="ini.memcached.sess-locking">memcached.sess_locking</link></entry>
      <entry>On</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 0.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-consistent-hash">memcached.sess_consistent_hash</link></entry>
      <entry>On</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.1.0. Default value is <literal>On</literal> as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-binary">memcached.sess_binary</link></entry>
      <entry>Off</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.0.0. Replaced by <literal>memcached.sess_binary_protocol</literal> as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-lock-wait">memcached.sess_lock_wait</link></entry>
      <entry>150000</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 0.1.0. Removed as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-prefix">memcached.sess_prefix</link></entry>
      <entry>memc.sess.key.</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 0.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-number-of-replicas">memcached.sess_number_of_replicas</link></entry>
      <entry>0</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-randomize-replica-read">memcached.sess_randomize_replica_read</link></entry>
      <entry>Off</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-remove-failed">memcached.sess_remove_failed</link></entry>
      <entry>On</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.1.0. Replaced by <literal>memcached.sess_remove_failed_servers</literal> as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.compression-type">memcached.compression_type</link></entry>
      <entry>fastlz</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 0.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.compression-factor">memcached.compression_factor</link></entry>
      <entry>1.3</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 0.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.compression-threshold">memcached.compression_threshold</link></entry>
      <entry>2000</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 0.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.serializer">memcached.serializer</link></entry>
      <entry>igbinary</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 0.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.use-sasl">memcached.use_sasl</link></entry>
      <entry>Off</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.2.0. Removed as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.default-binary-protocol">memcached.default_binary_protocol</link></entry>
      <entry>Off</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.default-connect-timeout">memcached.default_connect_timeout</link></entry>
      <entry>0</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.default-consistent-hash">memcached.default_consistent_hash</link></entry>
      <entry>Off</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-binary-protocol">memcached.sess_binary_protocol</link></entry>
      <entry>On</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0. Replace <literal>memcached.sess_binary</literal>.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-connect-timeout">memcached.sess_connect_timeout</link></entry>
       <entry>1000</entry>
       <entry><constant>INI_ALL</constant></entry>
       <entry>Available as of memcached 2.2.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-consistent-hash-type">memcached.sess_consistent_hash_type</link></entry>
      <entry>ketama</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.1.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-lock-expire">memcached.sess_lock_expire</link></entry>
      <entry>0</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.2.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-lock-retries">memcached.sess_lock_retries</link></entry>
      <entry>5</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-lock-wait-max">memcached.sess_lock_wait_max</link></entry>
      <entry>150</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0. Default value <literal>150</literal> as of memcached 3.1.0 (previously <literal>2000</literal>).</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-lock-wait-min">memcached.sess_lock_wait_min</link></entry>
      <entry>150</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0. Default value <literal>150</literal> as of memcached 3.1.0 (previously <literal>1000</literal>).</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-persistent">memcached.sess_persistent</link></entry>
      <entry>Off</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-remove-failed-servers">memcached.sess_remove_failed_servers</link></entry>
      <entry>Off</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0. Replace <literal>memcached.sess_remove_failed</literal>.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-server-failure-limit">memcached.sess_server_failure_limit</link></entry>
      <entry>0</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-sasl-password">memcached.sess_sasl_password</link></entry>
      <entry>null</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.2.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.sess-sasl-username">memcached.sess_sasl_username</link></entry>
      <entry>null</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>Available as of memcached 2.2.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.memcached.store-retry-count">memcached.store_retry_count</link></entry>
      <entry>0</entry>
      <entry><constant>INI_ALL</constant></entry>
      <entry>
       Available as of memcached 2.2.0.
       Default value <literal>0</literal> as of memcached 3.2.0
       (previously <literal>2</literal>).
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>

 &ini.descriptions.title;

 <para>
  <variablelist>
   <varlistentry xml:id="ini.memcached.sess-locking">
     <term>
      <parameter>memcached.sess_locking</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Use session locking. Valid values: <literal>On</literal>, <literal>Off</literal>, the default is <literal>On</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-consistent-hash">
     <term>
      <parameter>memcached.sess_consistent_hash</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       If set to <literal>On</literal>, consistent hashing (libketama) is used for session handling.
       When consistent hashing is used,
       one can add or remove cache node(s) without messing up too much with existing keys.
       Default is <literal>On</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-binary">
     <term>
      <parameter>memcached.sess_binary</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Use memcached session binary mode. Libmemcached replicas only work if
       binary mode is enabled. The default is <literal>Off</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-lock-wait">
     <term>
      <parameter>memcached.sess_lock_wait</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       Session spin lock retry wait time in microseconds. Be careful when
       setting this value. Valid values are integers, where <literal>0</literal> is interpreted
       as the default value. Negative values result in a reduces locking to a
       try lock. The default is <literal>150000</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-prefix">
     <term>
      <parameter>memcached.sess_prefix</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Memcached session key prefix. Valid values are strings less than 219
       bytes long. The default value is <literal>memc.sess.key</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-number-of-replicas">
     <term>
      <parameter>memcached.sess_number_of_replicas</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       Write data to a number of additional memcached servers. This is "poor man's HA" as libmemcached calls it.
       If this value is positive and <literal>sess_remove_failed_servers</literal> is enabled
       when a memcached server fails the session will continue to be available from a replica.
       However, if the failed memcache server becomes available again it will read the session
       from there which could have old data or no data at all.
       Default is <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-randomize-replica-read">
     <term>
      <parameter>memcached.sess_randomize_replica_read</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Memcached session replica read randomize.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-remove-failed">
     <term>
      <parameter>memcached.sess_remove_failed</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       Allow failed memcached server to automatically be removed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.compression-type">
     <term>
      <parameter>memcached.compression_type</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Set the compression type, valid values are: <literal>fastlz</literal>, <literal>zlib</literal>.
       The default is <literal>fastlz</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.compression-factor">
     <term>
      <parameter>memcached.compression_factor</parameter>
      <type>float</type>
     </term>
     <listitem>
      <para>
       Compression factor. Store compressed value only if the compression
       factor (saving) exceeds the set limit. Store compressed if:
       <literal>plain_len &gt; comp_len * factor</literal>. The default value
       is <literal>1.3</literal> (23% space saving).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.compression-threshold">
     <term>
      <parameter>memcached.compression_threshold</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       The compression threshold. Do not compress serialized values below this
       threshold. The default is <literal>2000</literal> bytes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.serializer">
     <term>
      <parameter>memcached.serializer</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Set the default serializer for new memcached objects. Valid values
       are: <literal>php</literal>, <literal>igbinary</literal>, <literal>json</literal>,
       <literal>json_array</literal>, <literal>msgpack</literal>.
      </para>
      <variablelist>
       <varlistentry>
        <term>json</term>
        <listitem>
         <para>
          Standard PHP JSON encoding. This serializer is fast and compact but
          only works on UTF-8 encoded data and does not fully implement
          serializing. See the JSON extension. Available as of memcached 0.2.0.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>json_array</term>
        <listitem>
         <para>
          As <literal>json</literal>, but decodes into arrays. Available as of memcached 2.0.0.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>php</term>
        <listitem>
         <para>
          The standard PHP serializer.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>igbinary</term>
        <listitem>
         <para>
          A binary serializer. Available as of memcached 0.1.4.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>msgpack</term>
        <listitem>
         <para>
          A cross-language binary serializer. Available as of memcached 2.2.0.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <para>
       The default is <literal>igbinary</literal> if available, then <literal>msgpack</literal> if
       available, then <literal>php</literal> otherwise.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.use-sasl">
     <term>
      <parameter>memcached.use_sasl</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Use SASL authentication for connections. Valid values: <literal>On</literal>, <literal>Off</literal>. The
       default is <literal>Off</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.default-binary-protocol">
     <term>
      <parameter>memcached.default_binary_protocol</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Sets the default memcached protocol for new connections. (To configure the memcached protocol for
       connections used by sessions, use <literal>memcached.sess_binary_protocol</literal> instead.)

       If set to <literal>On</literal>, the memcached binary protocol is used by default.
       If set to <literal>Off</literal>, the memcached text protocol is used.
       Default is <literal>Off</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.default-connect-timeout">
     <term>
      <parameter>memcached.default_connect_timeout</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       Sets the default memcached connection timeout for new connections.
       (To configure the memcached connection timeout for sessions, use <literal>memcached.sess_connect_timeout</literal> instead.)

       In non-blocking mode this changes the value of the timeout.
       During socket connection in milliseconds.
       Specifying <literal>-1</literal> means an infinite timeout.
       Specifying <literal>0</literal> means using the memcached library's default connection timeout.
       Default is <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.default-consistent-hash">
     <term>
      <parameter>memcached.default_consistent_hash</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Sets the default for consistent hashing for new connections.
       (To configure consistent hashing for session connections,
       use <literal>memcached.sess_consistent_hash</literal> instead.)

       If set to <literal>On</literal>, consistent hashing (libketama) is used for
       session handling. When consistent hashing is used, one can add or remove cache node(s)
       without messing up too much with existing keys default is <literal>Off</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-binary-protocol">
     <term>
      <parameter>memcached.sess_binary_protocol</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Use the memcached binary protocol for memcached sessions instead of the text protocol.
       libmemcached replicas only work if the binary mode is enabled.
       However, certain proxies (such as twemproxy) will only work if the binary protocol is disabled.
       Default is <literal>On</literal> as of libmemcached 1.0.18.
       Prior to libmemcached 1.0.18, the default was <literal>Off</literal>.
      </para>
      <note>
       <simpara>
        In previous versions of php-memcached, this setting was called
        <literal>memcached.sess_binary</literal>.
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-connect-timeout">
     <term>
      <parameter>memcached.sess_connect_timeout</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       memcached connect timeout value
       In non-blocking mode this changes the value of the timeout
       during socket connection in milliseconds.
       Specifying <literal>-1</literal> means an infinite timeout.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-consistent-hash-type">
     <term>
      <parameter>memcached.sess_consistent_hash_type</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Memcached session consistent hash type.
       If set to <literal>ketama</literal>, consistent hashing (libketama)
       is used for session handling.
       If set to <literal>ketama_weighted</literal>, weighted consistent hashing (libketama)
       is used for session handling.
       Default is <literal>ketama</literal>.
       Prior to php-memcached 3.0, the default was <literal>ketama_weighted</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-lock-expire">
     <term>
      <parameter>memcached.sess_lock_expire</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       The time, in seconds, before a lock should release itself.
       Setting to <literal>0</literal> results in the default behaviour,
       which is to use PHP's <literal>max_execution_time</literal>.
       Default is <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-lock-retries">
     <term>
      <parameter>memcached.sess_lock_retries</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       The number of times to retry locking the session lock, not including the first attempt.
       Default is <literal>5</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-lock-wait-max">
     <term>
      <parameter>memcached.sess_lock_wait_max</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       The maximum time, in milliseconds, to wait between session lock attempts.
       The default is <literal>150</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-lock-wait-min">
     <term>
      <parameter>memcached.sess_lock_wait_min</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       The minimum time, in milliseconds, to wait between session lock attempts.
       This value is double on each lock retry until <literal>memcached.sess_lock_wait_max</literal> is
       reached, after which any further retries will take
       <literal>memcached.sess_lock_wait_max</literal> seconds.
       The default is <literal>150</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-persistent">
     <term>
      <parameter>memcached.sess_persistent</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Whether or not to re-use the memcached connections corresponding to the value(s) of
       <literal>session.save_path</literal> after the execution of the script ends. Don't use this if
       certain settings (e.g. SASL settings, sess_binary_protocol) would be overridden between requests.
       Default is <literal>Off</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-remove-failed-servers">
     <term>
      <parameter>memcached.sess_remove_failed_servers</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Allow failed memcached server to automatically be removed.
       Default is <literal>Off</literal>.
      </para>
      <note>
       <simpara>
        In previous versions of php-memcached, this setting was called
        <literal>memcached.sess_remove_failed</literal>.
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-server-failure-limit">
     <term>
      <parameter>memcached.sess_server_failure_limit</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       Set this value to enable the server be removed after
       configured number of continuous times connection failure.
       Default is <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-sasl-password">
     <term>
      <parameter>memcached.sess_sasl_password</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Session SASL password.
       Both username and password need to be set for SASL to be enabled.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.sess-sasl-username">
     <term>
      <parameter>memcached.sess_sasl_username</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Session SASL username.
       Both username and password need to be set for SASL to be enabled.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.memcached.store-retry-count">
     <term>
      <parameter>memcached.store_retry_count</parameter>
      <type>int</type>
     </term>
     <listitem>
      <para>
       The amount of retries for failed store commands.
       This mechanism allows transparent fail-over to secondary servers when
       set/increment/decrement/setMulti operations fail on
       the desired server in a multi-server environment.
       The default is <literal>2</literal>.
      </para>
     </listitem>
    </varlistentry>
  </variablelist>
 </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
