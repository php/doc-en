<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<chapter xml:id="memcached.callbacks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Callbacks</title>

 <section xml:id="memcached.callbacks.result">
  <title>Result callbacks</title>
  <para>
   Result <type>callable</type>s are invoked by
   <methodname>Memcached::getDelayed</methodname> or
   <methodname>Memcached::getDelayedBykey</methodname> methods for each item in
   the result set. The callback is passed the Memcached object and the array
   with the item information. The callback does not have to return anything.
  </para>
  <example>
   <title>Result callback example</title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);
$items = array(
    'key1' => 'value1',
    'key2' => 'value2',
    'key3' => 'value3'
);
$m->setMulti($items);
$m->getDelayed(array('key1', 'key3'), true, 'result_cb');

function result_cb($memc, $item)
{
    var_dump($item);
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["key"]=>
  string(4) "key1"
  ["value"]=>
  string(6) "value1"
  ["cas"]=>
  float(49)
}
array(3) {
  ["key"]=>
  string(4) "key3"
  ["value"]=>
  string(6) "value3"
  ["cas"]=>
  float(50)
}
]]>
   </screen>
  </example>
 </section>

 <section xml:id="memcached.callbacks.read-through">
  <title>Read-through cache callbacks</title>
  <para>
   Read-through cache callbacks are invoked when an item cannot be retrieved
   from the server. The callback is passed the Memcached object, the requested
   key, and the by-reference value variable. The callback is responsible for
   setting the value and returning true or false. If the callback returns true,
   Memcached will store the populated value on the server and return it to the
   original calling function. Only <methodname>Memcached::get</methodname> and
   <methodname>Memcached::getByKey</methodname> support these callbacks,
   because the memcache protocol does not provide information on which keys
   were not found in the multi-key request.
  </para>
  <example>
   <title>Read-through callback example</title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

$profile_info = $m->get('user:'.$user_id, 'user_info_cb');

function user_info_cb($memc, $key, &$value)
{
    $user_id = substr($key, 5);
    /* lookup profile info in the DB */
    /* ... */
    $value = $profile_info;
    return true;
}
?>
]]>
   </programlisting>
  </example>
 </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
