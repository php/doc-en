<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.yaz-sort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>yaz_sort</refname>
  <refpurpose>Sets sorting criteria</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>yaz_sort</methodname>
   <methodparam><type>resource</type><parameter>id</parameter></methodparam>
   <methodparam><type>string</type><parameter>criteria</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function sets sorting criteria and enables Z39.50 Sort.
  </para>
  <para>
   Call this function <emphasis>before</emphasis> <function>yaz_search</function>.
   Using this function alone does not have any effect. When used in conjunction
   with <function>yaz_search</function>, a Z39.50 Sort will be sent after a
   search response has been received and before any records are retrieved with
   Z39.50 Present (<function>yaz_present</function>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>id</parameter></term>
     <listitem>
      <para>
       The connection resource returned by <function>yaz_connect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>criteria</parameter></term>
     <listitem>
      <para>
       A string that takes the form <replaceable>field1 flags1 field2
       flags2</replaceable> where field1 specifies the primary attributes for
       sort, field2 seconds, etc..
      </para>
      <para>
       The field specifies either a numerical attribute combinations consisting
       of type=value pairs separated by comma (e.g. <literal>1=4,2=1</literal>)
       ; or the field may specify a plain string criteria (e.g.
       <literal>title</literal>. The flags is a sequence of the following
       characters which may not be separated by any white space.
      </para>
      <para>
       <variablelist>
        <title>Sort Flags</title>
        <varlistentry>
         <term><literal>a</literal></term>
         <listitem>
          <para>
           Sort ascending
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><literal>d</literal></term>
         <listitem>
          <para>
           Sort descending
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><literal>i</literal></term>
         <listitem>
          <para>
           Case insensitive sorting
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><literal>s</literal></term>
         <listitem>
          <para>
           Case sensitive sorting
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Sort Criterias</title>
   <para>
    To sort on Bib1 attribute title, case insensitive, and ascending you
    would use the following sort criteria:
    <screen>
<![CDATA[
1=4 ia
]]>
    </screen>
   </para>
   <para>
    If the secondary sorting criteria should be author, case sensitive and
    ascending you would use:
    <screen>
<![CDATA[
1=4 ia 1=1003 sa
]]>
    </screen>
   </para>
  </example>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
