<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1.2.2 $ -->
<!-- Purpose: basic.vartype -->
<!-- Membership: bundled -->
<!-- State: experimental -->

<book xml:id="book.objaggregation" xmlns="http://docbook.org/ns/docbook">
 <title>Object Aggregation/Composition Functions</title>
 <titleabbrev>Object Aggregation</titleabbrev>

 <preface xml:id="objaggregation.intro">
  &reftitle.intro;
  &warn.experimental;
  <para>
   In Object Oriented Programming, it is common to see the composition of
   simple classes (and/or instances) into a more complex one. This is a
   flexible strategy for building complicated objects and object
   hierarchies and can function as a dynamic alternative to multiple
   inheritance. There are two ways to perform class (and/or object)
   composition depending on the relationship between the composed
   elements: <emphasis>Association</emphasis> and
   <emphasis>Aggregation</emphasis>.
  </para>
 </preface>

 &reference.objaggregation.examples;
 &reference.objaggregation.reference;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

