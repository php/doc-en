<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.pcntl-waitpid" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_waitpid</refname>
  <refpurpose>Waits on or returns the status of a forked child</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_waitpid</methodname>
   <methodparam><type>int</type><parameter>process_id</parameter></methodparam>
   <methodparam><type>int</type><parameter role="reference">status</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   Suspends execution of the current process until a child as specified by
   the <parameter>process_id</parameter> argument has exited, or until a signal is
   delivered whose action is to terminate the current process or to call a
   signal handling function.
  </para>
  <para>
   If a child as requested by <parameter>process_id</parameter> has already exited
   by the time of the call (a so-called "zombie" process), the function
   returns immediately.  Any system resources used by the child are freed.
   Please see your system's waitpid(2) man page for specific details as to
   how waitpid works on your system.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>process_id</parameter></term>
     <listitem>
      <para>
       The value of <parameter>process_id</parameter> can be one of the following:
       <table>
        <title>possible values for <parameter>process_id</parameter></title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><literal>&lt; -1</literal></entry>
           <entry>
            wait for any child process whose process group ID is equal to
            the absolute value of <parameter>process_id</parameter>.
           </entry>
          </row>
          <row>
           <entry><literal>-1</literal></entry>
           <entry>
            wait for any child process; this is the same behaviour that
            the <function>pcntl_wait</function> function exhibits.
           </entry>
          </row>
          <row>
           <entry><literal>0</literal></entry>
           <entry>
            wait for any child process whose process group ID is equal to
            that of the calling process.
           </entry>
          </row>
          <row>
           <entry><literal>&gt; 0</literal></entry>
           <entry>
            wait for the child whose process ID is equal to the value of
            <parameter>process_id</parameter>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <note>
       <para>
        Specifying <literal>-1</literal> as the <parameter>process_id</parameter> is
        equivalent to the functionality <function>pcntl_wait</function> provides
        (minus <parameter>flags</parameter>).
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       <function>pcntl_waitpid</function> will store status information
       in the <parameter>status</parameter> parameter which can be
       evaluated using the following functions:
       <function>pcntl_wifexited</function>,
       <function>pcntl_wifstopped</function>,
       <function>pcntl_wifsignaled</function>,
       <function>pcntl_wexitstatus</function>,
       <function>pcntl_wtermsig</function> and
       <function>pcntl_wstopsig</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       The value of <parameter>flags</parameter> is the value of zero
       or more of the following two global constants
       <literal>OR</literal>'ed together:
       <table>
        <title>possible values for <parameter>flags</parameter></title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><constant>WNOHANG</constant></entry>
           <entry>
            return immediately if no child has exited.
           </entry>
          </row>
          <row>
           <entry><constant>WUNTRACED</constant></entry>
           <entry>
            return for children which are stopped, and whose status has
            not been reported.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>resource_usage</parameter></term>
     <listitem>
      <para>
       The <parameter>resource_usage</parameter> parameter is set to an
       associative <type>array</type> containing resource usage statistics
       from the child process.

       This is supported either if the wait6 system call is available
       (e.g. on FreeBSD), or on Linux through the raw waitid system call. For
       information on the contents see <function>getrusage</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_waitpid</function> returns the process ID of the
   child which exited, -1 on error or zero if <constant>WNOHANG</constant> was used and no
   child was available
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pcntl_waitpid</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
function checkChild(int $pid, bool $wait): void
{
    $flags = ($wait ? 0 : WNOHANG);
    $deadPid = pcntl_waitpid($pid, $status, $flags, $rusage);
    if ($deadPid === -1) {
        $errNo = pcntl_get_last_error();
        $errMsg = pcntl_strerror($errNo);
        print "PARENT pcntl_waitpid FAILED ({$deadPid}): {$errMsg}\n";
    } elseif ($deadPid === 0) {
        print "PARENT pcntl_waitpid: No exited children.\n";
    } else {
        print "PARENT pcntl_waitpid: Child PID {$deadPid} exited with status: "
            . pcntl_wexitstatus($status) ."\n";
        var_dump($rusage);
    }
}

$parentPid = getmypid();
$forkedPid = pcntl_fork();
if ($forkedPid == -1) {
    die('Could not fork');
} else if ($forkedPid) {
    // Parent process
    print "PARENT {$parentPid} has forked {$forkedPid}\n";

    print "PARENT is checking for exited children\n";
    checkChild($forkedPid, false);

    // Prevents children remaining as a "zombie process"
    print "PARENT is waiting for a child to exit\n";
    checkChild($forkedPid, true);

    print "PARENT is checking for exited children\n";
    checkChild($forkedPid, false);

    print "PARENT is exiting\n";
} else {
    // Child process
    $pid = getmypid();
    print "CHILD {$pid} is sleeping\n";
    sleep(10);
    print "CHILD is exiting\n";
    exit(7);
}
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wait</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
