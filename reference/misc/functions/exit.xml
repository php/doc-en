<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.exit" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>exit</refname>
  <refpurpose>Terminate the current script with a status code or message</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>never</type><methodname>exit</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>int</type></type><parameter>status</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   Terminates execution of the script.
   <link linkend="function.register-shutdown-function">Shutdown functions</link>
   and <link linkend="language.oop5.decon.destructor">object destructors</link>
   will always be executed even if <function>exit</function> is called.
   However, &finally; blocks are never executed.
  </simpara>
  <simpara>
   An exit code of <literal>0</literal> is used to indicate that the program
   succeeded in its tasks.
   Any other value indicates some sort of error occurred during execution.
  </simpara>
  <simpara>
   <function>exit</function> is a special function,
   because it has a dedicated token in the parser,
   as such it can be used like a statement (i.e. without parentheses) to
   terminate the script with the default status code.
  </simpara>
  <caution>
   <simpara>
    It is not possible to disable, or create a namespaced function shadowing
    the global <function>exit</function> function.
   </simpara>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>status</parameter></term>
    <listitem>
     <simpara>
      If <parameter>status</parameter> is a string,
      this function prints the <parameter>status</parameter> just before exiting.
      The exit code returned by PHP is <literal>0</literal>.
     </simpara>
     <para>
      If <parameter>status</parameter> is an <type>int</type>,
      the exit code returned by PHP will be <parameter>status</parameter>.
      <note>
       <simpara>
        Exit codes should be in the range <literal>0</literal> to <literal>254</literal>,
        the exit code <literal>255</literal> is reserved by PHP and should not be used.
       </simpara>
      </note>
     </para>
     <warning>
      <simpara>
       Prior to PHP 8.4.0, <function>exit</function> did not follow PHP's standard
       <link linkend="language.types.type-juggling.function">type juggling semantics</link>,
       nor respect the
       <link linkend="language.types.declarations.strict"><literal>strict_types</literal></link>
       declare.
      </simpara>
      <simpara>
       Any value not of type <type>int</type> was cast to <type>string</type>
       including <type>resource</type> and <type>array</type> values.
       As of PHP 8.4.0, it follows the usual type juggling semantics and throws a
       <exceptionname>TypeError</exceptionname> on invalid values.
      </simpara>
     </warning>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   As this terminates the PHP script, no value is returned.
  </simpara>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       <function>exit</function> is now a proper function,
       therefore it follows the usual
       <link linkend="language.types.type-juggling.function">type juggling semantics</link>
       is affected by the
       <link linkend="language.types.declarations.strict"><literal>strict_types</literal></link>
       declare, can be called with named arguments, and be a
       <link linkend="functions.variable-functions">variable functions</link>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Basic <function>exit</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php

// exit program normally
exit();
exit(0);

// exit with an error code
exit(1);

?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>exit</function> example with a <type>string</type></title>
   <programlisting role="php">
<![CDATA[
<?php

$filename = '/path/to/data-file';
$file = fopen($filename, 'r')
    or exit("unable to open file ($filename)");

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Shutdown functions and destructors run regardless</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public function __destruct()
    {
        echo 'Destruct: ' . __METHOD__ . '()' . PHP_EOL;
    }
}

function shutdown()
{
    echo 'Shutdown: ' . __FUNCTION__ . '()' . PHP_EOL;
}

$foo = new Foo();
register_shutdown_function('shutdown');

exit();
echo 'This will not be output.';
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Shutdown: shutdown()
Destruct: Foo::__destruct()
]]>
   </screen>
  </example>
  <example>
   <title><function>exit</function> as a statement</title>
   <programlisting role="php">
<![CDATA[
<?php

// exit program normally with exit code 0
exit;

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <simpara>
    Prior to PHP 8.4.0, <function>exit</function> was a language construct
    and not a function, therefore it was not possible to call it using
    <link linkend="functions.variable-functions">variable functions</link>,
    or <link linkend="functions.named-arguments">named arguments</link>.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>register_shutdown_function</function></member>
   <member><link linkend="function.register-shutdown-function">Shutdown functions</link></member>
   <member><link linkend="language.oop5.decon.destructor">object destructors</link></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
