<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>Pack data into binary string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
   Pack given arguments into a binary string according to
   <parameter>format</parameter>. 
  </para>
  <para>
   The idea for this function was taken from Perl and all formatting codes
   work the same as in Perl. However, there are some formatting codes that are
   missing such as Perl's "u" format code.
  </para>
  <para>
   Note that the distinction between signed and unsigned values only
   affects the function <function>unpack</function>, where as
   function <function>pack</function> gives the same result for
   signed and unsigned format codes.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       The <parameter>format</parameter> string consists of format codes
       followed by an optional repeater argument. The repeater argument can
       be either an integer value or <literal>*</literal> for repeating to
       the end of the input data. For a, A, h, H the repeat count specifies
       how many characters of one data argument are taken, for @ it is the
       absolute position where to put the next data, for everything else the
       repeat count specifies how many data arguments are consumed and packed
       into the resulting binary string.
      </para>
      <para>
       Currently implemented formats are:
       <table>
        <title><function>pack</function> format characters</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Code</entry>
           <entry>Description</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>NUL-padded string</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>SPACE-padded string</entry></row>
          <row>
           <entry>h</entry>
           <entry>Hex string, low nibble first</entry></row>
          <row>
           <entry>H</entry>
           <entry>Hex string, high nibble first</entry></row>
          <row><entry>c</entry><entry>signed char</entry></row>
          <row>
           <entry>C</entry>
           <entry>unsigned char</entry></row>
          <row>
           <entry>s</entry>
           <entry>signed short (always 16 bit, machine byte order)</entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>unsigned short (always 16 bit, machine byte order)</entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>unsigned short (always 16 bit, big endian byte order)</entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>unsigned short (always 16 bit, little endian byte order)</entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>signed integer (machine dependent size and byte order)</entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>unsigned integer (machine dependent size and byte order)</entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>signed long (always 32 bit, machine byte order)</entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>unsigned long (always 32 bit, machine byte order)</entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>unsigned long (always 32 bit, big endian byte order)</entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>unsigned long (always 32 bit, little endian byte order)</entry>
          </row>
          <row>
           <entry>q</entry>
           <entry>signed long long (always 64 bit, machine byte order)</entry>
          </row>
          <row>
           <entry>Q</entry>
           <entry>unsigned long long (always 64 bit, machine byte order)</entry>
          </row>
          <row>
           <entry>J</entry>
           <entry>unsigned long long (always 64 bit, big endian byte order)</entry>
          </row>
          <row>
           <entry>P</entry>
           <entry>unsigned long long (always 64 bit, little endian byte order)</entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>float (machine dependent size and representation)</entry>
          </row>
          <row>
           <entry>g</entry>
           <entry>float (machine dependent size, little endian byte order)</entry>
          </row>
          <row>
           <entry>G</entry>
           <entry>float (machine dependent size, big endian byte order)</entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>double (machine dependent size and representation)</entry>
          </row>
          <row>
           <entry>e</entry>
           <entry>double (machine dependent size, little endian byte order)</entry>
          </row>
          <row>
           <entry>E</entry>
           <entry>double (machine dependent size, big endian byte order)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>NUL byte</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>Back up one byte</entry>
          </row>
          <row>
           <entry>Z</entry>
           <entry>NUL-padded string</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>NUL-fill to absolute position</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a binary string containing data, &return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        This function no longer returns &false; on failure.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <type>float</type> and <type>double</type> types supports both Big Endian and Little Endian.
       </entry>
      </row>
      <row>
       <entry>7.0.15,7.1.1</entry>
       <entry>
        The "e", "E", "g" and "G" codes were added to enable byte order support for float and double.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pack</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     The resulting binary string will be 6 bytes long and contain
     the byte sequence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
    </para>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>Note that PHP internally stores <type>int</type> values as
    signed values of a machine-dependent size (C type <literal>long</literal>).   
    Integer literals and operations that yield numbers outside the bounds of the  
    <type>int</type> type will be stored as <type>float</type>.
    When packing these floats as integers, they are first cast into the integer   
    type. This may or may not result in the desired byte pattern.
   </para>
   <para>The most relevant case is when packing unsigned numbers that would
    be representable with the <type>int</type> type if it were unsigned.
    In systems where the <type>int</type> type has a 32-bit size, the cast
    usually results in the same byte pattern as if the <type>int</type> were
    unsigned (although this relies on implementation-defined unsigned to signed
    conversions, as per the C standard). In systems where the
    <type>int</type> type has 64-bit size, the <type>float</type> most
    likely does not have a mantissa large enough to hold the value without
    loss of precision. If those systems also have a native 64-bit C
    <literal>int</literal> type (most UNIX-like systems don't), the only way to  
    use the <literal>I</literal> pack format in the upper range is to create
    <type>int</type> negative values with the same byte representation
    as the desired unsigned value.
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
