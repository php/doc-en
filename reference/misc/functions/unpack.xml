<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.unpack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unpack</refname>
  <refpurpose>Unpack data from binary string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>unpack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Unpacks from a binary string into an array according to the given
   <parameter>format</parameter>. 
  </para>
  <para>
   The unpacked data is stored in an associative array. To
   accomplish this you have to name the different format codes and
   separate them by a slash /. If a repeater argument is present,
   then each of the array keys will have a sequence number behind
   the given name.
  </para>
  <para>
   Changes were made to bring this function into line with Perl:
   <simplelist>
    <member>
     The "a" code now retains trailing NULL bytes.
    </member>
    <member>
     The "A" code now strips all trailing ASCII whitespace (spaces, tabs,
     newlines, carriage returns, and NULL bytes).
    </member>
    <member>
     The "Z" code was added for NULL-padded strings, and removes trailing
     NULL bytes.
    </member>
   </simplelist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       See <function>pack</function> for an explanation of the format codes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       The packed data.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       The offset to begin unpacking from.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns an associative array containing unpacked elements of binary
   string, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <type>float</type> and <type>double</type> types supports both Big Endian and Little Endian.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        The optional <parameter>offset</parameter> has been added.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unpack</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = "\x04\x00\xa0\x00";
$array = unpack("cchars/nint", $binarydata);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [chars] => 4
    [int] => 160
)
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title><function>unpack</function> example with a repeater</title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = "\x04\x00\xa0\x00";
$array = unpack("c2chars/nint", $binarydata);
print_r($array);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Array
(
    [chars1] => 4
    [chars2] => 0
    [int] => 40960
)
]]>
     </screen>
    </example>
   </para>
  </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Note that PHP internally stores integral values as signed. If you
    unpack a large unsigned long and it is of the same size as PHP
    internally stored values the result will be a negative number
    even though unsigned unpacking was specified.
   </para>
  </caution>
  <caution>
   <para>
    If you do not name an element, numeric indices starting from <literal>1</literal> are used.
    Be aware that if you have more than one unnamed element, some data is
    overwritten because the numbering restarts from <literal>1</literal> for each element.
   </para>
   <para>
    <example>
     <title><function>unpack</function> example with unnamed keys</title>
     <programlisting role="php">
<![CDATA[
<?php
$binarydata = "\x32\x42\x00\xa0";
$array = unpack("c2/n", $binarydata);
var_dump($array);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
array(2) {
  [1]=>
  int(160)
  [2]=>
  int(66)
}
]]>
     </screen>
     <para>
      Note that the
      first value from the <literal>c</literal> specifier is 
      overwritten by the first value from the <literal>n</literal>
      specifier.
     </para>
    </example>
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
