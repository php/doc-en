<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1.2.2 $ -->
 
<book xml:id="book.phar" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>PHAR</title>
 
 <!-- {{{ preface -->
 <preface xml:id="phar.intro">
  &reftitle.intro;
  <para>
   The phar extension
   provides the <literal>phar</literal> stream wrapper and the <classname>Phar</classname>
   class for manipulating self-contained PHP Archive (phar) files.  The
   Phar class can be used to create and to extract contents of phar files as
   well as iterating over their contents.
  </para>
  <para>
   PHP Archive files (Phars) are special collections of files that can be transparently
   run right out of the file, similar to Java's jar archive files.  Using a phar archive,
   it is possible to distribute a complete PHP application in a single file that will
   run out of the file without modification or extraction.  Phar
   archives can also be used to store files for extraction similar to tar or zip
   archive files.  Phars support compression using gzip if the
   <link linkend="book.zlib">zlib</link> extension is present, and using bzip2 if
   the <link linkend="book.bzip2">bz2</link> extension is present.  In addition,
   iteration and other features are available if the <link linkend="book.spl">SPL</link>
   extension is available.  Phar signature verification using md5 or sha1 is natively
   supported to ensure archive integrity.
  </para>
  <para>
   The original implementation for Phar archives was in the PEAR package
   <link xlink:href="http://pear.php.net/PHP_Archive">PHP_Archive</link>, and
   the implementation details are very similar, although the Phar extension
   is more full-featured.  PHP_Archive has more flexibility in Phar creation,
   and helpful debugging tools like the <classname>PHP_Archive_Manager</classname>
   class, and the Phar extension supports iteration, array access, and
   directly manipulating Phar contents through a simple interface.  PHP_Archive
   supports creation of Phar archives that can be processed using the Phar
   extension or PHP_Archive seamlessly, whereas the Phar extension is designed
   to create extensions that function with the Phar extension.  In addition,
   the Phar extension will continue to work even if the
   <link linkend="ini.allow-url-include">allow_url_include</link> or
   <link linkend="ini.allow-url-fopen">allow_url_fopen</link> INI variables
   are disabled, while PHP_Archive-based Phar archives (without the Phar extension)
   will not function.
  </para>
 </preface>
 <!-- }}} -->
 
 &reference.phar.setup;
 &reference.phar.constants;
 &reference.phar.fileformat;
 &reference.phar.using;
 <!-- FIXME: Apparently these are 3 classess -->
 &reference.phar.reference;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

