<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="phardata.buildfromiterator" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::buildFromIterator</refname>
  <refpurpose>Construct a tar or zip archive from an iterator</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PharData::buildFromIterator</methodname>
   <methodparam><type>Traversable</type><parameter>iterator</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>baseDirectory</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Populate a tar or zip archive from an iterator.  Two styles of iterators are supported,
   iterators that map the filename within the tar/zip to the name of a file on disk,
   and iterators like DirectoryIterator that return
   SplFileInfo objects.  For iterators that return SplFileInfo objects, the second
   parameter is required.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iterator</parameter></term>
     <listitem>
      <para>
       Any iterator that either associatively maps tar/zip file to location or
       returns SplFileInfo objects
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>baseDirectory</parameter></term>
     <listitem>
      <para>
       For iterators that return SplFileInfo objects, the portion of each
       file's full path to remove when adding to the tar/zip archive
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PharData::buildFromIterator</function> returns an associative array
   mapping internal path of file to the full path of the file on the
   filesystem.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   This method returns <classname>UnexpectedValueException</classname> when the
   iterator returns incorrect values, such as an integer key instead of a
   string, a <classname>BadMethodCallException</classname> when an
   SplFileInfo-based iterator is passed without a <parameter>baseDirectory</parameter>
   parameter, or a <classname>PharException</classname> if there were errors
   saving the phar archive.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.1.0</entry>
      <entry>
       <methodname>PharData::buildFromIterator</methodname> no longer returns &false;.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>baseDirectory</parameter> is now nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>A <function>PharData::buildFromIterator</function> with SplFileInfo</title>
   <para>
    For most tar/zip archives, the archive will reflect an actual directory layout, and
    the second style is the most useful.  For instance, to create a tar/zip archive
    containing the files in this sample directory layout:
   </para>
   <para>
    <screen>
     <![CDATA[
/path/to/project/
                 config/
                        dist.xml
                        debug.xml
                 lib/
                     file1.php
                     file2.php
                 src/
                     processthing.php
                 www/
                     index.php
                 cli/
                     index.php
    ]]>
    </screen>
   </para>
   <para>
    This code could be used to add these files to the &quot;project.tar&quot; tar archive:
   </para>
   <para>
    <programlisting role="php">
     <![CDATA[
<?php
$phar = new PharData('project.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new RecursiveDirectoryIterator('/path/to/project')),
    '/path/to/project');
?>
    ]]>
    </programlisting>
   </para>
   <para>
    The file <literal>project.tar</literal> can then be used immediately.  <function>PharData::buildFromIterator</function> does not
    set values such as compression, metadata, and this can be done after creating the
    tar/zip archive.
   </para>
   <para>
    As an interesting note, <function>PharData::buildFromIterator</function> can also be used to
    copy the contents of an existing phar, tar or zip archive, as the PharData object descends
    from <classname>DirectoryIterator</classname>:
   </para>
   <para>
    <programlisting role="php">
     <![CDATA[
<?php
$phar = new PharData('project.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new Phar('/path/to/anotherphar.phar')),
    'phar:///path/to/anotherphar.phar/path/to/project');
$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));
?>
    ]]>
    </programlisting>
   </para>
  </example>
  <example>
   <title>A <function>PharData::buildFromIterator</function> with other iterators</title>
   <para>
    The second form of the iterator can be used with any iterator that returns
    a key =&gt; value mapping, such as an <classname>ArrayIterator</classname>:
   </para>
   <para>
    <programlisting role="php">
     <![CDATA[
<?php
$phar = new PharData('project.tar');
$phar->buildFromIterator(
    new ArrayIterator(
     array(
        'internal/file.php' => dirname(__FILE__) . '/somefile.php',
        'another/file.jpg' => fopen('/path/to/bigfile.jpg', 'rb'),
     )));
?>
    ]]>
    </programlisting>
   </para>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::buildFromIterator</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
