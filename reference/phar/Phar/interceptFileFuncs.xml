<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="phar.interceptfilefuncs" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::interceptFileFuncs</refname>
  <refpurpose>Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>void</type><methodname>Phar::interceptFileFuncs</methodname>
   <void/>
  </methodsynopsis>
  <para>
   instructs phar to intercept <function>fopen</function>, <function>readfile</function>,
   <function>file_get_contents</function>, <function>opendir</function>, and all of
   the stat-related functions.  If any of these functions is called from within
   a phar archive with a relative path, the call is modified to access a file
   within the phar archive.  Absolute paths are assumed to be attempts to load
   external files from the filesystem.
  </para>
  <para>
   This function makes it possible to run PHP applications designed to run off of
   a hard disk as a phar application.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   No parameters.
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
  </para>
 </refsect1>

  <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>Phar::interceptFileFuncs</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
Phar::interceptFileFuncs();
include 'phar://' . __FILE__ . '/file.php';
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Assuming that this phar is at <literal>/path/to/myphar.phar</literal> and it
   contains <literal>file.php</literal> and
   <literal>file2.txt</literal>, if <literal>file.php</literal> contains this code:
  </para>
  <para>
   <example>
    <title>A <function>Phar::interceptFileFuncs</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
echo file_get_contents('file2.txt');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Normally PHP would search the current directory for <literal>file2.txt</literal>,
   which would translate as the directory of file.php, or the current directory of
   a command-line user.  <function>Phar::interceptFileFuncs</function> instructs
   PHP to consider the current directory to be <literal>phar:///path/to/myphar.phar/</literal>
   and so opens <literal>phar:///path/to/myphar.phar/file2.txt</literal> in the above
   example code.
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
