<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="phar.createdefaultstub" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Phar::createDefaultStub</refname>
  <refpurpose>Create a phar-file format specific stub</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>string</type><methodname>Phar::createDefaultStub</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>index</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>webIndex</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>

  <para>
   This method is intended for creation of phar-file format-specific stubs, and is
   not intended for use with tar- or zip-based phar archives.
  </para>
  <para>
   Phar archives contain a bootstrap loader, or <literal>stub</literal>
   written in PHP that is executed when the archive is executed in PHP either via
   include:
   <programlisting role="php">
    <![CDATA[
<?php
include 'myphar.phar';
?>
    ]]>
   </programlisting>
   or by simple execution:
   <screen>
    <![CDATA[
php myphar.phar
    ]]>
   </screen>
  </para>
  <para>
   This method provides a simple and easy method to create a stub that will
   run a startup file from the phar archive.  In addition, different files can
   be specified for running the phar archive from the command line versus through
   a web server.  The loader stub also calls <function>Phar::interceptFileFuncs</function>
   to allow easy bundling of a PHP application that accesses the file system.  If the
   phar extension is not present, the loader stub will extract the phar archive
   to a temporary directory and then operate on the files.  A shutdown function
   erases the temporary files on exit.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>index</parameter></term>
     <listitem>
      <para>
       Relative path within the phar archive to run if accessed on the command-line
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>webIndex</parameter></term>
     <listitem>
      <para>
       Relative path within the phar archive to run if accessed through a web browser
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a string containing the contents of a customized bootstrap loader (stub)
   that allows the created Phar archive to work with or without the Phar extension
   enabled.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>UnexpectedValueException</classname> if either parameter is longer
   than 400 bytes.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>index</parameter> and <parameter>webIndex</parameter> are now nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>Phar::createDefaultStub</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $phar = new Phar('myphar.phar');
    $phar->setStub($phar->createDefaultStub('cli.php', 'web/index.php'));
} catch (Exception $e) {
    // handle errors
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::setStub</function></member>
    <member><function>Phar::getStub</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
