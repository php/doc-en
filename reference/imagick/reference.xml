<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11.2.2 $ -->
<!-- Purpose: utilspec.image -->
<!-- Membership: pecl, external -->
<!-- State: experimental -->
<part xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ref.imagick" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Imagick Image Library</title>
 <titleabbrev>Imagick Image Library</titleabbrev>

 <partintro>
<!-- {{{ Imagick intro -->
  <section xml:id="imagick.intro">
   &reftitle.intro;
   <para>
    &warn.experimental;
    Imagick is a native php extension to create and modify images using the
    ImageMagick API.
   </para>
  </section>
<!-- }}} -->
<!-- {{{ About Imagick -->
  <section xml:id="imagick.aboutimagemagick">
   <para>
    ImageMagick® is a software suite to create, edit, and compose bitmap images..
    It can read, convert and write images in a variety of formats (over 100)
    including DPX, EXR, GIF, JPEG, JPEG-2000, PDF, PhotoCD, PNG, Postscript, SVG, and TIFF.
   </para>
   <para>
    Copyright 1999-2007 ImageMagick Studio LLC, a non-profit organization dedicated to making software imaging solutions freely available.
   </para>
  </section>
<!-- }}} -->
 </partintro>

 <!-- {{{ Appendix setup -->
 &reference.imagick.install;
 <!-- }}} -->

 <!-- {{{ Appendix Examples -->
 <appendix xml:id="imagick.examples">
  <title>Imagick Examples</title>

  <section xml:id="imagick.examples-1">
   &reftitle.examples;
   <para>
    Imagick makes image manipulation in PHP extremely easy through an OO
    interface. Here is a quick example on how to make a thumbnail:
    <example>
     <title>Creating a thumbnail in Imagick</title>
     <programlisting role="php">
<![CDATA[
<?php

header('Content-type: image/jpeg');

$image = new Imagick('image.jpg');

// If 0 is provided as a width or height parameter,
// aspect ratio is maintained
$image->thumbnailImage(100, 0);

echo $image;

?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Using SPL and other OO features supported in Imagick, it can be simple
    to resize all files in a directory (useful for batch resizing large
    digital camera images to be web viewable). Here we use resize, as we might
    want to retain certain meta-data:
    <example>
     <title>Make a thumbnail of all JPG files in a directory</title>
     <programlisting role="php">
<![CDATA[
<?php

$images = new Imagick(glob('images/*.JPG'));

foreach($images as $image) {

    // Providing 0 forces thumbnailImage to maintain aspect ratio
    $image->thumbnailImage(1024,0);

}

$images->writeImages();

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    This is an example of creating a reflection of an image.
    The reflection is created by flipping the image and overlaying a gradient on it.
    Then both, the original image and the reflection is overlayed on a canvas.
    <example>
     <title>Creating a reflection of an image</title>
     <programlisting role="php">
<![CDATA[
<?php
/* Read the image */
$im = new Imagick("test.png");

/* Thumbnail the image */
$im->thumbnailImage(200, null);

/* Create a border for the image */
$im->borderImage(new ImagickPixel("white"), 5, 5);

/* Clone the image and flip it */
$reflection = $im->clone();
$reflection->flipImage();

/* Create gradient. It will be overlayd on the reflection */
$gradient = new Imagick();

/* Gradient needs to be large enough for the image and the borders */
$gradient->newPseudoImage($reflection->getImageWidth() + 10, $reflection->getImageHeight() + 10, "gradient:transparent-black");

/* Composite the gradient on the reflection */
$reflection->compositeImage($gradient, imagick::COMPOSITE_OVER, 0, 0);

/* Add some opacity. Requires ImageMagick 6.2.9 or later */
$reflection->setImageOpacity( 0.3 );

/* Create an empty canvas */
$canvas = new Imagick();

/* Canvas needs to be large enough to hold the both images */
$width = $im->getImageWidth() + 40;
$height = ($im->getImageHeight() * 2) + 30;
$canvas->newImage($width, $height, new ImagickPixel("black"));
$canvas->setImageFormat("png");

/* Composite the original image and the reflection on the canvas */
$canvas->compositeImage($im, imagick::COMPOSITE_OVER, 20, 10);
$canvas->compositeImage($reflection, imagick::COMPOSITE_OVER, 20, $im->getImageHeight() + 10);

/* Output the image*/
header("Content-Type: image/png");
echo $canvas;
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
 </appendix>
<!-- }}} -->

 <!-- {{{ Imagick constants -->
 &reference.imagick.constants;
 <!-- }}} -->

  <!-- {{{ Imagick classess -->
  &reference.imagick.imagick;
  &reference.imagick.imagickdraw;
  &reference.imagick.imagickpixel;
  &reference.imagick.imagickpixeliterator;
  <!-- }}} -->
</part>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
