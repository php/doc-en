<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1.2.1 $ -->

<chapter xml:id="imagick.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="imagick.examples-1">
  &reftitle.examples;
  <para>
   Imagick makes image manipulation in PHP extremely easy through an OO
   interface. Here is a quick example on how to make a thumbnail:
   <example>
    <title>Creating a thumbnail in Imagick</title>
    <programlisting role="php">
<![CDATA[
<?php

header('Content-type: image/jpeg');

$image = new Imagick('image.jpg');

// If 0 is provided as a width or height parameter,
// aspect ratio is maintained
$image->thumbnailImage(100, 0);

echo $image;

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Using SPL and other OO features supported in Imagick, it can be simple
   to resize all files in a directory (useful for batch resizing large
   digital camera images to be web viewable). Here we use resize, as we might
   want to retain certain meta-data:
   <example>
    <title>Make a thumbnail of all JPG files in a directory</title>
    <programlisting role="php">
<![CDATA[
<?php

$images = new Imagick(glob('images/*.JPG'));

foreach($images as $image) {

    // Providing 0 forces thumbnailImage to maintain aspect ratio
    $image->thumbnailImage(1024,0);

}

$images->writeImages();

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   This is an example of creating a reflection of an image.
   The reflection is created by flipping the image and overlaying a gradient on it.
   Then both, the original image and the reflection is overlayed on a canvas.
   <example>
    <title>Creating a reflection of an image</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Read the image */
$im = new Imagick("test.png");

/* Thumbnail the image */
$im->thumbnailImage(200, null);

/* Create a border for the image */
$im->borderImage(new ImagickPixel("white"), 5, 5);

/* Clone the image and flip it */
$reflection = $im->clone();
$reflection->flipImage();

/* Create gradient. It will be overlayd on the reflection */
$gradient = new Imagick();

/* Gradient needs to be large enough for the image and the borders */
$gradient->newPseudoImage($reflection->getImageWidth() + 10, $reflection->getImageHeight() + 10, "gradient:transparent-black");

/* Composite the gradient on the reflection */
$reflection->compositeImage($gradient, imagick::COMPOSITE_OVER, 0, 0);

/* Add some opacity. Requires ImageMagick 6.2.9 or later */
$reflection->setImageOpacity( 0.3 );

/* Create an empty canvas */
$canvas = new Imagick();

/* Canvas needs to be large enough to hold the both images */
$width = $im->getImageWidth() + 40;
$height = ($im->getImageHeight() * 2) + 30;
$canvas->newImage($width, $height, new ImagickPixel("black"));
$canvas->setImageFormat("png");

/* Composite the original image and the reflection on the canvas */
$canvas->compositeImage($im, imagick::COMPOSITE_OVER, 20, 10);
$canvas->compositeImage($reflection, imagick::COMPOSITE_OVER, 20, $im->getImageHeight() + 10);

/* Output the image*/
header("Content-Type: image/png");
echo $canvas;
?>
]]>
    </programlisting>
   </example>
  </para>
 </section>
</chapter>


