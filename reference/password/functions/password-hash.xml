<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.password-hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>password_hash</refname>
  <refpurpose>Creates a password hash</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>password_hash</methodname>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>int</type><type>null</type></type><parameter>algo</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>password_hash</function> creates a new password hash using a strong one-way hashing
   algorithm.
  </para>
  <simpara>
   The following algorithms are currently supported:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> - Use the bcrypt algorithm (default as of PHP 5.5.0).
      Note that this constant is designed to change over time as new and stronger algorithms are added
      to PHP. For that reason, the length of the result from using this identifier can change over
      time. Therefore, it is recommended to store the result in a database column that can expand
      beyond 60 characters (255 characters would be a good choice).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> - Use the <constant>CRYPT_BLOWFISH</constant> algorithm to
      create the hash. This will produce a standard <function>crypt</function> compatible hash using
      the "$2y$" identifier. The result will always be a 60 character string, &return.falseforfailure;.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> - Use the Argon2i hashing algorithm to create the hash.
      This algorithm is only available if PHP has been compiled with Argon2 support.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2ID</constant> - Use the Argon2id hashing algorithm to create the hash.
      This algorithm is only available if PHP has been compiled with Argon2 support.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   Supported options for <constant>PASSWORD_BCRYPT</constant>:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>salt</literal> (<type>string</type>) - to manually provide a salt to use when hashing the password.
      Note that this will override and prevent a salt from being automatically generated.
     </para>
     <para>
      If omitted, a random salt will be generated by <function>password_hash</function> for
      each password hashed. This is the intended mode of operation.
     </para>
     <warning>
      <para>
       The salt option is deprecated. It is now
       preferred to simply use the salt that is generated by default.
       As of PHP 8.0.0, an explicitly given salt is ignored.
      </para>
     </warning>
    </listitem>
    <listitem>
     <para>
      <literal>cost</literal> (<type>int</type>) - which denotes the algorithmic cost that should be used. 
      Examples of these values can be found on the <function>crypt</function> page.
     </para>
     <para>
      If omitted, a default value of <literal>10</literal> will be used. This is a good
      baseline cost, but you may want to consider increasing it depending on your hardware.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   Supported options for <constant>PASSWORD_ARGON2I</constant>
   and <constant>PASSWORD_ARGON2ID</constant>:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>memory_cost</literal> (<type>int</type>) - Maximum memory (in kibibytes) that may 
      be used to compute the Argon2 hash. Defaults to <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>time_cost</literal> (<type>int</type>) - Maximum amount of time it may 
      take to compute the Argon2 hash. Defaults to <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>threads</literal> (<type>int</type>) - Number of threads to use for computing 
      the Argon2 hash. Defaults to <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>.
     </para>
     <warning>
      <para>
        Only available when PHP uses libargon2, not with libsodium implementation.
      </para>
     </warning>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      &password.parameter.password;
     </para>
      <caution>
       <para>
        Using the <constant>PASSWORD_BCRYPT</constant> as the
        algorithm, will result
        in the <parameter>password</parameter> parameter being truncated to a
        maximum length of 72 bytes.
       </para>
      </caution>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algo</parameter></term>
    <listitem>
     <para>
      &password.parameter.algo;
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      &password.parameter.options;
     </para>
     <para>
      If omitted, a random salt will be created and the default cost will be
      used.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the hashed password.
  </para>
  <para>
   The used algorithm, cost and salt are returned as part of the hash. Therefore,
   all information that's needed to verify the hash is included in it. This allows
   the <function>password_verify</function> function to verify the hash without
   needing separate storage for the salt or algorithm information.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <function>password_hash</function> no longer returns &false; on failure.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        The <parameter>algo</parameter> parameter is nullable now.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        The <parameter>algo</parameter> parameter expects a &string; now, but still accepts
        &integer;s for backward compatibility.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        The sodium extension provides an alternative implementation for Argon2 passwords.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Support for Argon2id passwords using <constant>PASSWORD_ARGON2ID</constant> was added.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Support for Argon2i passwords using <constant>PASSWORD_ARGON2I</constant> was added.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>password_hash</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * We just want to hash our password using the current DEFAULT algorithm.
 * This is presently BCRYPT, and will produce a 60 character result.
 *
 * Beware that DEFAULT may change over time, so you would want to prepare
 * By allowing your storage to expand past 60 characters (255 would be good)
 */
echo password_hash("rasmuslerdorf", PASSWORD_DEFAULT);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a
]]>
    </screen>
   </example>
  </para> 
  <para>
   <example>
    <title><function>password_hash</function> example setting cost manually</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * In this case, we want to increase the default cost for BCRYPT to 12.
 * Note that we also switched to BCRYPT, which will always be 60 characters.
 */
$options = [
    'cost' => 12,
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$12$QjSH496pcT5CEbzjD/vtVeH03tfHKFy36d4J0Ltp3lRtee9HDxY3K
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>password_hash</function> example finding a good cost</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * This code will benchmark your server to determine how high of a cost you can
 * afford. You want to set the highest cost that you can without slowing down
 * you server too much. 8-10 is a good baseline, and more is good if your servers
 * are fast enough. The code below aims for ≤ 50 milliseconds stretching time,
 * which is a good baseline for systems handling interactive logins.
 */
$timeTarget = 0.05; // 50 milliseconds 

$cost = 8;
do {
    $cost++;
    $start = microtime(true);
    password_hash("test", PASSWORD_BCRYPT, ["cost" => $cost]);
    $end = microtime(true);
} while (($end - $start) < $timeTarget);

echo "Appropriate Cost Found: " . $cost;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Appropriate Cost Found: 10
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>password_hash</function> example using Argon2i</title>
    <programlisting role="php">
<![CDATA[
<?php
echo 'Argon2i hash: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Argon2i hash: $argon2i$v=19$m=1024,t=2,p=2$YzJBSzV4TUhkMzc3d3laeg$zqU/1IN0/AogfP4cmSJI1vc8lpXRW9/S0sYY2i2jHT0
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    It is strongly recommended that you do not generate your own salt for this
    function.  It will create a secure salt automatically for you if you do
    not specify one.
   </para>
   <para>
    As noted above, providing the <literal>salt</literal> option in PHP 7.0
    will generate a deprecation warning. Support for providing a salt manually
    may be removed in a future PHP release.
   </para>
  </caution>
  <note>
   <para>
    It is recommended that you test this function on your servers, and adjust the cost parameter 
    so that execution of the function takes less than 100 milliseconds on interactive systems. 
    The script in the above example will help you choose a good cost value for your hardware.
   </para>
  </note>
  <note>
   <simpara>
    Updates to supported algorithms by this function (or changes to the default one) must follow 
    the following rules:
   </simpara>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>
      Any new algorithm must be in core for at least 1 full release of PHP
      prior to becoming default. So if, for example, a new algorithm is added
      in 7.5.5, it would not be eligible for default until 7.7 (since 7.6
      would be the first full release). But if a different algorithm was added
      in 7.6.0, it would also be eligible for default at 7.7.0.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       The default should only change in a full release (7.3.0, 8.0.0, etc)
       and not in a revision release.  The only exception to this is in an
       emergency when a critical security flaw is found in the current
       default.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_verify</function></member>
    <member><function>crypt</function></member>
    <member><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="&url.password.compat;">userland implementation</link></member>
    <member><function>sodium_crypto_pwhash_str</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
