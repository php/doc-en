<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="cairocontext.textpath" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>CairoContext::textPath</refname>
  <refname>cairo_text_path</refname>
  <refpurpose>The textPath purpose</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <methodsynopsis role="oop">
   <modifier>public</modifier> <type>void</type><methodname>CairoContext::textPath</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis role="procedural">
   <type>void</type><methodname>cairo_text_path</methodname>
   <methodparam><type>CairoContext</type><parameter>context</parameter></methodparam>
   <methodparam><type>string</type><parameter>text</parameter></methodparam>
  </methodsynopsis>
  <para>
   Adds closed paths for text to the current path. The generated path, if filled,
   achieves an effect similar to that of <methodname>CairoContext::showText</methodname>.
  </para>
  <para>
   Text conversion and positioning is done similar to
   <methodname>CairoContext::showText</methodname>.
  </para>
  <para>
   Like <methodname>CairoContext::showText</methodname>,
   after this call the current point is moved to the origin of where
   the next glyph would be placed in this same progression.
   That is, the current point will be at the origin of the final
   glyph offset by its advance values. This allows for chaining multiple
   calls to <methodname>CairoContext::showText</methodname>
   without having to set current point in between.
  </para>
  <para>
   Note: The <methodname>CairoContext::textPath</methodname> function
   call is part of what the cairo designers call the "toy" text API.
   It is convenient for short demos and simple programs,
   but it is not expected to be adequate for serious text-using applications.
   See <methodname>CairoContext::glyphPath</methodname> for the "real"
   text path API in cairo.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       A <classname>CairoContext</classname> object
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>text</parameter></term>
     <listitem>
      <para>
       Description...
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Description...
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Description...
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>&style.oop;</title>
    <programlisting role="php">
<![CDATA[
<?php
/* ... */
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
...
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>&style.procedural;</title>
    <programlisting role="php">
<![CDATA[
<?php
/* ... */
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
...
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Classname::Method</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
