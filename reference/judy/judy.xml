<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<phpdoc:classref xml:id="class.judy" xmlns:phpdoc="http://php.net/ns/phpdoc" 
    xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The <classname>Judy</classname> class</title>
 <titleabbrev>Judy</titleabbrev>

 <partintro>

<!-- {{{ Judy intro -->
  <section xml:id="judy.intro">
   &reftitle.intro;
   <para>
The Judy class implements the <link linkend="class.arrayaccess">ArrayAccess</link> 
interface and the <link linkend="class.iterator">Iterator</link> interface. 
This class, once instantiated, can be accessed like a <acronym>PHP</acronym> 
<link linkend="book.array">array</link>.
   </para>
   <para xml:id="judy.types">
A PHP Judy object (or Judy Array) can be one of the following type :
<simplelist type="vert" columns="1">
 <member><link linkend="judy.constants.bitset">Judy::BITSET</link></member>
 <member><link linkend="judy.constants.int-to-int">Judy::INT_TO_INT</link></member>
 <member><link linkend="judy.constants.int-to-mixed">Judy::INT_TO_MIXED</link></member>
 <member><link linkend="judy.constants.string-to-int">Judy::STRING_TO_INT</link></member>
 <member><link linkend="judy.constants.string-to-mixed">Judy::STRING_TO_MIXED</link></member>
</simplelist>
   </para>
   <para>
    <example>
      <info><title>Judy array example</title></info>
      <programlisting role="php">
<![CDATA[
<?php
    $judy = new Judy(Judy::INT_TO_MIXED);
    $judy[1] = "one";
    $judy[2] = array('a', 'b', 'c');
    $judy[3] = new Judy(Judy::BITSET);
?>
]]>
      </programlisting>
    </example>
   </para>
  </section>
<!-- }}} -->

  <section xml:id="judy.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Judy</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Judy</classname>
     </ooclass>
     
     <oointerface>
      <interfacename>ArrayAccess</interfacename>
     </oointerface>
     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">Constants</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="judy.constants.bitset">Judy::BITSET</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="judy.constants.int-to-int">Judy::INT_TO_INT</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="judy.constants.int-to-mixed">Judy::INT_TO_MIXED</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="judy.constants.string-to-int">Judy::STRING_TO_INT</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="judy.constants.string-to-mixed">Judy::STRING_TO_MIXED</varname>
     <initializer>5</initializer>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.judy')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>
  
<!-- {{{ Judy constants -->
  <section xml:id="judy.constants">
   &reftitle.constants;
   <variablelist>

    <varlistentry xml:id="judy.constants.bitset">
     <term><constant>Judy::BITSET</constant></term>
     <listitem>
      <para>Define the Judy Array as a Bitset with keys as Integer and Values as a Boolean</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="judy.constants.int-to-int">
     <term><constant>Judy::INT_TO_INT</constant></term>
     <listitem>
      <para>Define the Judy Array with key/values as Integer, and Integer only.</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="judy.constants.int-to-mixed">
     <term><constant>Judy::INT_TO_MIXED</constant></term>
     <listitem>
      <para>Define the Judy Array with keys as Integer and Values of any type.</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="judy.constants.string-to-int">
     <term><constant>Judy::STRING_TO_INT</constant></term>
     <listitem>
      <para>Define the Judy Array with keys as a String and Values as Integer, and Integer only.</para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="judy.constants.string-to-mixed">
     <term><constant>Judy::STRING_TO_MIXED</constant></term>
     <listitem>
      <para>Define the Judy Array with keys as a String and Values of any type.</para>
     </listitem>
    </varlistentry>

   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.judy.entities.judy;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
