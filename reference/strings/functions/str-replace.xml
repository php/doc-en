<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.str-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>str_replace</refname>
  <refpurpose>Replace all occurrences of the search string with the replacement string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>array</type></type><methodname>str_replace</methodname>
   <methodparam><type class="union"><type>array</type><type>string</type></type><parameter>search</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>string</type></type><parameter>replace</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   This function returns a string or an array with all occurrences of
   <parameter>search</parameter> in <parameter>subject</parameter>
   replaced with the given <parameter>replace</parameter> value.
  </para>
  <para>
   If you don't need fancy replacing rules (like regular expressions), you
   should use this function instead of <function>preg_replace</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   If <parameter>search</parameter> and <parameter>replace</parameter> are
   arrays, then <function>str_replace</function> takes a value from each array
   and uses them to search and replace on <parameter>subject</parameter>. If
   <parameter>replace</parameter> has fewer values than
   <parameter>search</parameter>, then an empty string is used for the rest of
   replacement values. If <parameter>search</parameter> is an array and
   <parameter>replace</parameter> is a string, then this replacement string is
   used for every value of <parameter>search</parameter>. The converse would
   not make sense, though.
  </para>
  <para>
   If <parameter>search</parameter> or <parameter>replace</parameter>
   are arrays, their elements are processed first to last.
  </para>
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>search</parameter></term>
     <listitem>
      <para>
       The value being searched for, otherwise known as the <emphasis>needle</emphasis>.
       An array may be used to designate multiple needles.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replace</parameter></term>
     <listitem>
      <para>
       The replacement value that replaces found <parameter>search</parameter>
       values. An array may be used to designate multiple replacements.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       The string or array being searched and replaced on,
       otherwise known as the <emphasis>haystack</emphasis>.
      </para>
      <para>
       If <parameter>subject</parameter> is an array, then the search and
       replace is performed with every entry of
       <parameter>subject</parameter>, and the return value is an array as
       well.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       If passed, this will be set to the number of replacements performed.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   This function returns a string or an array with the replaced values.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Basic <function>str_replace</function> examples</title>
    <programlisting role="php">
<![CDATA[
<?php
// Provides: <body text='black'>
$bodytag = str_replace("%body%", "black", "<body text='%body%'>");

// Provides: Hll Wrld f PHP
$vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
$onlyconsonants = str_replace($vowels, "", "Hello World of PHP");

// Provides: You should eat pizza, beer, and ice cream every day
$phrase  = "You should eat fruits, vegetables, and fiber every day.";
$healthy = array("fruits", "vegetables", "fiber");
$yummy   = array("pizza", "beer", "ice cream");

$newphrase = str_replace($healthy, $yummy, $phrase);

// Provides: 2
$str = str_replace("ll", "", "good golly miss molly!", $count);
echo $count;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Examples of potential <function>str_replace</function> gotchas</title>
    <programlisting role="php">
<![CDATA[
<?php
// Order of replacement
$str     = "Line 1\nLine 2\rLine 3\r\nLine 4\n";
$order   = array("\r\n", "\n", "\r");
$replace = '<br />';

// Processes \r\n's first so they aren't converted twice.
$newstr = str_replace($order, $replace, $str);

// Outputs F because A is replaced with B, then B is replaced with C, and so on...
// Finally E is replaced with F, because of left to right replacements.
$search  = array('A', 'B', 'C', 'D', 'E');
$replace = array('B', 'C', 'D', 'E', 'F');
$subject = 'A';
echo str_replace($search, $replace, $subject);

// Outputs: apearpearle pear
// For the same reason mentioned above
$letters = array('a', 'p');
$fruit   = array('apple', 'pear');
$text    = 'a p';
$output  = str_replace($letters, $fruit, $text);
echo $output;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  <caution>
   <title>Replacement order gotcha</title>
   <para>
    Because <function>str_replace</function> replaces left to right, it might
    replace a previously inserted value when doing multiple replacements.
    See also the examples in this document.
   </para>
  </caution>
  <note>
   <para>
    This function is case-sensitive. Use <function>str_ireplace</function>
    for case-insensitive replace.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>str_ireplace</function></member>
    <member><function>substr_replace</function></member>
    <member><function>preg_replace</function></member>
    <member><function>strtr</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
