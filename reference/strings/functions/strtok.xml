<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.strtok" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtok</refname>
  <refpurpose>Tokenize string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>strtok</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>token</parameter></methodparam>
  </methodsynopsis>
  <simpara>Alternative signature (not supported with named arguments):</simpara>
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>strtok</methodname>
   <methodparam><type>string</type><parameter>token</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>strtok</function> splits a string (<parameter>string</parameter>)
   into smaller strings (tokens), with each token being delimited by any
   character from <parameter>token</parameter>.
   That is, if you have a string like "This is an example string" you
   could tokenize this string into its individual words by using the
   space character as the <parameter>token</parameter>.
  </para>
  <para>
   Note that only the first call to strtok uses the <parameter>string</parameter> argument.
   Every subsequent call to strtok only needs the <parameter>token</parameter> to use, as
   it keeps track of where it is in the current string.  To start
   over, or to tokenize a new string you simply call strtok with the
   <parameter>string</parameter> argument again to initialize it.  Note that you may put
   multiple tokens in the <parameter>token</parameter> parameter.  The string will be
   tokenized when any one of the characters in the <parameter>token</parameter> argument is
   found.
  </para>
  <note>
   <para>
    This function behaves slightly different from what one may expect being
    familiar with <function>explode</function>. 
    First, a sequence of two or more contiguous <parameter>token</parameter>
    characters in the parsed string is considered to be a single delimiter. 
    Also, a <parameter>token</parameter> situated at the start or end of the
    string is ignored.
    For example, if a string <literal>";aaa;;bbb;"</literal> is used, successive
    calls to <function>strtok</function> with <literal>";"</literal> as a
    <parameter>token</parameter> would return strings
    "aaa" and "bbb", and then &false;.
    As a result, the string will be split into only two elements, while
    <literal>explode(";", $string)</literal> would return an array of 5 elements.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       The <type>string</type> being split up into smaller strings (tokens).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>token</parameter></term>
     <listitem>
      <para>
       The delimiter used when splitting up <parameter>string</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   A <type>string</type> token, or &false; if no more tokens are available.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>strtok</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = "This is\tan example\nstring";
/* Use tab and newline as tokenizing characters as well  */
$tok = strtok($string, " \n\t");

while ($tok !== false) {
    echo "Word=$tok<br />";
    $tok = strtok(" \n\t");
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>strtok</function> behavior on empty part found</title>
    <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump($first_token, $second_token);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
    string(9) "something"
    bool(false)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>The difference between <function>strtok</function> and <function>explode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = ";aaa;;bbb;";

$parts = [];
$tok = strtok($string, ";");
while ($tok !== false) {
    $parts[] = $tok;
    $tok = strtok(";");
}
echo json_encode($parts),"\n";

$parts = explode(";", $string);
echo json_encode($parts),"\n";
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
["aaa","bbb"]
["","aaa","","bbb",""]
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  
  &return.falseproblem;
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>explode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
