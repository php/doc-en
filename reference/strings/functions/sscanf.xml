<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16.2.1 $ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.sscanf">
 <refnamediv>
  <refname>sscanf</refname>
  <refpurpose>Parses input from a string according to a format</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>mixed</type><methodname>sscanf</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter role="reference">...</parameter></methodparam>
  </methodsynopsis>
  <para>
   The function <function>sscanf</function> is the input analog of
   <function>printf</function>. <function>sscanf</function> reads
   from the string <parameter>str</parameter> and interprets it
   according to the specified <parameter>format</parameter>, which is
   described in the documentation for <function>sprintf</function>. If only
   two parameters were passed to this function, the values parsed
   will be returned as an array. Otherwise, if optional parameters are passed,
   the function will return the number of assigned values. The optional
   parameters must be passed by reference.
  </para>
  <para>
   Any whitespace in the format string matches any whitespace in the input
   string. This means that even a tab \t in the format string can match a
   single space character in the input string.
  </para>
  <para>
   <example>
    <title><function>sscanf</function> Example</title>
    <programlisting role="php">
<![CDATA[
<?php
// getting the serial number
list($serial) = sscanf("SN/2350001", "SN/%d");
// and the date of manufacturing
$mandate = "January 01 2000";
list($month, $day, $year) = sscanf($mandate, "%s %d %d");
echo "Item $serial was manufactured on: $year-" . substr($month, 0, 3) . "-$day\n";
?>
]]>
    </programlisting>
   </example>
   If optional parameters are passed, the function will return the
   number of assigned values.
   <example>
    <title><function>sscanf</function> - using optional parameters</title>
    <programlisting role="php">
<![CDATA[
<?php
// get author info and generate DocBook entry
$auth = "24\tLewis Carroll";
$n = sscanf($auth, "%d\t%s %s", $id, $first, $last);
echo "<author id='$id'>
    <firstname>$first</firstname>
    <surname>$last</surname>
</author>\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   See also <function>fscanf</function>, <function>printf</function>,
   and <function>sprintf</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
