<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.utf8-encode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>utf8_encode</refname>
  <refpurpose>Converts a string from ISO-8859-1 to UTF-8</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &warn.deprecated.function-8-2-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier role="attribute">#[\Deprecated]</modifier>
   <type>string</type><methodname>utf8_encode</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function converts the string <parameter>string</parameter> from the
   <literal>ISO-8859-1</literal> encoding to <literal>UTF-8</literal>.
  </para>

  <note>
   <para>
    This function does not attempt to guess the current encoding of the provided
    string, it assumes it is encoded as ISO-8859-1 (also known as "Latin 1")
    and converts to UTF-8. Since every sequence of bytes is a valid ISO-8859-1
    string, this never results in an error, but will not result in a useful string
    if a different encoding was intended.
   </para>
   <para>
    Many web pages marked as using the <literal>ISO-8859-1</literal> character
    encoding actually use the similar <literal>Windows-1252</literal> encoding,
    and web browsers will interpret <literal>ISO-8859-1</literal> web pages as
    <literal>Windows-1252</literal>. <literal>Windows-1252</literal> features
    additional printable characters, such as the Euro sign
    (<literal>€</literal>) and curly quotes (<literal>“</literal>
    <literal>”</literal>), instead of certain <literal>ISO-8859-1</literal>
    control characters. This function will not convert such
    <literal>Windows-1252</literal> characters correctly. Use a different
    function if <literal>Windows-1252</literal> conversion is required.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       An ISO-8859-1 string.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the UTF-8 translation of <parameter>string</parameter>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.2.0</entry>
       <entry>
        This function has been deprecated.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        This function has been moved from the XML extension to the core of PHP.
        In previous versions, it was only available if the XML extension was installed.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Basic example</title>
   <programlisting role="php">
<![CDATA[
<?php
// Convert the string 'Zoë' from ISO 8859-1 to UTF-8
$iso8859_1_string = "\x5A\x6F\xEB";
$utf8_string = utf8_encode($iso8859_1_string);
echo bin2hex($utf8_string), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
5a6fc3ab
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Deprecation and alternatives</title>
   <para>
    This function is <emphasis>deprecated</emphasis> as of PHP 8.2.0,
    and will be removed in a future version. Existing uses should be checked
    and replaced with appropriate alternatives.
   </para>
   <para>
    Similar functionality can be achieved with <function>mb_convert_encoding</function>,
    which supports ISO-8859-1 and many other character encodings.
    <informalexample>
     <programlisting role="php">
 <![CDATA[
<?php
$iso8859_1_string = "\xEB"; // 'ë' (e with diaeresis) in ISO-8859-1
$utf8_string = mb_convert_encoding($iso8859_1_string, 'UTF-8', 'ISO-8859-1');
echo bin2hex($utf8_string), "\n";

$iso8859_7_string = "\xEB"; // the same string in ISO-8859-7 represents 'λ' (Greek lower-case lambda)
$utf8_string = mb_convert_encoding($iso8859_7_string, 'UTF-8', 'ISO-8859-7');
echo bin2hex($utf8_string), "\n";

$windows_1252_string = "\x80"; // '€' (Euro sign) in Windows-1252, but not in ISO-8859-1
$utf8_string = mb_convert_encoding($windows_1252_string, 'UTF-8', 'Windows-1252');
echo bin2hex($utf8_string), "\n";
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
c3ab
cebb
e282ac
]]>
     </screen>
    </informalexample>
   </para>
   <para>
    Other options which may be available depending on the extensions installed are
    <methodname>UConverter::transcode</methodname> and <function>iconv</function>.
   </para>
   <para>
    The following all give the same result:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$iso8859_1_string = "\x5A\x6F\xEB"; // 'Zoë' in ISO-8859-1

$utf8_string = utf8_encode($iso8859_1_string);
echo bin2hex($utf8_string), "\n";

$utf8_string = mb_convert_encoding($iso8859_1_string, 'UTF-8', 'ISO-8859-1');
echo bin2hex($utf8_string), "\n";

$utf8_string = UConverter::transcode($iso8859_1_string, 'UTF8', 'ISO-8859-1');
echo bin2hex($utf8_string), "\n";

$utf8_string = iconv('ISO-8859-1', 'UTF-8', $iso8859_1_string);
echo bin2hex($utf8_string), "\n";
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
5a6fc3ab
5a6fc3ab
5a6fc3ab
5a6fc3ab
]]>
     </screen>
    </informalexample>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>utf8_decode</function></member>
    <member><function>mb_convert_encoding</function></member>
    <member><methodname>UConverter::transcode</methodname></member>
    <member><function>iconv</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
