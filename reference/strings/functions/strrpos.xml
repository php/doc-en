<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.strrpos">
 <refnamediv>
  <refname>strrpos</refname>
  <refpurpose>Find the position of the last occurrence of a substring in a string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>strrpos</methodname>
   <methodparam><type>string</type><parameter>haystack</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>needle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Find the numeric position of the last occurrence of
   <parameter>needle</parameter> in the <parameter>haystack</parameter> string.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>haystack</parameter></term>
     <listitem>
      <para>
       The string to search in.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>needle</parameter></term>
     <listitem>
      &strings.parameter.needle.non-string;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para> 
       If zero or positive, the search is performed left to right skipping the
       first <parameter>offset</parameter> bytes of the
       <parameter>haystack</parameter>.
      </para>
      <para>
       If negative, the search is performed right to left skipping the
       last <parameter>offset</parameter> bytes of the
       <parameter>haystack</parameter> and searching for the first occurrence
       of <parameter>needle</parameter>.
       <note>
        <para>
         This is effectively looking for the last occurrence of
         <parameter>needle</parameter> before the last
         <parameter>offset</parameter> bytes.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the position where the needle exists relative to the beginning of
   the <parameter>haystack</parameter> string (independent of search direction
   or offset).
   <note>
    <simpara>
     String positions start at 0, and not 1.
    </simpara>
   </note>
  </para>
  <para>
   Returns &false; if the needle was not found.
  </para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Passing an &integer; as <parameter>needle</parameter> has been deprecated.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Checking if a needle is in the haystack</title>
    <para>
     It is easy to mistake the return values for "character found at
     position 0" and "character not found".  Here's how to detect
     the difference:
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$pos = strrpos($mystring, "b");
if ($pos === false) { // note: three equal signs
    // not found...
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Searching with offsets</title>
    <programlisting role="php">
<![CDATA[
<?php
$foo = "0123456789a123456789b123456789c";

// Looking for '0' from the 0th byte (from the beginning)
var_dump(strrpos($foo, '0', 0));

// Looking for '0' from the 1st byte (after byte "0")
var_dump(strrpos($foo, '0', 1));

// Looking for '7' from the 21th byte (after byte 20)
var_dump(strrpos($foo, '7', 20));

// Looking for '7' from the 29th byte (after byte 28)
var_dump(strrpos($foo, '7', 28));

// Looking for '7' right to left from the 5th byte from the end
var_dump(strrpos($foo, '7', -5));

// Looking for 'c' right to left from the 2nd byte from the end
var_dump(strrpos($foo, 'c', -2));

// Looking for '9c' right to left from the 2nd byte from the end
var_dump(strrpos($foo, '9c', -2));
?>
]]>
    </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(0)
bool(false)
int(27)
bool(false)
int(17)
bool(false)
int(29)
]]>
   </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strpos</function></member>
    <member><function>stripos</function></member>
    <member><function>strripos</function></member>
    <member><function>strrchr</function></member>
    <member><function>substr</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
