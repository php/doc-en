<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.echo">
 <refnamediv>
  <refname>echo</refname>
  <refpurpose>Output one or more strings</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>echo</methodname>
   <methodparam><type>string</type><parameter>arg</parameter></methodparam>
   <methodparam rep="repeat"><type>string</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Outputs all parameters. No additional newline is appended.
  </simpara>
  <para>
   <literal>echo</literal> is not actually a function (it is a
   language construct), so you are not required to use parentheses
   with it. <literal>echo</literal> (unlike some other language
   constructs) does not behave like a function, so it cannot
   always be used in the context of a function. Additionally, if you want to
   pass more than one parameter to <literal>echo</literal>, the parameters
   must not be enclosed within parentheses.
  </para>
  <para>
   <literal>echo</literal> also has a shortcut syntax, where you can
   immediately follow the opening tag with an equals sign. Prior to PHP 5.4.0,
   this short syntax only works with the
   <link linkend="ini.short-open-tag">short_open_tag</link> configuration
   setting enabled.
   <informalexample>
    <programlisting role="php">
<![CDATA[
I have <?=$foo?> foo.
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   The major differences to <literal>print</literal> are that
   <literal>echo</literal> accepts an argument list and doesn't have a return value.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       The parameter to output.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><literal>echo</literal> examples</title>
    <programlisting role="php">
<![CDATA[
<?php
echo "Hello World";

// Strings can either be passed individually as multiple arguments or
// concatenated together and passed as a single argument
echo 'This ', 'string ', 'was ', 'made ', 'with multiple parameters.', chr(10);
echo 'This ' . 'string ' . 'was ' . 'made ' . 'with concatenation.' . "\n";

// Because echo does not behave like a function, the following code is invalid.
($some_var) ? echo 'true' : echo 'false';

// However, the following examples will work:
($some_var) ? print 'true' : print 'false'; // print is also a construct, but
                                            // it behaves like a function, so
                                            // it may be used in this context.

echo $some_var ? 'true': 'false'; // changing the statement around
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <tip>
   <para>
    A benefit to passing in multiple arguments over using concatenation in
    <function>echo</function> regards the precedence of the period operator in
    PHP. If multiple arguments are passed in, then parentheses will not be
    required to enforce precedence:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
echo "Sum: ", 1 + 2;
echo "Hello ", isset($name) ? $name : "John Doe", "!";
]]>
   </programlisting>

   <para>
    With concatenation, the period operator has the same precedence as
    the addition operator, and higher precedence than the ternary operator, so parentheses must be used for the
    correct behaviour:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
echo 'Sum: ' . (1 + 2);
echo 'Hello ' . (isset($name) ? $name : 'John Doe') . '!';
]]>
   </programlisting>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>print</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string.syntax.heredoc">Heredoc syntax</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
