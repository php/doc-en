<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.substr-replace">
 <refnamediv>
  <refname>substr_replace</refname>
  <refpurpose>Replace text within a portion of a string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>substr_replace</methodname>
   <methodparam><type>mixed</type><parameter>string</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>start</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>length</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>substr_replace</function> replaces a copy of
   <parameter>string</parameter> delimited by the
   <parameter>start</parameter> and (optionally)
   <parameter>length</parameter> parameters with the string given in
   <parameter>replacement</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       The input string.
      </para>
      <para>
       An <type>array</type> of <type>string</type>s can be provided, in which
       case the replacements will occur on each string in turn. In this case,
       the <parameter>replacement</parameter>, <parameter>start</parameter>
       and <parameter>length</parameter> parameters may be provided either as
       scalar values to be applied to each input string in turn, or as
       <type>array</type>s, in which case the corresponding array element will
       be used for each input string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement</parameter></term>
     <listitem>
      <para>
       The replacement string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>start</parameter></term>
     <listitem>
      <para>
       If <parameter>start</parameter> is non-negative, the replacing will
       begin at the <parameter>start</parameter>'th offset into
       <parameter>string</parameter>.
      </para>
      <para>
       If <parameter>start</parameter> is negative, the replacing will
       begin at the <parameter>start</parameter>'th character from the
       end of <parameter>string</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       If given and is positive, it represents the length of the portion of
       <parameter>string</parameter> which is to be replaced. If it is
       negative, it represents the number of characters from the end of
       <parameter>string</parameter> at which to stop replacing. If it
       is not given, then it will default to strlen(
       <parameter>string</parameter> ); i.e. end the replacing at the
       end of <parameter>string</parameter>. Of course, if
       <parameter>length</parameter> is zero then this function will have the
       effect of inserting <parameter>replacement</parameter> into
       <parameter>string</parameter> at the given
       <parameter>start</parameter> offset.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   The result string is returned. If <parameter>string</parameter> is an
   array then array is returned.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Simple <function>substr_replace</function> examples</title>
    <programlisting role="php">
<![CDATA[
<?php
$var = 'ABCDEFGH:/MNRPQR/';
echo "Original: $var<hr />\n";

/* These two examples replace all of $var with 'bob'. */
echo substr_replace($var, 'bob', 0) . "<br />\n";
echo substr_replace($var, 'bob', 0, strlen($var)) . "<br />\n";

/* Insert 'bob' right at the beginning of $var. */
echo substr_replace($var, 'bob', 0, 0) . "<br />\n";

/* These next two replace 'MNRPQR' in $var with 'bob'. */
echo substr_replace($var, 'bob', 10, -1) . "<br />\n";
echo substr_replace($var, 'bob', -7, -1) . "<br />\n";

/* Delete 'MNRPQR' from $var. */
echo substr_replace($var, '', 10, -1) . "<br />\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Using <function>substr_replace</function> to replace multiple strings at
     once
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$input = array('A: XXX', 'B: XXX', 'C: XXX');

// A simple case: replace XXX in each string with YYY.
echo implode('; ', substr_replace($input, 'YYY', 3, 3))."\n";

// A more complicated case where each replacement is different.
$replace = array('AAA', 'BBB', 'CCC');
echo implode('; ', substr_replace($input, $replace, 3, 3))."\n";

// Replace a different number of characters each time.
$length = array(1, 2, 3);
echo implode('; ', substr_replace($input, $replace, 3, $length))."\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: YYY; B: YYY; C: YYY
A: AAA; B: BBB; C: CCC
A: AAAXX; B: BBBX; C: CCC
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>str_replace</function></member>
    <member><function>substr</function></member>
    <member><link linkend="language.types.string.substr">String access and modification by character</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
