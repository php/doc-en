<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.strcspn" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>strcspn</refname>
  <refpurpose>Find length of initial segment not matching mask</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>strcspn</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>characters</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>length</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Returns the length of the initial segment of
   <parameter>string</parameter> which does <emphasis>not</emphasis>
   contain any of the characters in <parameter>characters</parameter>.
  </para>
  <para>
   If <parameter>offset</parameter> and <parameter>length</parameter>
   are omitted, then all of <parameter>string</parameter> will be
   examined. If they are included, then the effect will be the same as
   calling <literal>strcspn(substr($string, $offset, $length),
   $characters)</literal> (see <xref linkend="function.substr"/>
   for more information).
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       The string to examine.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>characters</parameter></term>
     <listitem>
      <para>
       The string containing every disallowed character.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       The position in <parameter>string</parameter> to
       start searching.
      </para>
      <para>
       If <parameter>offset</parameter> is given and is non-negative,
       then <function>strcspn</function> will begin
       examining <parameter>string</parameter> at
       the <parameter>offset</parameter>'th position. For instance, in
       the string '<literal>abcdef</literal>', the character at
       position <literal>0</literal> is '<literal>a</literal>', the
       character at position <literal>2</literal> is
       '<literal>c</literal>', and so forth.
      </para>
      <para>
       If <parameter>offset</parameter> is given and is negative,
       then <function>strcspn</function> will begin
       examining <parameter>string</parameter> at
       the <parameter>offset</parameter>'th position from the end
       of <parameter>string</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       The length of the segment from <parameter>string</parameter>
       to examine. 
      </para>
      <para>
       If <parameter>length</parameter> is given and is non-negative,
       then <parameter>string</parameter> will be examined
       for <parameter>length</parameter> characters after the starting
       position.
      </para>
      <para>
       If <parameter>length</parameter> is given and is negative,
       then <parameter>string</parameter> will be examined from the
       starting position up to <parameter>length</parameter>
       characters from the end of <parameter>string</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the length of the initial segment of <parameter>string</parameter>
   which consists entirely of characters <emphasis>not</emphasis> in <parameter>characters</parameter>.
  </para>
  <note>
   <para>
    When a <parameter>offset</parameter> parameter is set, the returned length
    is counted starting from this position, not from the beginning of
    <parameter>string</parameter>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>length</parameter> is nullable now.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="strcspn.example">
   <title><function>strcspn</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = strcspn('abcd',  'apple');
$b = strcspn('abcd',  'banana');
$c = strcspn('hello', 'l');
$d = strcspn('hello', 'world');
$e = strcspn('abcdhelloabcd', 'abcd', -9);
$f = strcspn('abcdhelloabcd', 'abcd', -9, -5);

var_dump($a);
var_dump($b);
var_dump($c);
var_dump($d);
var_dump($e);
var_dump($f);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(0)
int(0)
int(2)
int(2)
int(5)
int(4)
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strspn</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
