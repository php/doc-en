<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.str-ireplace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>str_ireplace</refname>
  <refpurpose>Case-insensitive version of <function>str_replace</function></refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>array</type></type><methodname>str_ireplace</methodname>
   <methodparam><type class="union"><type>array</type><type>string</type></type><parameter>search</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>string</type></type><parameter>replace</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   This function returns a string or an array with all occurrences of
   <parameter>search</parameter> in <parameter>subject</parameter>
   (ignoring case) replaced with the given <parameter>replace</parameter>
   value.  If you don't need fancy replacing rules, you should generally
   use this function instead of
   <function>preg_replace</function> with the <literal>i</literal> modifier.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   If <parameter>search</parameter> and <parameter>replace</parameter> are
   arrays, then <function>str_ireplace</function> takes a value from each
   array and uses them to search and replace on
   <parameter>subject</parameter>. If <parameter>replace</parameter> has fewer
   values than <parameter>search</parameter>, then an empty string is used for
   the rest of replacement values. If <parameter>search</parameter> is an
   array and <parameter>replace</parameter> is a string, then this replacement
   string is used for every value of <parameter>search</parameter>. The
   converse would not make sense, though.
  </para>
  <para>
   If <parameter>search</parameter> or <parameter>replace</parameter>
   are arrays, their elements are processed first to last.
  </para>
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>search</parameter></term>
     <listitem>
      <para>
       The value being searched for, otherwise known as the
       <emphasis>needle</emphasis>.  An array may be used to designate
       multiple needles.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replace</parameter></term>
     <listitem>
      <para>
       The replacement value that replaces found <parameter>search</parameter>
       values. An array may be used to designate multiple replacements.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       The string or array being searched and replaced on,
       otherwise known as the <emphasis>haystack</emphasis>.
      </para>
      <para>
       If <parameter>subject</parameter> is an array, then the search and
       replace is performed with every entry of 
       <parameter>subject</parameter>, and the return value is an array as
       well.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       If passed, this will be set to the number of replacements performed.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a string or an array of replacements.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>str_ireplace</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$bodytag = str_ireplace("%body%", "black", "<body text=%BODY%>");
echo $bodytag; // <body text=black>
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  <caution>
   <title>Replacement order gotcha</title>
   <para>
    Because <function>str_ireplace</function> replaces left to right, it might
    replace a previously inserted value when doing multiple replacements.
    Example #2 in the <function>str_replace</function> documentation
    demonstrates how this may affect you in practice.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>str_replace</function></member>
    <member><function>preg_replace</function></member>
    <member><function>strtr</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
