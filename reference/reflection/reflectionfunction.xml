<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.1.2.1 $ -->
<reference xml:id="class.reflectionfunction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>The ReflectionFunction class</title>
 <titleabbrev>ReflectionFunction</titleabbrev>

 <partintro>
<!-- {{{ ReflectionFunction intro -->
  <section xml:id="class.reflectionfunction.intro">
   &reftitle.intro;
   <para>
    The <classname>ReflectionFunction</classname> class lets you reverse-engineer functions.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="class.reflectionfunction.synopsis">
   <title>Class synopsis</title>
   <classsynopsis>
<!-- {{{ hier -->
    <ooclass><classname>ReflectionFunction</classname></ooclass>
    <classsynopsisinfo>
     <ooclass>
      <classname>ReflectionFunction</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>ReflectionFunctionAbstract</classname>
     </ooclass>
     <oointerface>
      <interfacename>Reflector</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.reflectionfunction.props')/descendant::db:fieldsynopsis)" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.reflectionfunction')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
    <classsynopsisinfo>Inherited methods</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.reflectionfunctionabstract')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
  </section>

<!-- {{{ ReflectionFunction properties -->
  <section xml:id="class.reflectionfunction.props">
   &reftitle.properties;
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Property</entry>
       <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <fieldsynopsis>
         <modifier>public</modifier>
         <type>string</type>
         <varname>name</varname>
        </fieldsynopsis>
       </entry>
       <entry>The name of the reflected function</entry>
      </row>
     </tbody>

    </tgroup>
   </informaltable>
  </section>
<!-- }}} -->

<!-- {{{ ReflectionFunction Changelog -->
  <section xml:id="reflectionfunction.changelog" role="changelog">
   &reftitle.changelog;
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>5.1.0</entry>
        <entry>
         <methodname>ReflectionFunction::invokeArgs</methodname> added.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </section>
<!-- }}} -->
<!-- {{{ ReflectionFunction Usage -->
  <section xml:id="reflectionfunction.usage">
   <title>Basic usage</title>
   <para>
    To introspect a function, you will first have to create an instance
    of the <classname>ReflectionFunction</classname> class. You can then call
    any of the above methods on this instance.
   </para>
   <example>
    <title>Using the <classname>ReflectionFunction</classname> class</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
* A simple counter
*
* @return  int
*/
function counter() {
    static $c = 0;
    return $c++;
}

// Create an instance of the Reflection_Function class
$func = new ReflectionFunction('counter');

// Print out basic information
printf(
 "===> The %s function '%s'\n".
 "   declared in %s\n".
 "   lines %d to %d\n",
 $func->isInternal() ? 'internal' : 'user-defined',
 $func->getName(),
 $func->getFileName(),
 $func->getStartLine(),
 $func->getEndline()
);

// Print documentation comment
printf("---> Documentation:\n %s\n", var_export($func->getDocComment(), 1));

// Print static variables if existant
if ($statics = $func->getStaticVariables()) {
    printf("---> Static variables: %s\n", var_export($statics, 1));
}

// Invoke the function
printf("---> Invokation results in: ");
var_dump($func->invoke());


// you may prefer to use the export() method
echo "\nReflectionFunction::export() results:\n";
echo ReflectionFunction::export('counter');
?>
]]>
    </programlisting>
   </example>
  </section>
<!-- }}} -->
 </partintro>
 &reference.reflection.reflectionfunction.entities;
<!-- {{{ methods
 &function.reflectionfunction-__construct;
 &function.reflectionfunction-__tostring;
 &function.reflectionfunction-export;
 &function.reflectionfunction-invokeargs;
 &function.reflectionfunction-invoke;
 &function.reflectionfunction-isdisabled;
}}} -->
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

