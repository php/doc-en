<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.ob-list-handlers">
 <refnamediv>
  <refname>ob_list_handlers</refname>
  <refpurpose>List all output handlers in use</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>ob_list_handlers</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Lists all output handlers in use.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   This will return an array with the output handlers in use (if any).
  </para>
  <para>
   If <link linkend="ini.output-buffering">output_buffering</link> is enabled
   and no <link linkend="ini.output-handler">output_handler</link> is set,
   or no callback or <literal>null</literal> was passed to <function>ob_start</function>,
   "default output handler" is returned.
   Enabling <link linkend="ini.output-buffering">output_buffering</link>
   and setting an <link linkend="ini.output-handler">output_handler</link>
   is equivalent to passing
   an <link linkend="functions.internal">internal (built-in) function</link>
   to <function>ob_start</function> (see below).
  </para>
  <para>
   If an <link linkend="functions.anonymous">anonymous function</link>,
   an <link linkend="functions.arrow">arrow function</link>
   or a <link linkend="functions.first_class_callable_syntax">first class callable</link>
   was passed to <function>ob_start</function>,
   "Closure::__invoke" is returned.
  </para>
  <para>
   If an <link linkend="functions.internal">internal (built-in) function</link>
   or a <link linkend="functions.user-defined">user-defined function</link>
   callback was passed to <function>ob_start</function>,
   then the <link linkend="language.namespaces.basics">fully qualified name</link>
   of the function is returned.
  </para>
  <para>
   If an <link linkend="language.oop5.basic">class and method name</link>
   or an <link linkend="language.oop5.basic">object and method name</link>
   was passed to <function>ob_start</function>,
   then the <link linkend="language.namespaces.basics">fully qualified name</link>
   of the method is returned.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>ob_list_handlers</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// using output_buffering=On
print_r(ob_list_handlers());
ob_end_flush();

// no callback or null
ob_start();
print_r(ob_list_handlers());
ob_end_flush();

// anonymous function
ob_start(function($string) { return $string; });
print_r(ob_list_handlers());
ob_end_flush();

// arrow function
ob_start(fn($string) => $string);
print_r(ob_list_handlers());
ob_end_flush();

// first class callable
$firstClassCallable = userDefinedFunction(...);

ob_start([$firstClassCallable, '__invoke']);
print_r(ob_list_handlers());
ob_end_flush();

// internal (built-in) function
ob_start('print_r');
print_r(ob_list_handlers());
ob_end_flush();

// user-defined function
function userDefinedFunction($string, $flags) { return $string; };

ob_start('userDefinedFunction');
print_r(ob_list_handlers());
ob_end_flush();


class MyClass {
    public static function staticHandle($string) {
        return $string;
    }

    public static function handle($string) {
        return $string;
    }
}

// class and static method
ob_start(['MyClass','staticHandle']);
print_r(ob_list_handlers());
ob_end_flush();

// object and non-static method
ob_start([new MyClass,'handle']);
print_r(ob_list_handlers());
ob_end_flush();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => default output handler
)
Array
(
    [0] => default output handler
)
Array
(
    [0] => Closure::__invoke
)
Array
(
    [0] => Closure::__invoke
)
Array
(
    [0] => Closure::__invoke
)
Array
(
    [0] => print_r
)
Array
(
    [0] => userDefinedFunction
)
Array
(
    [0] => MyClass::staticHandle
)
Array
(
    [0] => MyClass::handle
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_get_flush</function></member>
    <member><function>ob_start</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
