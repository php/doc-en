<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongocollection.batchinsert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::batchInsert</refname>
  <refpurpose>Inserts multiple documents into this collection</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>MongoCollection::batchInsert</methodname>
   <methodparam><type>array</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       An array of arrays or objects. If any objects are used, they may not have
       protected or private properties.
      </para>
      <note>
       <para>
        If the documents to insert do not have an <literal>_id</literal> key or
        property, a new <classname>MongoId</classname> instance will be created
        and assigned to it. See <function>MongoCollection::insert</function> for
        additional information on this behavior.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       An array of options for the batch of insert operations. Currently
       available options include:
       <itemizedlist>
        <listitem>
         <para>
          <literal>"continueOnError"</literal>
         </para>
         <para>
          Boolean, defaults to &false;. If set, the database will not stop
          processing a bulk insert if one fails (eg due to duplicate IDs).
          This makes bulk insert behave similarly to a series of single
          inserts, except that calling <function>MongoDB::lastError</function>
          will have an error set if any insert fails, not just the last one.
          If multiple errors occur, only the most recent will be reported by
          <function>MongoDB::lastError</function>.
         </para>
         <note>
          <para>
           Please note that <literal>continueOnError</literal> affects errors
           on the database side only. If you try to insert a document that has
           errors (for example it contains a key with an empty name), then the
           document is not even transferred to the database as the driver
           detects this error and bails out.
           <literal>continueOnError</literal> has no effect on errors detected
           in the documents by the driver.
          </para>
         </note>
        </listitem>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
        &mongo.writes.parameters.sockettimeoutms;
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeoutms;
       </itemizedlist>
      </para>
      <para>
       The following options are deprecated and should no longer be used:
       <itemizedlist>
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
        &mongo.writes.parameters.writeconcerntimeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   If the <literal>w</literal> parameter is set to acknowledge the write,
   returns an associative array with the status of the inserts ("ok") and any
   error that may have occurred ("err").  Otherwise, returns &true; if the
   batch insert was successfully sent, &false; otherwise.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>MongoException</classname> if any inserted documents are
   empty or if they contains zero-length keys. Attempting to insert an object
   with protected and private properties will cause a zero-length key error.
  </para>
  &mongo.errors.exceptions.writeconcern;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.5.0</entry>
       <entry>
        <para>
         Added the <literal>"wTimeoutMS"</literal> option, which replaces
         <literal>"wtimeout"</literal>. Emits <constant>E_DEPRECATED</constant>
         when <literal>"wtimeout"</literal> is used.
        </para>
        <para>
         Added the <literal>"socketTimeoutMS"</literal> option, which replaces
         <literal>"timeout"</literal>. Emits <constant>E_DEPRECATED</constant>
         when <literal>"timeout"</literal> is used.
        </para>
        <para>
         Emits <constant>E_DEPRECATED</constant> when <literal>"safe"</literal>
         is used.
        </para>
       </entry>
      </row>
      <row>
       <entry>1.3.4</entry>
       <entry>Added <literal>"wtimeout"</literal> option.</entry>
      </row>
      <row>
       <entry>1.3.0</entry>
       <entry>Added <literal>"w"</literal> option.</entry>
      </row>
      <row>
       <entry>1.2.7</entry>
       <entry>Added <literal>"continueOnError"</literal> option.</entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        <para>
         Added ability to pass integers to the <literal>"safe"</literal> option,
         which previously only accepted booleans.
        </para>
        <para>
         Added <literal>"fsync"</literal> option.
        </para>
       </entry>
      </row>
      <row>
       <entry>1.0.5</entry>
       <entry>Added <parameter>options</parameter> parameter.</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::batchInsert</function> example</title>
   <para>
    Batch insertion is a quick way to add many elements to the database at once
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$users = array();
for ($i = 0; $i<100; $i++) {
  $users[] = array('username' => 'user'.$i, 'i' => $i);
}

$mongo = new MongoClient();
$collection = $mongo->my_db->users;
$collection->drop();

$collection->batchInsert($users);

foreach ($users as $user) {
  echo $user['_id']."\n"; // populated with instanceof MongoId
}

$users = $collection->find()->sort(array('i' => 1));
foreach ($users as $user) {
    var_dump($user['username']);
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
4bf43ac68ead0e1971000000
4bf43ac68ead0e1971010000
4bf43ac68ead0e1971020000
...
string(5) "user1"
string(5) "user2"
string(5) "user3"
...
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoCollection::batchInsert</function> example with
   ignoring errors</title>
   <programlisting role="php">
<![CDATA[
<?php

$con = new Mongo;
$db = $con->demo;

$doc1 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010001'),
        'id' => 1,
        'desc' => "ONE",
);
$doc2 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'),
        'id' => 2,
        'desc' => "TWO",
);
$doc3 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'), // same _id as above
        'id' => 3,
        'desc' => "THREE",
);
$doc4 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010004'),
        'id' => 4,
        'desc' => "FOUR",
);

$c = $db->selectCollection('c');
$c->batchInsert(
    array($doc1, $doc2, $doc3, $doc4),
    array('continueOnError' => true)
);

$docs = $c->find();
foreach ($docs as $doc) {
    var_dump($doc['desc']);
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
string(3) "ONE"
string(3) "TWO"
string(4) "FOUR"
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::insert</function></member>
   <member><function>MongoCollection::update</function></member>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::remove</function></member>
   <member>MongoDB core docs on <link xlink:href="&url.mongodb.dochub.insert;">insert</link>.</member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
