<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongodb.command" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB::command</refname>
  <refpurpose>Execute a database command</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoDB::command</methodname>
   <methodparam><type>array</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">hash</parameter></methodparam>
  </methodsynopsis>
  <para>
   Almost everything that is not a CRUD operation can be done with a database
   command.  Need to know the database version?  There's a command for that.
   Need to do aggregation?  There's a command for that.  Need to turn up
   logging?  You get the idea.
  </para>
  <para>
   This method is identical to:
   <programlisting role="php">
<![CDATA[
<?php

public function command($data) {
    return $this->selectCollection('$cmd')->findOne($data);
}

?>
]]>
   </programlisting>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>command</parameter>
     </term>
     <listitem>
      <para>
       The query to send.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       An array of options for the index creation. Currently available options
       include:
       <itemizedlist>
        &mongo.writes.parameters.sockettimeoutms;
       </itemizedlist>
      </para>
      <para>
       The following options are deprecated and should no longer be used:
       <itemizedlist>
        &mongo.writes.parameters.timeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>hash</parameter>
     </term>
     <listitem>
      <para>
       Set to the connection hash of the server that executed the command. When
       the command result is suitable for creating a
       <classname>MongoCommandCursor</classname>, the hash is intended to be
       passed to <function>MongoCommandCursor::createFromDocument</function>.
      </para>
      <para>
       The hash will also correspond to a connection returned from
       <function>MongoClient::getConnections</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.5.0</entry>
       <entry>
        <para>
         Renamed the <literal>"timeout"</literal> option to
         <literal>"socketTimeoutMS"</literal>. Emits
         <constant>E_DEPRECATED</constant> when <literal>"timeout"</literal> is
         used.
        </para>
        <para>
         Added <literal>hash</literal> by-reference parameter.
        </para>
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Added <literal>options</literal> parameter with a single option:
        <literal>"timeout"</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns database response. Every database response is always maximum one
   document, which means that the result of a database command can never
   exceed 16MB. The resulting document's structure depends on the command, but
   most results will have the <literal>ok</literal> field to indicate success
   or failure and <literal>results</literal> containing an array of each of
   the resulting documents.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoDB::command</function> "distinct" example</title>
   <para>
    Finding all of the distinct values for a key.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$people = $db->people;

$people->insert(array("name" => "Joe", "age" => 4));
$people->insert(array("name" => "Sally", "age" => 22));
$people->insert(array("name" => "Dave", "age" => 22));
$people->insert(array("name" => "Molly", "age" => 87));

$ages = $db->command(array("distinct" => "people", "key" => "age"));

foreach ($ages['values'] as $age) {
    echo "$age\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
4
22
87
   </screen>
  </example>

  <example>
   <title><function>MongoDB::command</function> "distinct" example</title>
   <para>
    Finding all of the distinct values for a key, where the value is larger
    than or equal to 18.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$people = $db->people;

$people->insert(array("name" => "Joe", "age" => 4));
$people->insert(array("name" => "Sally", "age" => 22));
$people->insert(array("name" => "Dave", "age" => 22));
$people->insert(array("name" => "Molly", "age" => 87));

$ages = $db->command(
    array(
        "distinct" => "people",
        "key" => "age",
        "query" => array("age" => array('$gte' => 18))
    )
);

foreach ($ages['values'] as $age) {
    echo "$age\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
22
87
   </screen>
  </example>

  <example>
   <title><function>MongoDB::command</function> MapReduce example</title>
   <para>
    Get all users with at least on "sale" event, and how many times each
    of these users has had a sale.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// sample event document
$events->insert(array("user_id" => $id,
    "type" => $type,
    "time" => new MongoDate(),
    "desc" => $description));

// construct map and reduce functions
$map = new MongoCode("function() { emit(this.user_id,1); }");
$reduce = new MongoCode("function(k, vals) { ".
    "var sum = 0;".
    "for (var i in vals) {".
        "sum += vals[i];".
    "}".
    "return sum; }");

$sales = $db->command(array(
    "mapreduce" => "events",
    "map" => $map,
    "reduce" => $reduce,
    "query" => array("type" => "sale"),
    "out" => array("merge" => "eventCounts")));

$users = $db->selectCollection($sales['result'])->find();

foreach ($users as $user) {
    echo "{$user['_id']} had {$user['value']} sale(s).\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
User 47cc67093475061e3d9536d2 had 3 sale(s).
User 49902cde5162504500b45c2c had 14 sale(s).
User 4af467e4fd543cce7b0ea8e2 had 1 sale(s).
   </screen>
   <note>
    <title>Using <classname>MongoCode</classname></title>
    <para>
     This example uses <classname>MongoCode</classname>, which can also take a
     scope argument.  However, at the moment, MongoDB does not support using
     scopes in MapReduce.  If you would like to use client-side variables in the
     MapReduce functions, you can add them to the global scope by using the
     optional scope field with the database command.  See the
     <link xlink:href="&url.mongodb.dochub.mapreduce;">MapReduce documentation</link>
     for more information.
    </para>
   </note>
   <note>
    <title>The <literal>out</literal> argument</title>
    <para>
     Before 1.8.0, the <literal>out</literal> argument was optional. If you did
     not use it, MapReduce results would be written to a temporary collection,
     which would be deleted when your connection was closed. In 1.8.0+, the
     <literal>out</literal> argument is required. See the
     <link xlink:href="&url.mongodb.dochub.mapreduce;">MapReduce documentation</link>
     for more information.
    </para>
   </note>
  </example>

  <example>
   <title><function>MongoDB::command</function> "geoNear" example</title>
   <para>
    This example shows how to use the geoNear command.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient();
$d = $m->demo;
$c = $d->poiConcat;

$r = $d->command(array(
    'geoNear' => "poiConcat",      // Search in the poiConcat collection
    'near' => array(-0.08, 51.48), // Search near 51.48°N, 0.08°E
    'spherical' => true,           // Enable spherical search
    'num' => 5,                    // Maximum 5 returned documents
));
print_r($r);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>MongoCollection::aggregate</methodname></member>
    <member><methodname>MongoCollection::findAndModify</methodname></member>
    <member><methodname>MongoCollection::group</methodname></member>
   </simplelist>
  </para>
  <para>
   MongoDB core docs on
   <link xlink:href="&url.mongodb.docs.command;">database commands</link>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
