<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.imagefilter" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>imagefilter</refname>
  <refpurpose>Applies a filter to an image</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>imagefilter</methodname>
   <methodparam><type>resource</type><parameter>image</parameter></methodparam>
   <methodparam><type>int</type><parameter>filtertype</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg1</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg2</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg3</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg4</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>imagefilter</function> applies the given filter
   <parameter>filtertype</parameter> on the <parameter>image</parameter>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &gd.image.description;
    <varlistentry>
     <term><parameter>filtertype</parameter></term>
     <listitem>
      <para>
       <parameter>filtertype</parameter> can be one of the following:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_NEGATE</constant>: Reverses all colors of
          the image.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_GRAYSCALE</constant>: Converts the image into
          grayscale by changing the red, green and blue components to their
          weighted sum using the same coefficients as the REC.601 luma (Y')
          calculation. The alpha components are retained. For palette images the
          result may differ due to palette limitations.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_BRIGHTNESS</constant>: Changes the brightness
          of the image. Use <parameter>arg1</parameter> to set the level of
          brightness. The range for the brightness is -255 to 255.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_CONTRAST</constant>: Changes the contrast of
          the image. Use <parameter>arg1</parameter> to set the level of
          contrast.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant>: Like
          <constant>IMG_FILTER_GRAYSCALE</constant>, except you can specify the
          color. Use <parameter>arg1</parameter>, <parameter>arg2</parameter> and
          <parameter>arg3</parameter> in the form of
          <parameter>red</parameter>, <parameter>green</parameter>,
          <parameter>blue</parameter> and <parameter>arg4</parameter> for the
          <parameter>alpha</parameter> channel. The range for each color is 0 to 255.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_EDGEDETECT</constant>: Uses edge detection to
          highlight the edges in the image.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_EMBOSS</constant>: Embosses the image.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_GAUSSIAN_BLUR</constant>: Blurs the image using
          the Gaussian method.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SELECTIVE_BLUR</constant>: Blurs the image.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_MEAN_REMOVAL</constant>: Uses mean removal to
          achieve a "sketchy" effect.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SMOOTH</constant>: Makes the image smoother.
          Use <parameter>arg1</parameter> to set the level of smoothness.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_PIXELATE</constant>: Applies pixelation effect 
          to the image, use <parameter>arg1</parameter> to set the block size 
          and <parameter>arg2</parameter> to set the pixelation effect mode.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant>: Applies scatter effect 
          to the image, use <parameter>arg1</parameter> and 
          <parameter>arg2</parameter> to define the effect strength and 
          additionally <parameter>arg3</parameter> to only apply the 
          on select pixel colors.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg1</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_BRIGHTNESS</constant>: Brightness level.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_CONTRAST</constant>: Contrast level.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant>: &gd.value.red;
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SMOOTH</constant>: Smoothness level.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_PIXELATE</constant>: Block size in pixels.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant>: Effect substraction level. 
          This must not be higher or equal to the addition level set with 
          <parameter>arg2</parameter>.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg2</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant>: &gd.value.green;
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_PIXELATE</constant>: Whether to use advanced pixelation 
          effect or not (defaults to &false;).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant>: Effect addition level.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg3</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant>: &gd.value.blue;
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant>: Optional array indexed color values 
          to apply effect at.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg4</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant>: Alpha channel, A value 
          between 0 and 127. 0 indicates completely opaque while 127 indicates 
          completely transparent.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Scatter support (<constant>IMG_FILTER_SCATTER</constant>) was added.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>imagefilter</function> grayscale example</title>
    <programlisting role="php">
<![CDATA[
<?php
$im = imagecreatefrompng('dave.png');

if($im && imagefilter($im, IMG_FILTER_GRAYSCALE))
{
    echo 'Image converted to grayscale.';

    imagepng($im, 'dave.png');
}
else
{
    echo 'Conversion to grayscale failed.';
}

imagedestroy($im);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>imagefilter</function> brightness example</title>
    <programlisting role="php">
<![CDATA[
<?php
$im = imagecreatefrompng('sean.png');

if($im && imagefilter($im, IMG_FILTER_BRIGHTNESS, 20))
{
    echo 'Image brightness changed.';

    imagepng($im, 'sean.png');
    imagedestroy($im);
}
else
{
    echo 'Image brightness change failed.';
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>imagefilter</function> colorize example</title>
    <programlisting role="php">
<![CDATA[
<?php
$im = imagecreatefrompng('philip.png');

/* R, G, B, so 0, 255, 0 is green */
if($im && imagefilter($im, IMG_FILTER_COLORIZE, 0, 255, 0))
{
    echo 'Image successfully shaded green.';

    imagepng($im, 'philip.png');
    imagedestroy($im);
}
else
{
    echo 'Green shading failed.';
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>imagefilter</function> negate example</title>
    <programlisting role="php">
<![CDATA[
<?php
// Define our negate function so its portable for 
// php versions without imagefilter()
function negate($im)
{
    if(function_exists('imagefilter'))
    {
        return imagefilter($im, IMG_FILTER_NEGATE);
    }

    for($x = 0; $x < imagesx($im); ++$x)
    {
        for($y = 0; $y < imagesy($im); ++$y)
        {
            $index = imagecolorat($im, $x, $y);
            $rgb = imagecolorsforindex($index);
            $color = imagecolorallocate($im, 255 - $rgb['red'], 255 - $rgb['green'], 255 - $rgb['blue']);

            imagesetpixel($im, $x, $y, $color);
        }
    }

    return(true);
}

$im = imagecreatefromjpeg('kalle.jpg');

if($im && negate($im))
{
    echo 'Image successfully converted to negative colors.';

    imagejpeg($im, 'kalle.jpg', 100);
    imagedestroy($im);
}
else
{
    echo 'Converting to negative colors failed.';
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>imagefilter</function> pixelate example</title>
    <programlisting role="php">
<![CDATA[
<?php
// Load the PHP logo, we need to create two instances 
// to show the differences
$logo1 = imagecreatefrompng('./php.png');
$logo2 = imagecreatefrompng('./php.png');

// Create the image instance we want to show the 
// differences on
$output = imagecreatetruecolor(imagesx($logo1) * 2, imagesy($logo1));

// Apply pixelation to each instance, with a block 
// size of 3
imagefilter($logo1, IMG_FILTER_PIXELATE, 3);
imagefilter($logo2, IMG_FILTER_PIXELATE, 3, true);

// Merge the differences onto the output image
imagecopy($output, $logo1, 0, 0, 0, 0, imagesx($logo1) - 1, imagesy($logo1) - 1);
imagecopy($output, $logo2, imagesx($logo2), 0, 0, 0, imagesx($logo2) - 1, imagesy($logo2) - 1);
imagedestroy($logo1);
imagedestroy($logo2);

// Output the differences
header('Content-Type: image/png');
imagepng($output);
imagedestroy($output);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <mediaobject>
     <alt>Output of example : imagefilter() pixelate</alt>
     <imageobject>
      <imagedata fileref="en/reference/image/figures/imagefilterpixelate.png"/>
     </imageobject>
    </mediaobject>
   </example>
  </para>
  <para>
   <example>
    <title><function>imagefilter</function> scatter example</title>
    <programlisting role="php">
<![CDATA[
<?php
// Load the image
$logo = imagecreatefrompng('./php.png');

// Apply a very soft scatter effect to the image
imagefilter($logo, IMG_FILTER_SCATTER, 3, 5);

// Output the image with the scatter effect
header('Content-Type: image/png');
imagepng($logo);
imagedestroy($logo);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <mediaobject>
     <alt>Output of example : imagefilter() scatter</alt>
     <imageobject>
      <imagedata fileref="en/reference/image/figures/scatter.png"/>
     </imageobject>
    </mediaobject>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    The result of <constant>IMG_FILTER_SCATTER</constant> is always random.
   </simpara>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>imageconvolution</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
