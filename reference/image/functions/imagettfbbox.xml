<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.imagettfbbox" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>imagettfbbox</refname>
  <refpurpose>Give the bounding box of a text using TrueType fonts</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>imagettfbbox</methodname>
   <methodparam><type>float</type><parameter>size</parameter></methodparam>
   <methodparam><type>float</type><parameter>angle</parameter></methodparam>
   <methodparam><type>string</type><parameter>fontfile</parameter></methodparam>
   <methodparam><type>string</type><parameter>text</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function calculates and returns the bounding box in pixels
   for a TrueType text.
  </para>
  <note>
   <para>
    <function>imageftbbox</function> is an extended variant of
    <function>imagettfbbox</function> which additionally supports the
    <parameter>extrainfo</parameter>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>size</parameter></term>
     <listitem>
      <para>&gd.font.size;</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>angle</parameter></term>
     <listitem>
      <para>
       Angle in degrees in which <parameter>text</parameter> will be measured.
      </para>
     </listitem>
    </varlistentry>
    &gd.ttf.fontfile;
    <varlistentry>
     <term><parameter>text</parameter></term>
     <listitem>
      <para>
       The string to be measured.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>imagettfbbox</function> returns an array with 8
   elements representing four points making the bounding box of the
   text on success and &false; on error.
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>key</entry>
       <entry>contents</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>0</entry>
       <entry>lower left corner, X position</entry>
      </row>
      <row>
       <entry>1</entry>
       <entry>lower left corner, Y position</entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>lower right corner, X position</entry>
      </row>
      <row>
       <entry>3</entry>
       <entry>lower right corner, Y position</entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>upper right corner, X position</entry>
      </row>
      <row>
       <entry>5</entry>
       <entry>upper right corner, Y position</entry>
      </row>
      <row>
       <entry>6</entry>
       <entry>upper left corner, X position</entry>
      </row>
      <row>
       <entry>7</entry>
       <entry>upper left corner, Y position</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
  <para>
   The points are relative to the <emphasis>text</emphasis> regardless of the
   <parameter>angle</parameter>, so "upper left" means in the top left-hand 
   corner seeing the text horizontally.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>imagettfbbox</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// Create a 300x150 image
$im = imagecreatetruecolor(300, 150);
$black = imagecolorallocate($im, 0, 0, 0);
$white = imagecolorallocate($im, 255, 255, 255);

// Set the background to be white
imagefilledrectangle($im, 0, 0, 299, 299, $white);

// Path to our font file
$font = './arial.ttf';

// First we create our bounding box for the first text
$bbox = imagettfbbox(10, 45, $font, 'Powered by PHP ' . phpversion());

// This is our cordinates for X and Y
$x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) - 25;
$y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;

// Write it
imagettftext($im, 10, 45, $x, $y, $black, $font, 'Powered by PHP ' . phpversion());

// Create the next bounding box for the second text
$bbox = imagettfbbox(10, 45, $font, 'and Zend Engine ' . zend_version());

// Set the cordinates so its next to the first text
$x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) + 10;
$y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;

// Write it
imagettftext($im, 10, 45, $x, $y, $black, $font, 'and Zend Engine ' . zend_version());

// Output to browser
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  &note.freetype;
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>imagettftext</function></member>
   <member><function>imageftbbox</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
