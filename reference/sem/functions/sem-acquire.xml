<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.sem-acquire" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sem_acquire</refname>
  <refpurpose>Acquire a semaphore</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>sem_acquire</methodname>
   <methodparam><type>SysvSemaphore</type><parameter>semaphore</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>non_blocking</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>sem_acquire</function> by default blocks (if necessary) until the
   semaphore can be acquired.  A process attempting to acquire a semaphore which
   it has already acquired will block forever if acquiring the semaphore would
   cause its maximum number of semaphore to be exceeded.
  </para>
  <para>
   After processing a request, any semaphores acquired by the process but not
   explicitly released will be released automatically and a warning will be
   generated.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>semaphore</parameter></term>
     <listitem>
      <para>
       <parameter>semaphore</parameter> is a semaphore
       obtained from <function>sem_get</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>non_blocking</parameter></term>
     <listitem>
      <para>
       Specifies if the process shouldn't wait for the semaphore to be acquired.
       If set to <literal>true</literal>, the call will return
       <literal>false</literal> immediately if a semaphore cannot be immediately
       acquired.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>semaphore</parameter> expects a <classname>SysvSemaphore</classname>
        instance now; previously, a <type>resource</type> was expected.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sem_get</function></member>
    <member><function>sem_release</function></member>
   </simplelist>
  </para>
 </refsect1>  
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
