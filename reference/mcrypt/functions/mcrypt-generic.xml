<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.mcrypt-generic" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mcrypt_generic</refname>
  <refpurpose>This function encrypts data</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  &warn.deprecated.function-7-1-0.removed-7-2-0;
 </refsynopsisdiv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mcrypt_generic</methodname>
   <methodparam><type>resource</type><parameter>td</parameter></methodparam>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function encrypts data. The data is padded with "<literal>\0</literal>"
   to make sure the length of the data is n * blocksize. This
   function returns the encrypted data. Note that the length
   of the returned string can in fact be longer than the input,
   due to the padding of the data.
  </para>
  <para>
   If you want to store the encrypted data in a database make sure to store
   the entire string as returned by mcrypt_generic, or the string will not
   entirely decrypt properly.  If your original string is 10 characters long
   and the block size is 8 (use
   <function>mcrypt_enc_get_block_size</function> to determine the
   blocksize), you would need at least 16 characters in your database field.
   Note the string returned by <function>mdecrypt_generic</function> will be
   16 characters as well...use rtrim($str, "\0") to remove the padding.
  </para>
  <para>
   If you are for example storing the data in a MySQL database remember that
   varchar fields automatically have trailing spaces removed during
   insertion. As encrypted data can end in a space (ASCII 32), the data will
   be damaged by this removal.  Store data in a tinyblob/tinytext (or
   larger) field instead.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>td</parameter></term>
     <listitem>
      <para>
       The encryption descriptor.
      </para>
      <para>
       The encryption handle should always be initialized with
       <function>mcrypt_generic_init</function> with a key and an IV before
       calling this function. Where the encryption is done, you should free the
       encryption buffers by calling <function>mcrypt_generic_deinit</function>.
       See <function>mcrypt_module_open</function> for an example.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       The data to encrypt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the encrypted data.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mdecrypt_generic</function></member>
    <member><function>mcrypt_generic_init</function></member>
    <member><function>mcrypt_generic_deinit</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
