<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.20.2.1 $ -->
<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
<appendix xml:id="pdo.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <warning>
  <para>
   PDO uses class constants since PHP 5.1. Prior releases use global constants
   in the form <constant>PDO_PARAM_BOOL</constant>.
  </para>
 </warning>
 <variablelist>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_BOOL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Represents a boolean data type.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::PARAM_NULL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL NULL data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_INT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL INTEGER data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_STR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL CHAR, VARCHAR, or other string data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_LOB</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL large object data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_STMT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Represents a recordset type.  Not currently supported by any drivers.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_INPUT_OUTPUT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the parameter is an INOUT parameter for a stored
     procedure. You must bitwise-OR this value with an explicit
     PDO::PARAM_* data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_LAZY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     variable names that correspond to the column names returned in the result
     set. PDO::FETCH_LAZY creates the object variable names as they are accessed.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name, PDO::FETCH_ASSOC returns
     only a single value per column name.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_NAMED</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name, PDO::FETCH_NAMED returns
     an array of values per column name.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_NUM</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column number as returned in the corresponding result set, starting at
     column 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_BOTH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by both column name and number as returned in the corresponding result set,
     starting at column 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_OBJ</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     property names that correspond to the column names returned in the result
     set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_BOUND</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return TRUE and assign the values of
     the columns in the result set to the PHP variables to which they were
     bound with the <function>PDOStatement::bindParam</function> or
     <function>PDOStatement::bindColumn</function> methods.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return only a single requested
     column from the next row in the result set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_CLASS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return a new instance of the
     requested class, mapping the columns to named properties in the class.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_INTO</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall update an existing instance of the
     requested class, mapping the columns to named properties in the class.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_FUNC</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_GROUP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
      Fetch into an array where the 1st column is a key and all subsequent
      columns are values
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     As <constant>PDO::FETCH_INTO</constant> but object is provided as a serialized string.
     Available since PHP 5.1.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Available since PHP 5.2.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_AUTOCOMMIT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     If this value is &false;, PDO attempts to disable autocommit so that the
     connection begins a transaction.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_PREFETCH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Setting the prefetch size allows you to balance speed against memory
     usage for your application.  Not all database/driver combinations support
     setting of the prefetch size.  A larger prefetch size results in
     increased performance at the cost of higher memory usage.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_TIMEOUT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Sets the timeout value in seconds for communications with the database.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_ERRMODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     See the <link linkend='pdo.error-handling'>Errors and error
     handling</link> section for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_SERVER_VERSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     This is a read only attribute; it will return information about the
     version of the database server to which PDO is connected.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CLIENT_VERSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     This is a read only attribute; it will return information about the
     version of the client libraries that the PDO driver is using.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_SERVER_INFO</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     This is a read only attribute; it will return some meta information about the
     database server to which PDO is connected.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CONNECTION_STATUS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CASE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Force column names to a specific case specified by the PDO::CASE_*
     constants.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CURSOR_NAME</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Get or set the name to use for a cursor.  Most useful when using
     scrollable cursors and positioned updates.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_CURSOR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Selects the cursor type.  PDO currently supports either
     <constant>PDO::CURSOR_FWDONLY</constant> and 
     <constant>PDO::CURSOR_SCROLL</constant>.  Stick with
     <constant>PDO::CURSOR_FWDONLY</constant> unless you know that you need a
     scrollable cursor.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::ATTR_DRIVER_NAME</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Returns the name of the driver.
    </simpara>
    <para>
     <example><title>using PDO::ATTR_DRIVER_NAME</title>
     <programlisting role='php'>
<![CDATA[
<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
  echo "Running on mysql; doing something mysql specific here\n";
}
?>
]]>
     </programlisting>
     </example>
     </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <constant>PDO::ATTR_ORACLE_NULLS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Convert empty strings to SQL NULL values on data fetches.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_PERSISTENT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     Request a persistent connection, rather than creating a new connection.
     See <link linkend='pdo.connections'>Connections and Connection
     management</link> for more information on this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_STATEMENT_CLASS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_FETCH_CATALOG_NAMES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     Prepend the containing catalog name to each column name returned in the
     result set. The catalog name and column name are separated by a decimal
     (.) character.  Support of this attribute is at the driver level; it may
     not be supported by your driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_FETCH_TABLE_NAMES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     Prepend the containing table name to each column name returned in the
     result set. The table name and column name are separated by a decimal (.)
     character.  Support of this attribute is at the driver level; it may not
     be supported by your driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_MAX_COLUMN_LEN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     Available since PHP 5.2.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ATTR_EMULATE_PREPARES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Available since PHP 5.1.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERRMODE_SILENT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Do not raise an error or exception if an error occurs. The developer is
     expected to explicitly check for errors.  This is the default mode.
     See <link linkend='pdo.error-handling'>Errors and error handling</link>
     for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERRMODE_WARNING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Issue a PHP E_WARNING message if an error occurs.
     See <link linkend='pdo.error-handling'>Errors and error handling</link>
     for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERRMODE_EXCEPTION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Throw a <classname>PDOException</classname> if an error occurs.
     See <link linkend='pdo.error-handling'>Errors and error handling</link>
     for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CASE_NATURAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Leave column names as returned by the database driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CASE_LOWER</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara> 
     Force column names to lower case.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CASE_UPPER</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Force column names to upper case.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::NULL_NATURAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::NULL_EMPTY_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::NULL_TO_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_NEXT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the next row in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_PRIOR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the previous row in the result set. Valid only for scrollable
     cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_FIRST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the first row in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_LAST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the last row in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_ABS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the requested row by row number from the result set. Valid only
     for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::FETCH_ORI_REL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the requested row by relative position from the current position
     of the cursor in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CURSOR_FWDONLY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Create a PDOStatement object with a forward-only cursor.  This is the
     default cursor choice, as it is the fastest and most common data access
     pattern in PHP.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::CURSOR_SCROLL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Create a PDOStatement object with a scrollable cursor. Pass the
     PDO::FETCH_ORI_* constants to control the rows fetched from the result set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::ERR_NONE</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara> 
     Corresponds to SQLSTATE '00000', meaning that the SQL statement was
     successfully issued with no errors or warnings.  This constant is for
     your convenience when checking <function>PDO::errorCode</function> or
     <function>PDOStatement::errorCode</function> to determine if an error
     occurred.  You will usually know if this is the case by examining the
     return code from the method that raised the error condition anyway.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_ALLOC</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allocation event
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_FREE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Deallocation event
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_EXEC_PRE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered prior to execution of a prepared statement.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_EXEC_POST</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered subsequent to execution of a prepared statement.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_FETCH_PRE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered prior to fetching a result from a resultset.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_FETCH_POST</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered subsequent to fetching a result from a resultset.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>PDO::PARAM_EVT_NORMALIZE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered during bound parameter registration
     allowing the driver to normalize the parameter name.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
