<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
<appendix xml:id="pdo.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <variablelist>
  <varlistentry xml:id="pdo.constants.param-bool">
   <term>
    <constant>PDO::PARAM_BOOL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Represents a boolean data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-null">
   <term>
    <constant>PDO::PARAM_NULL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL NULL data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-int">
   <term>
    <constant>PDO::PARAM_INT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL INTEGER data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str">
   <term>
    <constant>PDO::PARAM_STR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL CHAR, VARCHAR, or other string data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-natl">
   <term>
    <constant>PDO::PARAM_STR_NATL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Flag to denote a string uses the national character set.
    </simpara>
    <simpara> 
     Available since PHP 7.2.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-char">
   <term>
    <constant>PDO::PARAM_STR_CHAR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Flag to denote a string uses the regular character set.
    </simpara>
    <simpara> 
     Available since PHP 7.2.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-lob">
   <term>
    <constant>PDO::PARAM_LOB</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Represents the SQL large object data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-stmt">
   <term>
    <constant>PDO::PARAM_STMT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Represents a recordset type.  Not currently supported by any drivers.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-input-output">
   <term>
    <constant>PDO::PARAM_INPUT_OUTPUT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the parameter is an INOUT parameter for a stored
     procedure. You must bitwise-OR this value with an explicit
     PDO::PARAM_* data type.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-default">
   <term>
    <constant>PDO::FETCH_DEFAULT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the default fetch mode shall be used. Available as of PHP 8.0.7.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-lazy">
   <term>
    <constant>PDO::FETCH_LAZY</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     variable names that correspond to the column names returned in the result
     set. <constant>PDO::FETCH_LAZY</constant> creates the object variable names as they are accessed.
     Not valid inside <methodname>PDOStatement::fetchAll</methodname>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-assoc">
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name,
     <constant>PDO::FETCH_ASSOC</constant> returns
     only a single value per column name.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-named">
   <term>
    <constant>PDO::FETCH_NAMED</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name,
     <constant>PDO::FETCH_NAMED</constant> returns
     an array of values per column name.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-num">
   <term>
    <constant>PDO::FETCH_NUM</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column number as returned in the corresponding result set, starting at
     column 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-both">
   <term>
    <constant>PDO::FETCH_BOTH</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by both column name and number as returned in the corresponding result set,
     starting at column 0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-obj">
   <term>
    <constant>PDO::FETCH_OBJ</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     property names that correspond to the column names returned in the result
     set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-bound">
   <term>
    <constant>PDO::FETCH_BOUND</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return TRUE and assign the values of
     the columns in the result set to the PHP variables to which they were
     bound with the <methodname>PDOStatement::bindParam</methodname> or
     <methodname>PDOStatement::bindColumn</methodname> methods.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-column">
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return only a single requested
     column from the next row in the result set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-class">
   <term>
    <constant>PDO::FETCH_CLASS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return a new instance of the
     requested class, mapping the columns to named properties in the class.
    </simpara>
    <note>
     <simpara>
      The magic
      <link linkend="language.oop5.overloading.members"><methodname>__set</methodname></link>
      method is called if the property doesn't exist in the requested class
     </simpara>
    </note>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-into">
   <term>
    <constant>PDO::FETCH_INTO</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall update an existing instance of the
     requested class, mapping the columns to named properties in the class.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-func">
   <term>
    <constant>PDO::FETCH_FUNC</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Allows completely customize the way data is treated on the fly (only 
     valid inside <methodname>PDOStatement::fetchAll</methodname>).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-group">
   <term>
    <constant>PDO::FETCH_GROUP</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Group return by values. Usually combined with
     <constant>PDO::FETCH_COLUMN</constant> or 
     <constant>PDO::FETCH_KEY_PAIR</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-unique">
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch only the unique values.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-key-pair">
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
      Fetch a two-column result into an array where the first column is a key and the second column
      is the value.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-classtype">
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Determine the class name from the value of first column.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-serialize">
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     As <constant>PDO::FETCH_INTO</constant> but object is provided as a serialized string.
     The class constructor is never called if this flag is set.
     Deprecated as of PHP 8.1.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-props-late">
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Call the constructor before setting properties.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-autocommit">
   <term>
    <constant>PDO::ATTR_AUTOCOMMIT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     If this value is &false;, PDO attempts to disable autocommit so that the
     connection begins a transaction.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-prefetch">
   <term>
    <constant>PDO::ATTR_PREFETCH</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Setting the prefetch size allows you to balance speed against memory
     usage for your application.  Not all database/driver combinations support
     setting of the prefetch size.  A larger prefetch size results in
     increased performance at the cost of higher memory usage.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-timeout">
   <term>
    <constant>PDO::ATTR_TIMEOUT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Sets the timeout value in seconds for communications with the database.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-errmode">
   <term>
    <constant>PDO::ATTR_ERRMODE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     See the <link linkend="pdo.error-handling">Errors and error
     handling</link> section for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-version">
   <term>
    <constant>PDO::ATTR_SERVER_VERSION</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     This is a read only attribute; it will return information about the
     version of the database server to which PDO is connected.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-client-version">
   <term>
    <constant>PDO::ATTR_CLIENT_VERSION</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     This is a read only attribute; it will return information about the
     version of the client libraries that the PDO driver is using.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-info">
   <term>
    <constant>PDO::ATTR_SERVER_INFO</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     This is a read only attribute; it will return some meta information about the
     database server to which PDO is connected.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-connection-status">
   <term>
    <constant>PDO::ATTR_CONNECTION_STATUS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-case">
   <term>
    <constant>PDO::ATTR_CASE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Force column names to a specific case specified by the <literal>PDO::CASE_*</literal>
     constants.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor-name">
   <term>
    <constant>PDO::ATTR_CURSOR_NAME</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Get or set the name to use for a cursor.  Most useful when using
     scrollable cursors and positioned updates.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor">
   <term>
    <constant>PDO::ATTR_CURSOR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Selects the cursor type.  PDO currently supports either
     <constant>PDO::CURSOR_FWDONLY</constant> and 
     <constant>PDO::CURSOR_SCROLL</constant>. Stick with
     <constant>PDO::CURSOR_FWDONLY</constant> unless you know that you need a
     scrollable cursor.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.attr-driver-name">
   <term>
    <constant>PDO::ATTR_DRIVER_NAME</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Returns the name of the driver.
    </simpara>
    <para>
     <example><title>using <constant>PDO::ATTR_DRIVER_NAME</constant></title>
     <programlisting role="php">
<![CDATA[
<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
  echo "Running on mysql; doing something mysql specific here\n";
}
?>
]]>
     </programlisting>
     </example>
     </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-oracle-nulls">
   <term>
    <constant>PDO::ATTR_ORACLE_NULLS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Convert empty strings to SQL NULL values on data fetches.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-persistent">
   <term>
    <constant>PDO::ATTR_PERSISTENT</constant>
     (<type>mixed</type>)
   </term>
   <listitem>
    <simpara> 
     Request a persistent connection, rather than creating a new connection.
     See <link linkend="pdo.connections">Connections and Connection
     management</link> for more information on this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-statement-class">
   <term>
    <constant>PDO::ATTR_STATEMENT_CLASS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara> 
     Sets the class name of which statements are returned as.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-catalog-names">
   <term>
    <constant>PDO::ATTR_FETCH_CATALOG_NAMES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara> 
     Prepend the containing catalog name to each column name returned in the
     result set. The catalog name and column name are separated by a decimal
     (.) character.  Support of this attribute is at the driver level; it may
     not be supported by your driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-table-names">
   <term>
    <constant>PDO::ATTR_FETCH_TABLE_NAMES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara> 
     Prepend the containing table name to each column name returned in the
     result set. The table name and column name are separated by a decimal (.)
     character. Support of this attribute is at the driver level; it may not
     be supported by your driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-stringify-fetches">
   <term>
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara> 
     Forces all values fetched to be treated as strings.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-max-column-len">
   <term>
    <constant>PDO::ATTR_MAX_COLUMN_LEN</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara> 
     Sets the maximum column name length.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-fetch-mode">
   <term>
    <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara> 

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-emulate-prepares">
   <term>
    <constant>PDO::ATTR_EMULATE_PREPARES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-str-param">
   <term>
    <constant>PDO::ATTR_DEFAULT_STR_PARAM</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Sets the default string parameter type, this can be one of <constant>PDO::PARAM_STR_NATL</constant> 
     and <constant>PDO::PARAM_STR_CHAR</constant>.
    </simpara>
    <simpara>
     Available since PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-silent">
   <term>
    <constant>PDO::ERRMODE_SILENT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Do not raise an error or exception if an error occurs. The developer is
     expected to explicitly check for errors.  This is the default mode.
     See <link linkend="pdo.error-handling">Errors and error handling</link>
     for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-warning">
   <term>
    <constant>PDO::ERRMODE_WARNING</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Issue a PHP <constant>E_WARNING</constant> message if an error occurs.
     See <link linkend="pdo.error-handling">Errors and error handling</link>
     for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-exception">
   <term>
    <constant>PDO::ERRMODE_EXCEPTION</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Throw a <classname>PDOException</classname> if an error occurs.
     See <link linkend="pdo.error-handling">Errors and error handling</link>
     for more information about this attribute.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-natural">
   <term>
    <constant>PDO::CASE_NATURAL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Leave column names as returned by the database driver.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-lower">
   <term>
    <constant>PDO::CASE_LOWER</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara> 
     Force column names to lower case.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-upper">
   <term>
    <constant>PDO::CASE_UPPER</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Force column names to upper case.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-natural">
   <term>
    <constant>PDO::NULL_NATURAL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-empty-string">
   <term>
    <constant>PDO::NULL_EMPTY_STRING</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-to-string">
   <term>
    <constant>PDO::NULL_TO_STRING</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-next">
   <term>
    <constant>PDO::FETCH_ORI_NEXT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the next row in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-prior">
   <term>
    <constant>PDO::FETCH_ORI_PRIOR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the previous row in the result set. Valid only for scrollable
     cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-first">
   <term>
    <constant>PDO::FETCH_ORI_FIRST</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the first row in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-last">
   <term>
    <constant>PDO::FETCH_ORI_LAST</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the last row in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-abs">
   <term>
    <constant>PDO::FETCH_ORI_ABS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the requested row by row number from the result set. Valid only
     for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-rel">
   <term>
    <constant>PDO::FETCH_ORI_REL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch the requested row by relative position from the current position
     of the cursor in the result set. Valid only for scrollable cursors.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-fwdonly">
   <term>
    <constant>PDO::CURSOR_FWDONLY</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Create a <classname>PDOStatement</classname> object with a forward-only cursor.  This is the
     default cursor choice, as it is the fastest and most common data access
     pattern in PHP.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-scroll">
   <term>
    <constant>PDO::CURSOR_SCROLL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Create a <classname>PDOStatement</classname> object with a scrollable cursor. Pass the
     <literal>PDO::FETCH_ORI_*</literal> constants to control the rows fetched from the result set.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.err-none">
   <term>
    <constant>PDO::ERR_NONE</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara> 
     Corresponds to SQLSTATE '00000', meaning that the SQL statement was
     successfully issued with no errors or warnings.  This constant is for
     your convenience when checking <methodname>PDO::errorCode</methodname> or
     <methodname>PDOStatement::errorCode</methodname> to determine if an error
     occurred.  You will usually know if this is the case by examining the
     return code from the method that raised the error condition anyway.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-alloc">
   <term>
    <constant>PDO::PARAM_EVT_ALLOC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Allocation event
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-free">
   <term>
    <constant>PDO::PARAM_EVT_FREE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Deallocation event
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-pre">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered prior to execution of a prepared statement.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-post">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered subsequent to execution of a prepared statement.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-pre">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered prior to fetching a result from a resultset.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-post">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered subsequent to fetching a result from a resultset.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-normalize">
   <term>
    <constant>PDO::PARAM_EVT_NORMALIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Event triggered during bound parameter registration
     allowing the driver to normalize the parameter name.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.sqlite_deterministic">
   <term>
    <constant>PDO::SQLITE_DETERMINISTIC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
      Specifies that a function created with <methodname>PDO::sqliteCreateFunction</methodname>
      is deterministic, i.e. it always returns the same result given the same inputs within
      a single SQL statement. (Available as of PHP 7.1.4.)
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
