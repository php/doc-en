<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<chapter xml:id="pdo.fetch-modes" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Fetch Modes</title>

 <para>
  PDO implements a number of different fetch modes allowing great control over
  how results are returned. These are:
 </para>
 <informaltable>
  <tgroup cols="2">
   <thead>
    <row>
     <entry>Fetch Mode</entry>
     <entry>Summary</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>
      <link linkend="pdo.fetch-modes.both">PDO::FETCH_BOTH</link> (Default)
     </entry>
     <entry>Array indexed by both column number and name.</entry>
    </row>
    <row>
     <entry>
      <link linkend="pdo.fetch-modes.num">PDO::FETCH_NUM</link>
     </entry>
     <entry>Array indexed by column number only.</entry>
    </row>
    <row>
     <entry>
      <link linkend="pdo.fetch-modes.assoc">PDO::FETCH_ASSOC</link>
     </entry>
     <entry>Array indexed by column name only.</entry>
    </row>
    <row>
     <entry>
      <link linkend="pdo.fetch-modes.obj">PDO::FETCH_OBJ</link>
     </entry>
     <entry>Anonymous (<classname>stdClass</classname>) object.</entry>
    </row>
    <row>
     <entry>
      <link linkend="pdo.fetch-modes.column">PDO::FETCH_COLUMN</link>
     </entry>
     <entry>A single value / column.</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 <para>
  The following special modes for multiple results only work with
  <function>PDOStatement::fetchAll</function>:
 </para>
 <informaltable>
  <tgroup cols="2">
  <thead>
   <row>
    <entry>Fetch Mode</entry>
    <entry>Summary</entry>
   </row>
  </thead>
  <tbody>
   <row>
    <entry>
     <link linkend="pdo.fetch-modes.key-pair">PDO::FETCH_KEY_PAIR</link>
    </entry>
    <entry>Array of value pairs, indexed by the first column.</entry>
   </row>
  </tbody>
  </tgroup>
 </informaltable>

 <section xml:id="pdo.fetch-modes.duplicate-names" annotations="chunk:false">
  <title>Handling of Duplicated Column Names</title>
  <para>
   It's possible for results to contain multiple columns that use the same name.
   For example, when joining 2 tables that both contain a column with the same
   name.
  </para>
  <para>
   Because PHP structures such as arrays and objects don't support multiple keys
   or properties that use the same name, the return array or object will contain
   only 1 of the values using the same name.
  </para>
  <para>
   Which value is returned for a given duplicated name should be considered
   undefined and may change depending on the selected database driver or other
   factors.
  </para>
  <para>
   To avoid this issue, explicitly name columns using an alias. For example:
  </para>
  <informalexample>
   <programlisting role="sql">
<![CDATA[
SELECT table1.created_at AS t1_created_at, table2.created_at AS t2_created_at
FROM table1
JOIN table2 ON table1.table2id = table2.id
]]>
   </programlisting>
  </informalexample>
 </section>

 <section xml:id="pdo.fetch-modes.both" annotations="chunk:false">
  <title>PDO::FETCH_BOTH</title>
  <para>
   This is the default fetch mode.
  </para>
  <para>
   <constant>PDO::FETCH_BOTH</constant> returns an array indexed by both column
   number and name. This means that every returned value is duplicated for each
   result row.
  </para>
  <para>
   The column number starts at 0 and is determined by the result column order in
   the query, not (for example) the order columns are defined in the table.
  </para>
  <note>
   <para>
    Using the numeric column index is not recommended as this may change when
    the query is changed, or when the table schema is changed when using
    <literal>SELECT *</literal>.
   </para>
  </note>
  <note>
   <para>
    The number of entries indexed by name may not match the number of entries
    indexed by number in cases where multiple returned columns use the same
    name.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_BOTH);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [id] => 104,
    [0] => 104,
    [name] => Sam,
    [1] => Sam,
    [country] => Ukraine,
    [2] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.fetch-modes.num" annotations="chunk:false">
  <title>PDO::FETCH_NUM</title>
  <para>
   <constant>PDO::FETCH_NUM</constant> returns an array indexed by column number
   only. The column number starts at 0 and is determined by the result column order in
   the query, not (for example) the order columns are defined in the table.
  </para>
  <note>
   <para>
    Using the numeric column index is not recommended as this may change when
    the query is changed, or when the table schema is changed when using
    <literal>SELECT *</literal>.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_NUM);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 104
    [1] => Sam
    [2] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.fetch-modes.assoc" annotations="chunk:false">
  <title>PDO::FETCH_ASSOC</title>
  <para>
   <constant>PDO::FETCH_ASSOC</constant> returns an array indexed by column name
   only.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_ASSOC);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [userid] => 104
    [name] => Sam
    [country] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.fetch-modes.obj" annotations="chunk:false">
  <title>PDO::FETCH_OBJ</title>
  <para>
   <constant>PDO::FETCH_OBJ</constant> returns a <classname>stdClass</classname>
   object.
  </para>
  <para>
   See also <function>PDOStatement::fetchObject</function>.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_OBJ);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
stdClass Object
(
    [userid] => 104
    [name] => Sam
    [country] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.fetch-modes.column" annotations="chunk:false">
  <title>PDO::FETCH_COLUMN</title>
  <para>
   <constant>PDO::FETCH_COLUMN</constant> returns an array of values from a
   single column.
  </para>
  <note>
   <para>
    If the results contain multiple columns, only the first is returned.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $pdo->query("SELECT name, country FROM users LIMIT 3");
$row = $stmt->fetchAll(\PDO::FETCH_COLUMN);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => Sam
    [1] => Jamie
    [2] => Robin
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.fetch-modes.key-pair" annotations="chunk:false">
  <title>PDO::FETCH_KEY_PAIR</title>
  <para>
   <constant>PDO::FETCH_KEY_PAIR</constant> returns pairs of values, indexed by
   the first column. This fetch mode only works with
   <function>PDOStatement::fetchAll</function>.
  </para>
  <note>
   <para>
    If the first column is not unique, values will be lost. Which value(s) are
    lost / retained should be considered undefined.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $pdo->query("SELECT name, country FROM users LIMIT 3");
$row = $stmt->fetchAll(\PDO::FETCH_COLUMN);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [0] => Sam
    [1] => Jamie
    [2] => Robin
)
]]>
   </screen>
  </informalexample>
 </section>
</chapter>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->