<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1.2.1 $ -->

<chapter xml:id="pdo.error-handling" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Errors and error handling</title>
 <para>
  PDO offers you a choice of 3 different error handling strategies, to fit
  your style of application development.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_SILENT</constant>
   </para>
   <para>
     This is the default mode. PDO will simply set the error code for you
     to inspect using the <xref linkend="function.PDO-errorCode" /> and
     <xref linkend="function.PDO-errorInfo" /> methods on both the
     statement and database objects; if the error resulted from a call on a
     statement object, you would invoke the
     <xref linkend="function.PDOStatement-errorCode" /> or
     <xref linkend="function.PDOStatement-errorInfo" />
     method on that object. If the error resulted from a call on the
     database object, you would invoke those methods on the database object
     instead.
    </para>
  </listitem>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_WARNING</constant>
   </para>
   <para>
     In addition to setting the error code, PDO will emit a traditional
     E_WARNING message. This setting is useful during debugging/testing, if
     you just want to see what problems occurred without interrupting the
     flow of the application.
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>PDO::ERRMODE_EXCEPTION</constant>
    </para>
    <para>
     In addition to setting the error code, PDO will throw a
     <classname>PDOException</classname>
     and set its properties to reflect the error code and error
     information. This setting is also useful during debugging, as it will
     effectively "blow up" the script at the point of the error, very
     quickly pointing a finger at potential problem areas in your code
     (remember: transactions are automatically rolled back if the exception
     causes the script to terminate).
    </para>
    <para>
     Exception mode is also useful because you can structure your error
     handling more clearly than with traditional PHP-style warnings, and
     with less code/nesting than by running in silent mode and explicitly
     checking the return value of each database call.
    </para>
    <para>
     See <link linkend='language.exceptions'>Exceptions</link> for more
     information about Exceptions in PHP.
    </para>
   </listitem>
 </itemizedlist>
 <para>
  PDO standardizes on using SQL-92 SQLSTATE error code strings; individual
  PDO drivers are responsible for mapping their native codes to the
  appropriate SQLSTATE codes.   The <xref linkend="function.PDO-errorCode" />
  method returns a single SQLSTATE code. If you need more specific
  information about an error, PDO also offers an
  <xref linkend="function.PDO-errorInfo" /> method which returns an array
  containing the SQLSTATE code, the driver specific error code and driver
  specific error string.
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

