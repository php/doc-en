<?xml version="1.0" encoding="utf-8"?>
<section xml:id="pdo.constants.fetch-modes">
 <title>Fetch Modes</title>

 <section xml:id="pdo.fetch-modes.basic" annotations="chunk:false">
  <title>Basic Fetch Modes</title>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Fetch Mode</entry>
      <entry>Summary</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <constant>PDO::FETCH_DEFAULT</constant>
      </entry>
      <entry>
       Special value for using the current default fetch mode.
      </entry>
     </row>
     <row>
      <entry>
       <constant>PDO::FETCH_BOTH</constant> (Default)
      </entry>
      <entry>
       Array indexed by both column number and name.
      </entry>
     </row>
     <row>
      <entry>
       <constant>PDO::FETCH_NUM</constant>
      </entry>
      <entry>
       Array indexed by column number only.
      </entry>
     </row>
     <row>
      <entry>
       <constant>PDO::FETCH_ASSOC</constant>
      </entry>
      <entry>
       Array indexed by column name only.
      </entry>
     </row>
     <row>
      <entry>
       <constant>PDO::FETCH_OBJ</constant>
      </entry>
      <entry>
       Anonymous (<classname>stdClass</classname>) object.
      </entry>
     </row>
     <row>
      <entry>
       <constant>PDO::FETCH_COLUMN</constant>
      </entry>
      <entry>
       A single value / column.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </section>

 <section xml:id="pdo.fetch-modes.grouped" annotations="chunk:false">
  <title>Multiple Result Fetch Modes</title>
  <para>
   The following special modes for multiple results only work with
   <function>PDOStatement::fetchAll</function>.
  </para>
  <para>
   With the exception of <constant>PDO::FETCH_KEY_PAIR</constant>, the output of
   these modes is combined with the current default fetch mode (set with either
   <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant> or
   <function>PDOStatement::setFetchMode</function>), or can be explicitly
   combined using <link linkend="language.operators.bitwise">bitwise or
   (<literal>|</literal>)</link>.
  </para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Fetch Mode</entry>
      <entry>Summary</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <constant>PDO::FETCH_KEY_PAIR</constant>
      </entry>
      <entry>
       Value pairs, indexed by the first column.
      </entry>
     </row>
     <row>
      <entry>
       <constant>PDO::FETCH_UNIQUE</constant>
      </entry>
      <entry>
       Associative array, indexed by the first column.
      </entry>
     </row>
     <row>
      <entry>
       <constant>PDO::FETCH_GROUP</constant>
      </entry>
      <entry>
       List of associative arrays, grouped by the first column.
      </entry>
     </row>
     <!--
     <row>
      <entry>
       <link linkend="pdo.fetch-modes.group-column">PDO::FETCH_GROUP | PDO::FETCH_COLUMN</link>
      </entry>
      <entry>
       Lists of key-value pairs, indexed by a non-unique field.
      </entry>
     </row>
     -->
    </tbody>
   </tgroup>
  </informaltable>
 </section>

 <section xml:id="pdo.fetch-modes.duplicate-names" annotations="chunk:false">
  <title>Handling of Duplicated Column Names</title>
  <para>
   It's possible for results to contain multiple columns that use the same name.
   For example, when joining 2 tables that both contain a column with the same
   name.
  </para>
  <para>
   Because PHP structures such as arrays and objects don't support multiple keys
   or properties that use the same name, the return array or object will contain
   only 1 of the values using the same name.
  </para>
  <para>
   Which value is returned for a given duplicated name should be considered
   undefined and may change depending on the selected database driver or other
   factors.
  </para>
  <para>
   To avoid this issue, explicitly name columns using an alias. For example:
  </para>
  <informalexample>
   <programlisting role="sql">
    <![CDATA[
SELECT table1.created_at AS t1_created_at,
       table2.created_at AS t2_created_at
FROM table1
JOIN table2 ON table1.table2id = table2.id
]]>
   </programlisting>
  </informalexample>
 </section>

 <section xml:id="pdo.fetch-modes.default" annotations="chunk:false">
  <title>Setting the Default Fetch Mode</title>
  <para>
   You can set the default fetch mode for all queries using
   <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant> with
   <function>PDO::__construct</function> or
   <function>PDO::setAttribute</function>.
  </para>
  <para>
   You can set the default fetch mode for a specific statement using
   <function>PDOStatement::setFetchMode</function>. This affects reuse as a
   prepared statement and iteration (using
   <link linkend="control-structures.foreach">foreach</link>).
  </para>
  <caution>
   <para>
    <function>PDOStatement::setAttribute</function> cannot be used to set the
    default fetch mode. It only accepts driver specific attributes and silently
    ignores attributes it doesn't recognize.
   </para>
  </caution>
 </section>

 <section xml:id="pdo.constants.fetch-default" annotations="chunk:false">
  <title>PDO::FETCH_DEFAULT (<type>int</type>)</title>
  <para>
   Available since PHP 8.0.7.
  </para>
  <para>
   This is a special value that uses the current default fetch mode for a
   <classname>PDOStatement</classname>. It's specifically useful as the default
   value for method parameters when extending
   <classname>PDOStatement</classname> for use with
   <constant>PDO::ATTR_STATEMENT_CLASS</constant>.
  </para>
  <para>
   This value cannot be used with
   <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>.
  </para>
 </section>

 <section xml:id="pdo.constants.fetch-both" annotations="chunk:false">
  <title>PDO::FETCH_BOTH (<type>int</type>)</title>
  <para>
   This is the default fetch mode.
  </para>
  <para>
   <constant>PDO::FETCH_BOTH</constant> returns an array indexed by both column
   number and name. This means that every returned value is duplicated for each
   result row.
  </para>
  <para>
   The column number starts at 0 and is determined by the result column order in
   the query, not (for example) the order columns are defined in the table.
  </para>
  <note>
   <para>
    Using the numeric column index is not recommended as this may change when
    the query is changed, or when the table schema is changed when using
    <literal>SELECT *</literal>.
   </para>
  </note>
  <note>
   <para>
    The number of entries indexed by name may not match the number of entries
    indexed by number in cases where multiple returned columns use the same
    name.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_BOTH);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [id] => 104,
    [0] => 104,
    [name] => Sam,
    [1] => Sam,
    [country] => Ukraine,
    [2] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.constants.fetch-num" annotations="chunk:false">
  <title>PDO::FETCH_NUM (<type>int</type>)</title>
  <para>
   <constant>PDO::FETCH_NUM</constant> returns an array indexed by column number
   only. The column number starts at 0 and is determined by the result column order in
   the query, not (for example) the order columns are defined in the table.
  </para>
  <note>
   <para>
    Using the numeric column index is not recommended as this may change when
    the query is changed, or when the table schema is changed when using
    <literal>SELECT *</literal>.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_NUM);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [0] => 104
    [1] => Sam
    [2] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.constants.fetch-assoc" annotations="chunk:false">
  <title>PDO::FETCH_ASSOC (<type>int</type>)</title>
  <para>
   <constant>PDO::FETCH_ASSOC</constant> returns an array indexed by column name
   only.
  </para>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_ASSOC);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [userid] => 104
    [name] => Sam
    [country] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.constants.fetch-obj" annotations="chunk:false">
  <title>PDO::FETCH_OBJ (<type>int</type>)</title>
  <para>
   <constant>PDO::FETCH_OBJ</constant> returns a <classname>stdClass</classname>
   object.
  </para>
  <para>
   See also <function>PDOStatement::fetchObject</function>.
  </para>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 1");
$row = $stmt->fetch(\PDO::FETCH_OBJ);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
stdClass Object
(
    [userid] => 104
    [name] => Sam
    [country] => Ukraine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.constants.fetch-column" annotations="chunk:false">
  <title>PDO::FETCH_COLUMN (<type>int</type>)</title>
  <para>
   <constant>PDO::FETCH_COLUMN</constant> returns an array of values from a
   single column.
  </para>
  <note>
   <para>
    If the results contain multiple columns, only the first is returned.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT name, country FROM users LIMIT 3");
$row = $stmt->fetchAll(\PDO::FETCH_COLUMN);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [0] => Sam
    [1] => Jamie
    [2] => Robin
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.constants.fetch-key-pair" annotations="chunk:false">
  <title>PDO::FETCH_KEY_PAIR (<type>int</type>)</title>
  <para>
   <constant>PDO::FETCH_KEY_PAIR</constant> returns pairs of values, indexed by
   the first column. The results must contain only 2 columns. This fetch mode
   only makes sense with <function>PDOStatement::fetchAll</function>.
  </para>
  <note>
   <para>
    If the first column is not unique, values will be lost. Which value(s) are
    lost / retained should be considered undefined.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT name, country FROM users LIMIT 3");
$row = $stmt->fetchAll(\PDO::FETCH_KEY_PAIR);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [Sam] => Ukraine
    [Jamie] => United Kingdom
    [Robin] => Palestine
)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.constants.fetch-unique" annotations="chunk:false">
  <title>PDO::FETCH_UNIQUE (<type>int</type>)</title>
  <para>
   <constant>PDO::FETCH_UNIQUE</constant> returns the full result row as an
   associative array, indexed by the first column. This fetch mode only works
   with <function>PDOStatement::fetchAll</function>.
  </para>
  <note>
   <para>
    If the first column is not unique, values will be lost. Which value(s) are
    lost / retained should be considered undefined.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, name, country FROM users LIMIT 3");
$row = $stmt->fetchAll(\PDO::FETCH_UNIQUE);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [104] => Array
        (
            [name] => Sam
            [country] => Ukraine
        )

    [105] => Array
        (
            [name] => Jamie
            [country] => United Kingdom
        )

    [107] => Array
        (
            [name] => Robin
            [country] => Palestine
        )

)
]]>
   </screen>
  </informalexample>
  <para>
   In the above example you'll note that the first column is omitted from the
   array for each row, only available as the key. You can include it by
   repeating the column, as in the following example:
  </para>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT userid, userid, name, country FROM users LIMIT 3");
$row = $stmt->fetchAll(\PDO::FETCH_UNIQUE);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [104] => Array
        (
            [userid] => 104
            [name] => Sam
            [country] => Ukraine
        )

    [105] => Array
        (
            [userid] => 105
            [name] => Jamie
            [country] => United Kingdom
        )

    [107] => Array
        (
            [userid] => 107
            [name] => Robin
            [country] => Palestine
        )

)
]]>
   </screen>
  </informalexample>
 </section>

 <section xml:id="pdo.constants.fetch-group" annotations="chunk:false">
  <title>PDO::FETCH_GROUP (<type>int</type>)</title>
  <para>
   <constant>PDO::FETCH_GROUP</constant> returns lists of associative arrays,
   indexed by a (non-unique) column. This fetch mode only works with
   <function>PDOStatement::fetchAll</function>.
  </para>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$stmt = $pdo->query("SELECT country, userid, name FROM users");
$row = $stmt->fetchAll(\PDO::FETCH_GROUP);
print_r($row);
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Array
(
    [Ukraine] => Array
        (
            [0] => Array
                (
                    [userid] => 104
                    [name] => Sam
                )

            [1] => Array
                (
                    [userid] => 108
                    [name] => Max
                )

        )
    [United Kingdom] => Array
        (
            [0] => Array
                (
                    [userid] => 105
                    [name] => Jamie
                )

        )

    [Palestine] => Array
        (
            [0] => Array
                (
                    [userid] => 107
                    [name] => Robin
                )

            [1] => Array
                (
                    [userid] => 109
                    [name] => Toni
                )
        )
)
]]>
   </screen>
  </informalexample>
 </section>

 <!-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ -->

 <section annotations="chunk:false">
  <title>Old content</title>

  <variablelist role="constant_list">
   <varlistentry> <!-- xml:id="pdo.constants.fetch-default" -->
    <term>
     <constant>PDO::FETCH_DEFAULT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the default fetch mode shall be used. Available as of PHP 8.0.7.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-lazy">
   <term>
    <constant>PDO::FETCH_LAZY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     property names that correspond to the column names returned in the result set.
     <constant>PDO::FETCH_LAZY</constant> returns
     a <classname>PDORow</classname> object
     which creates the object property names as they are accessed.
     Not valid inside <methodname>PDOStatement::fetchAll</methodname>.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry> <!-- xml:id="pdo.constants.fetch-assoc" -->
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name,
     <constant>PDO::FETCH_ASSOC</constant> returns
     only a single value per column name.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-named">
   <term>
    <constant>PDO::FETCH_NAMED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column name as returned in the corresponding result set. If the result
     set contains multiple columns with the same name,
     <constant>PDO::FETCH_NAMED</constant> returns
     an array of values per column name.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry> <!-- xml:id="pdo.constants.fetch-num" -->
   <term>
    <constant>PDO::FETCH_NUM</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by column number as returned in the corresponding result set, starting at
     column 0.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry> <!-- xml:id="pdo.constants.fetch-both" -->
   <term>
    <constant>PDO::FETCH_BOTH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an array indexed
     by both column name and number as returned in the corresponding result set,
     starting at column 0.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry> <!-- xml:id="pdo.constants.fetch-obj" -->
   <term>
    <constant>PDO::FETCH_OBJ</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return each row as an object with
     property names that correspond to the column names returned in the result
     set.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-bound">
   <term>
    <constant>PDO::FETCH_BOUND</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return TRUE and assign the values of
     the columns in the result set to the PHP variables to which they were
     bound with the <methodname>PDOStatement::bindParam</methodname> or
     <methodname>PDOStatement::bindColumn</methodname> methods.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry> <!-- xml:id="pdo.constants.fetch-column" -->
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return only a single requested
     column from the next row in the result set.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-class">
   <term>
    <constant>PDO::FETCH_CLASS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall return a new instance of the
     requested class.
    </simpara>
    <note>
     <simpara>
      The object is initialized by mapping the columns from the result set to
      properties in the class. This process occurs before the constructor is
      called, allowing the population of properties regardless of their
      visibility or whether they are marked as <literal>readonly</literal>. If
      a property does not exist in the class, the magic
      <link linkend="object.set">__set()</link>
      method will be invoked if it exists; otherwise, a dynamic public property
      will be created. However, when <constant>PDO::FETCH_PROPS_LATE</constant>
      is also given, the constructor is called <emphasis>before</emphasis> the
      properties are populated.
     </simpara>
    </note>
   </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-into">
   <term>
    <constant>PDO::FETCH_INTO</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Specifies that the fetch method shall update an existing instance of the
     requested class, mapping the columns to named properties in the class.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-func">
   <term>
    <constant>PDO::FETCH_FUNC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Allows completely customize the way data is treated on the fly (only
     valid inside <methodname>PDOStatement::fetchAll</methodname>).
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry> <!-- xml:id="pdo.constants.fetch-group" -->
   <term>
    <constant>PDO::FETCH_GROUP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Group return by values. Usually combined with
     <constant>PDO::FETCH_COLUMN</constant> or
     <constant>PDO::FETCH_KEY_PAIR</constant>.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry> <!-- xml:id="pdo.constants.fetch-unique" -->
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch only the unique values.
    </simpara>
   </listitem>
   </varlistentry>

   <varlistentry> <!-- xml:id="pdo.constants.fetch-key-pair" -->
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Fetch a two-column result into an array where the first column is a key and the second column
     is the value.
    </simpara>
   </listitem>
   </varlistentry>

   <varlistentry xml:id="pdo.constants.fetch-classtype">
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Determine the class name from the value of first column.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-serialize">
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     As <constant>PDO::FETCH_INTO</constant> but object is provided as a serialized string.
     The class constructor is never called if this flag is set.
     Deprecated as of PHP 8.1.0.
    </simpara>
   </listitem>
   </varlistentry>
   <varlistentry xml:id="pdo.constants.fetch-props-late">
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Call the constructor before setting properties.
    </simpara>
   </listitem>
   </varlistentry>
  </variablelist>
 </section>
</section>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
