<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>
   Fetches the remaining rows from a result set
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>column</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_FUNC</initializer></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Controls the contents of the returned array as documented in
       <methodname>PDOStatement::fetch</methodname>.
       Defaults to value of <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (which defaults to <constant>PDO::FETCH_BOTH</constant>)
      </para>
      <para>
       To return an array consisting of all values of a single column from
       the result set, specify <constant>PDO::FETCH_COLUMN</constant>. You
       can specify which column you want with the
       <parameter>column</parameter> parameter.
      </para>
      <para>
       To index the resulting array by a certain column's value (instead of
       consecutive numbers), put this column's name first in the column
       list in SQL, and use <constant>PDO::FETCH_UNIQUE</constant>.
       This column must contain only unique values or some data will be lost.
      </para>
      <para>
       To group results in the form of a 3-dimensional array indexed by values
       of a specified column, put this column's name first in
       the column list in SQL and use <constant>PDO::FETCH_GROUP</constant>.
      </para>
      <para>
       To group results in the form of a 2-dimensional array
       use bitwise-OR <constant>PDO::FETCH_GROUP</constant> with
       <constant>PDO::FETCH_COLUMN</constant>.
       The results will be grouped by the first column, with the array element's value
       being a list array of the corresponding entries from the second column.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   The following are dynamic parameters that are depending on the fetch mode.
   They can't be used with named parameters.
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       Used with <constant>PDO::FETCH_COLUMN</constant>. Returns the indicated
       0-indexed column.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       Used with <constant>PDO::FETCH_CLASS</constant>. Returns instances of the specified
       class, mapping the columns of each row to named properties in the class.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>constructorArgs</parameter></term>
     <listitem>
      <para>
       Arguments of custom class constructor when the <parameter>mode</parameter> 
       parameter is <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Used with <constant>PDO::FETCH_FUNC</constant>. Returns the results of calling the
       specified function, using each row's columns as parameters in the call.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <methodname>PDOStatement::fetchAll</methodname> returns an array containing
   all of the remaining rows in the result set. The array represents each
   row as either an array of column values or an object with properties
   corresponding to each column name. An empty array is returned if there
   are zero results to fetch.
  </para>
  <para>
   Using this method to fetch large result sets will result in a heavy
   demand on system and possibly network resources. Rather than retrieving
   all of the data and manipulating it in PHP, consider using the database
   server to manipulate the result sets. For example, use the WHERE and
   ORDER BY clauses in SQL to restrict results before retrieving and
   processing them with PHP.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       This method always returns an &array; now, while previously &false; may have
       been returned on failure.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Fetch all remaining rows in a result set</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Fetch all of the remaining rows in the result set */
print "Fetch all of the remaining rows in the result set:\n";
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Fetch all of the remaining rows in the result set:
Array
(
    [0] => Array
        (
            [name] => apple
            [0] => apple
            [colour] => red
            [1] => red
        )

    [1] => Array
        (
            [name] => pear
            [0] => pear
            [colour] => green
            [1] => green
        )

    [2] => Array
        (
            [name] => watermelon
            [0] => watermelon
            [colour] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example><title>Fetching all values of a single column from a result set</title>
    <para>
     The following example demonstrates how to return all of the values of a
     single column from a result set, even though the SQL statement itself
     may return multiple columns per row.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Fetch all of the values of the first column */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example><title>Grouping all values by a single column</title>
    <para>
     The following example demonstrates how to return an associative array
     grouped by the values of the specified column in the result set. The
     array contains three keys: values <literal>apple</literal> and
     <literal>pear</literal> are returned as arrays that contain two
     different colours, while <literal>watermelon</literal> is
     returned as an array that contains only one colour.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Group values by the first column */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(3) "red"
  }
  ["pear"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(6) "yellow"
  }
  ["watermelon"]=>
  array(1) {
    [0]=>
    string(5) "pink"
  }
}

]]>
    </screen>
   </example>
   <example><title>Instantiating a class for each result</title>
    <para>
     The following example demonstrates the behaviour of the
     <constant>PDO::FETCH_CLASS</constant> fetch style.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example><title>Calling a function for each result</title>
    <para>
     The following example demonstrates the behaviour of the
     <constant>PDO::FETCH_FUNC</constant> fetch style.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
