<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>
   Returns an array containing all of the result set rows
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>array</type><type>false</type></type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>fetch_style</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>fetch_argument</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>ctor_args</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>fetch_style</parameter></term>
     <listitem>
      <para>
       Controls the contents of the returned array as documented in
       <function>PDOStatement::fetch</function>.
       Defaults to value of <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (which defaults to <constant>PDO::FETCH_BOTH</constant>)
      </para>
      <para>
       To return an array consisting of all values of a single column from
       the result set, specify <constant>PDO::FETCH_COLUMN</constant>. You
       can specify which column you want with the
       <parameter>fetch_argument</parameter> parameter.
      </para>
      <para>
       To fetch only the unique values of a single column from the result set,
       bitwise-OR <constant>PDO::FETCH_COLUMN</constant> with
       <constant>PDO::FETCH_UNIQUE</constant>.
      </para>
      <para>
       To return an associative array grouped by the values of a specified
       column, bitwise-OR <constant>PDO::FETCH_COLUMN</constant> with
       <constant>PDO::FETCH_GROUP</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fetch_argument</parameter></term>
     <listitem>
      <para>
       This argument has a different meaning depending on the value of 
       the <parameter>fetch_style</parameter> parameter:
       <itemizedlist>
        <listitem>
         <para>
          <constant>PDO::FETCH_COLUMN</constant>: Returns the indicated 0-indexed 
           column.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_CLASS</constant>: Returns instances of the specified
          class, mapping the columns of each row to named properties in the class.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_FUNC</constant>: Returns the results of calling the
          specified function, using each row's columns as parameters in the call.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ctor_args</parameter></term>
     <listitem>
      <para>
       Arguments of custom class constructor when the <parameter>fetch_style</parameter> 
       parameter is <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PDOStatement::fetchAll</function> returns an array containing
   all of the remaining rows in the result set. The array represents each
   row as either an array of column values or an object with properties
   corresponding to each column name. An empty array is returned if there
   are zero results to fetch, or &false; on failure.
  </para>
  <para>
   Using this method to fetch large result sets will result in a heavy
   demand on system and possibly network resources. Rather than retrieving
   all of the data and manipulating it in PHP, consider using the database
   server to manipulate the result sets. For example, use the WHERE and
   ORDER BY clauses in SQL to restrict results before retrieving and
   processing them with PHP.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Fetch all remaining rows in a result set</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Fetch all of the remaining rows in the result set */
print("Fetch all of the remaining rows in the result set:\n");
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Fetch all of the remaining rows in the result set:
Array
(
    [0] => Array
        (
            [name] => apple
            [0] => apple
            [colour] => red
            [1] => red
        )

    [1] => Array
        (
            [name] => pear
            [0] => pear
            [colour] => green
            [1] => green
        )

    [2] => Array
        (
            [name] => watermelon
            [0] => watermelon
            [colour] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example><title>Fetching all values of a single column from a result set</title>
    <para>
     The following example demonstrates how to return all of the values of a
     single column from a result set, even though the SQL statement itself
     may return multiple columns per row.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Fetch all of the values of the first column */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example><title>Grouping all values by a single column</title>
    <para>
     The following example demonstrates how to return an associative array
     grouped by the values of the specified column in the result set. The
     array contains three keys: values <literal>apple</literal> and
     <literal>pear</literal> are returned as arrays that contain two
     different colours, while <literal>watermelon</literal> is
     returned as an array that contains only one colour.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Group values by the first column */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(3) "red"
  }
  ["pear"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(6) "yellow"
  }
  ["watermelon"]=>
  array(1) {
    [0]=>
    string(5) "pink"
  }
}

]]>
    </screen>
   </example>
   <example><title>Instantiating a class for each result</title>
    <para>
     The following example demonstrates the behaviour of the
     <constant>PDO::FETCH_CLASS</constant> fetch style.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example><title>Calling a function for each result</title>
    <para>
     The following example demonstrates the behaviour of the
     <constant>PDO::FETCH_FUNC</constant> fetch style.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::query</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::setFetchMode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
