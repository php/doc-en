<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="pdo.setattribute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::setAttribute</refname>
  <refpurpose>
   Set an attribute
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDO::setAttribute</methodname>
   <methodparam><type>int</type><parameter>attribute</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>

  <para>
   Sets an attribute on the database handle. Some of the available generic
   attributes are listed below; some drivers may make use of
   additional driver specific attributes.
   <itemizedlist>
    <listitem><para>
     <literal>PDO::ATTR_CASE</literal>: Force column names to a specific case.
     <itemizedlist>
      <listitem><para>
       <literal>PDO::CASE_LOWER</literal>: Force column names to lower case.
      </para></listitem>
      <listitem><para>
       <literal>PDO::CASE_NATURAL</literal>: Leave column names as returned by
       the database driver.
      </para></listitem>
      <listitem><para>
       <literal>PDO::CASE_UPPER</literal>: Force column names to upper case.
      </para></listitem>
     </itemizedlist>
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_ERRMODE</literal>: Error reporting.
     <itemizedlist>
      <listitem><para><literal>PDO::ERRMODE_SILENT</literal>:
       Just set error codes.</para></listitem>
      <listitem><para><literal>PDO::ERRMODE_WARNING</literal>:
       Raise <constant>E_WARNING</constant>.</para></listitem>
      <listitem><para><literal>PDO::ERRMODE_EXCEPTION</literal>:
       Throw <link linkend="class.pdoexception">exceptions</link>.</para></listitem>
     </itemizedlist>
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_ORACLE_NULLS</literal>
     (available with all drivers, not just Oracle):
     Conversion of NULL and empty strings.
     <itemizedlist>
      <listitem><para><literal>PDO::NULL_NATURAL</literal>:
       No conversion.</para></listitem>
      <listitem><para><literal>PDO::NULL_EMPTY_STRING</literal>:
       Empty string is converted to &null;.</para></listitem>
      <listitem><para><literal>PDO::NULL_TO_STRING</literal>:
       NULL is converted to an empty string.</para></listitem>
     </itemizedlist>
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_STRINGIFY_FETCHES</literal>:
     Convert numeric values to strings when fetching.
     Requires <type>bool</type>.
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_STATEMENT_CLASS</literal>:
     Set user-supplied statement class derived from PDOStatement.
     Cannot be used with persistent PDO instances.
     Requires <literal>array(string classname, array(mixed constructor_args))</literal>.
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_TIMEOUT</literal>:
     Specifies the timeout duration in seconds.  Not all drivers support this option,
     and its meaning may differ from driver to driver.  For example, sqlite will wait
     for up to this time value before giving up on obtaining an writable lock, but
     other drivers may interpret this as a connect or a read timeout interval.
     Requires <type>int</type>.
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_AUTOCOMMIT</literal>
     (available in OCI, Firebird and MySQL):
     Whether to autocommit every single statement.
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_EMULATE_PREPARES</literal>
     Enables or disables emulation of prepared statements.  Some drivers do 
     not support native prepared statements or have limited support for them.
     Use this setting to force PDO to either always emulate prepared 
     statements (if &true; and emulated prepares are supported by the driver), or to try to use native prepared statements (if 
     &false;).  It will always fall back to emulating the prepared statement
     if the driver cannot successfully prepare the current query. 
     Requires <type>bool</type>.
     </para></listitem>
    <listitem><para><literal>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</literal>
    (available in MySQL):
    Use buffered queries.
    </para></listitem>
    <listitem><para><literal>PDO::ATTR_DEFAULT_FETCH_MODE</literal>:
    Set default fetch mode. Description of modes is available in
    <function>PDOStatement::fetch</function> documentation.
    </para></listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
