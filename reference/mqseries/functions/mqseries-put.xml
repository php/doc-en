<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.mqseries-put" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mqseries_put</refname>
  <refpurpose>MQSeries MQPUT</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>mqseries_put</methodname>
   <methodparam><type>resource</type><parameter>hConn</parameter></methodparam>
   <methodparam><type>resource</type><parameter>hObj</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">md</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">pmo</parameter></methodparam>
   <methodparam><type>string</type><parameter>message</parameter></methodparam>
   <methodparam><type>resource</type><parameter role="reference">compCode</parameter></methodparam>
   <methodparam><type>resource</type><parameter role="reference">reason</parameter></methodparam>
  </methodsynopsis>
  <para>
   The
   <function>mqseries_put</function>
   (MQPUT) call puts a message on a queue or distribution list. The queue or
   distribution list must already be open.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>hConn</parameter>
     </term>
     <listitem>
      <para>Connection handle.</para>
      <para>This handle represents the connection to the queue manager.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>hObj</parameter>
     </term>
     <listitem>
      <para>Object handle.</para>
      <para>This handle represents the object to be used.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>md</parameter>
     </term>
     <listitem>
      <para>Message descriptor (MQMD).</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>pmo</parameter>
     </term>
     <listitem>
      <para>Put message options (MQPMO).</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>message</parameter>
     </term>
     <listitem>
      <para>The actual message to put onto the queue.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>compCode</parameter>
     </term>
     <listitem>
      <para>Completion code.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>reason</parameter>
     </term>
     <listitem>
      <para>Reason code qualifying the compCode.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>&return.void;</para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     <function>mqseries_put</function>
     example
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// open connection to the queue manager
    mqseries_conn('WMQ1', $conn, $comp_code, $reason);
// $conn now hold the reference to the connection to the queue manager.

// open the connectio to the testq queueu
    mqseries_open(
                $conn,
                array('ObjectName' => 'TESTQ'),
                MQSERIES_MQOO_INPUT_AS_Q_DEF | MQSERIES_MQOO_FAIL_IF_QUIESCING | MQSERIES_MQOO_OUTPUT,
                $obj,
                $comp_code,
                $reason);
// $obj now holds the reference to the object (TESTQ)

// setup the message descriptor array. Check MQSeries reference manuals.
    $md = array(
                'Version' => MQSERIES_MQMD_VERSION_1,
                'Expiry' => MQSERIES_MQEI_UNLIMITED,
                'Report' => MQSERIES_MQRO_NONE,
                'MsgType' => MQSERIES_MQMT_DATAGRAM,
                'Format' => MQSERIES_MQFMT_STRING,
                'Priority' => 1,
                'Persistence' => MQSERIES_MQPER_PERSISTENT);

// setup the put message options.
    $pmo = array('Options' => MQSERIES_MQPMO_NEW_MSG_ID|MQSERIES_MQPMO_SYNCPOINT);

// put the message 'Ping' on the queueu.
    mqseries_put($conn, $obj, $md, $pmo, 'Ping', $comp_code, $reason);

    if ($comp_code !== MQSERIES_MQCC_OK) {
        printf("put CompCode:%d Reason:%d Text:%s<br>\n", $comp_code, $reason, mqseries_strerror($reason));
    }

// close the object reference $obj
    mqseries_close($conn, $obj, MQSERIES_MQCO_NONE, $comp_code, $reason);

// disconnect from the queue manager.
    mqseries_disc($conn, $comp_code, $reason);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mqseries_conn</function></member>
    <member><function>mqseries_connx</function></member>
    <member><function>mqseries_open</function></member>
    <member><function>mqseries_get</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
