<?xml version="1.0" encoding="utf-8"?>
<refentry xml:id="function.mqseries-connx" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mqseries_connx</refname>
  <refpurpose>MQSeries MQCONNX</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>mqseries_connx</methodname>
   <methodparam><type>string</type><parameter>qManagerName</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">connOptions</parameter></methodparam>
   <methodparam><type>resource</type><parameter role="reference">hconn</parameter></methodparam>
   <methodparam><type>resource</type><parameter role="reference">compCode</parameter></methodparam>
   <methodparam><type>resource</type><parameter role="reference">reason</parameter></methodparam>
  </methodsynopsis>
  <para>
   The
   <function>mqseries_connx</function>
   (MQCONNX) call connects an application program to a queue manager. It
   provides a queue manager connection handle, which is used by the application
   on subsequent MQ calls.
  </para>
  <para>
   The <function>mqseries_connx</function> call is like the 
   <function>mqseries_conn</function> (MQCONN) call, except that MQCONNX 
   allows options to be specified to control the way that the call works.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>qManagerName</parameter>
     </term>
     <listitem>
      <para>Name of queue manager.</para>
      <para>Name of the queue manager the application wishes to connect.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>connOps</parameter>
     </term>
     <listitem>
      <para>Options that control the action of function</para>
      <para>See also the MQCNO structure.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term>
      <parameter>hConn</parameter>
     </term>
     <listitem>
      <para>Connection handle.</para>
      <para>This handle represents the connection to the queue manager.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>compCode</parameter>
     </term>
     <listitem>
      <para>Completion code.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>reason</parameter>
     </term>
     <listitem>
      <para>Reason code qualifying the compCode.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>&return.void;</para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     <function>mqseries_connx</function>
     example
    </title>
    <programlisting role="php">
<![CDATA[
<?php
    $mqcno = array(
        'Version' => MQSERIES_MQCNO_VERSION_2,
        'Options' => MQSERIES_MQCNO_STANDARD_BINDING,
        'MQCD' => array('ChannelName' => 'MQNX9420.CLIENT',
        'ConnectionName' => 'localhost',
        'TransportType' => MQSERIES_MQXPT_TCP)
    );

    mqseries_connx('MQNX9420', $mqcno, $conn, $comp_code,$reason);
    if ($comp_code !== MQSERIES_MQCC_OK) {
        printf("Connx CompCode:%d Reason:%d Text:%s<br>\n", $comp_code, $reason, mqseries_strerror($reason));
        exit;
    }
 
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>
     <function>mqseries_connx</function>
     example using SSL connection &amp; OCSP Responder URL
    </title>
    <programlisting role="php">
<![CDATA[
<?php
    $mqcno = array(
        'Version' => 4, //MQCNO_VERSION_4
        'Options' => MQSERIES_MQCNO_STANDARD_BINDING,
        'MQCD' => array(
            'Version' => 7, //MQCD_VERSION_7
            'ConnectionName' => 'localhost', 
            'TransportType' => MQSERIES_MQXPT_TCP, 
            'ChannelName' => 'CONNECTIONCHANNEL', 
            'SSLCipherSpec' => 'NULL_SHA'
        ), 
        'MQSCO' => array(
            'KeyRepository' => '/var/mqm/qmgrs/QUEUEMGR/ssl/key', //Local path where the SSL key repository can be found
            'MQAIR' => array(
                'Version' => 2, //MQAIR_VERSION_2
                'AuthInfoType' => 2, //MQAIT_OCSP 
                'OCSPResponderURL' => 'http://dummy.OCSP.responder'
            )
        )
    );

    mqseries_connx('QUEUEMGR', $mqcno, $conn, $comp_code,$reason);
    if ($comp_code !== MQSERIES_MQCC_OK) {
        printf("Connx CompCode:%d Reason:%d Text:%s<br>\n", $comp_code, $reason, mqseries_strerror($reason));
        exit;
    }
 
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mqseries_disc</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
