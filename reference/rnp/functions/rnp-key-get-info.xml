<?xml version="1.0" encoding="utf-8"?>
<refentry xml:id="function.rnp-key-get-info" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>rnp_key_get_info</refname>
  <refpurpose>Get information about the key</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>rnp_key_get_info</methodname>
   <methodparam><type>RnpFFI</type><parameter>ffi</parameter></methodparam>
   <methodparam><type>string</type><parameter>key_fp</parameter></methodparam>
  </methodsynopsis>
  <para>

  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>ffi</parameter></term>
    <listitem>
     <para>
      &rnp.parameter.ffi-description;
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>key_fp</parameter></term>
    <listitem>
     <para>
      Key fingerprint.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   An associative array with information about the key&return.falseforfailure;.
  </para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Key</entry>
      <entry>Data type</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>"is_primary"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is the primary key.
      </entry>
     </row>
     <row>
      <entry><literal>"is_sub"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is a subkey.
      </entry>
     </row>
     <row>
      <entry><literal>"is_valid"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if public key is valid.
       This includes checks of the self-signatures,
       expiration times, revocations and so on.
      </entry>
     </row>
     <row>
      <entry><literal>"is_revoked"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is revoked.
      </entry>
     </row>
     <row>
      <entry><literal>"is_superseded"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is superseded. Present only if the key is revoked.
      </entry>
     </row>
     <row>
      <entry><literal>"is_compromised"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is compromised. Present only if the key is revoked.
      </entry>
     </row>
     <row>
      <entry><literal>"is_retired"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is retired. Present only if the key is revoked.
      </entry>
     </row>
     <row>
      <entry><literal>"is_expired"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is expired.
      </entry>
     </row>
     <row>
      <entry><literal>"have_secret"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key has secret part.
      </entry>
     </row>
     <row>
      <entry><literal>"is_locked"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is currently locked. Only present for secret keys.
      </entry>
     </row>
     <row>
      <entry><literal>"is_protected"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key is protected. Only present for secret keys.
       A protected key is one that is encrypted and can be safely held in memory
       and locked/unlocked as needed.
      </entry>
     </row>
     <row>
      <entry><literal>"have_public"</literal></entry>
      <entry>boolean</entry>
      <entry>
       &true; if this key has public part. Generally all keys would have public part.
      </entry>
     </row>
     <row>
      <entry><literal>"valid_till"</literal></entry>
      <entry>integer</entry>
      <entry>
       The timestamp till which key can be considered as valid.
       Note: this will take into account not only key's expiration, but revocations as well.
       For the subkey primary key's validity time will be also checked.
      </entry>
     </row>
     <row>
      <entry><literal>"bits"</literal></entry>
      <entry>integer</entry>
      <entry>
       Number of bits in the key. For EC-based keys it will contain size of the curve.
      </entry>
     </row>
     <row>
      <entry><literal>"alg"</literal></entry>
      <entry>string</entry>
      <entry>
       Key algorithm name.
      </entry>
     </row>
     <row>
      <entry><literal>"subkeys"</literal></entry>
      <entry>array</entry>
      <entry>
       An indexed array containing fingerprint strings of subkeys. Only present for
       primary keys. Could be empty if primary key has no subkeys.
      </entry>
     </row>
     <row>
      <entry><literal>"uids"</literal></entry>
      <entry>array</entry>
      <entry>
       An indexed array containing user ID strings. Only present for
       primary keys. Could be empty if primary key has no user ID-s.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
