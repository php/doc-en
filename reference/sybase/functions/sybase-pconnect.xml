<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.sybase-pconnect">
 <refnamediv>
  <refname>sybase_pconnect</refname>
  <refpurpose>Open persistent Sybase connection</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
   &warn.removed.function-7-0-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>sybase_pconnect</methodname>
   <methodparam choice="opt"><type>string</type><parameter>servername</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>username</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>password</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>charset</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>appname</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sybase_pconnect</function> acts very much like
   <function>sybase_connect</function> with two major differences.
  </para>
  <para>
   First, when connecting, the function would first try to find a
   (persistent) link that's already open with the same host,
   username and password.  If one is found, an identifier for it
   will be returned instead of opening a new connection.
  </para>
  <para>
   Second, the connection to the SQL server will not be closed when
   the execution of the script ends.  Instead, the link will remain
   open for future use (<function>sybase_close</function> will not
   close links established by <function>sybase_pconnect</function>).
  </para>
  <para>
   This type of links is therefore called 'persistent'.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>servername</parameter></term>
     <listitem>
      <para>
       The servername argument has to be a valid servername that is defined
       in the 'interfaces' file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>username</parameter></term>
     <listitem>
      <para>
       Sybase user name
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       Password associated with <parameter>username</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>charset</parameter></term>
     <listitem>
      <para>
       Specifies the charset for the connection
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>appname</parameter></term>
     <listitem>
      <para>
       Specifies an <literal>appname</literal> for the Sybase connection.
       This allow you to make separate connections in the same script to the
       same database. This may come handy when you have started a transaction
       in your current connection, and you need to be able to do a separate
       query which cannot be performed inside this transaction.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a positive Sybase persistent link identifier on success, or
   &false; on error.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sybase_connect</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
