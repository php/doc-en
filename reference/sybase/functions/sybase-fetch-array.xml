<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.sybase-fetch-array">
 <refnamediv>
  <refname>sybase_fetch_array</refname>
  <refpurpose>Fetch row as array</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
   &warn.removed.function-7-0-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>sybase_fetch_array</methodname>
   <methodparam><type>resource</type><parameter>result</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sybase_fetch_array</function> is an extended version of
   <function>sybase_fetch_row</function>.  In addition to storing the
   data in the numeric indices of the result array, it also stores
   the data in associative indices, using the field names as keys.
  </para>
  <para>
   An important thing to note is that using
   <function>sybase_fetch_array</function> is NOT significantly
   slower than using <function>sybase_fetch_row</function>, while it
   provides a significant added value.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>result</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns an array that corresponds to the fetched row, or &false; if there
   are no more rows.
  </para>
  <note>
   <para>
    When selecting fields with identical names (for instance, in a join), the
    associative indices will have a sequential number prepended. See the
    example for details.
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Identical fieldnames</title>
    <programlisting role="php">
<![CDATA[
<?php

$dbh = sybase_connect('SYBASE', '', '');
$q = sybase_query('SELECT * FROM p, a WHERE p.person_id= a.person_id');
var_dump(sybase_fetch_array($q));
sybase_close($dbh);
?>
]]>
    </programlisting>
    <para>
     The above example would produce the following output (assuming the two tables only
     have each one column called "person_id"):
    </para>
    <screen>
<![CDATA[
array(4) {
  [0]=>
  int(1)
  ["person_id"]=>
  int(1)
  [1]=>
  int(1)
  ["person_id1"]=>
  int(1)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sybase_fetch_row</function></member>
    <member><function>sybase_fetch_assoc</function></member>
    <member><function>sybase_fetch_object</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
