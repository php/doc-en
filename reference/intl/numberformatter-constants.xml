<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.1.2.1 $ -->
<section xml:id="intl.numberformatter-constants"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;

 <section xml:id="intl.numberformatter-constants.UNumberFormatStyle">
  <para>
   These styles are used by the <function>numfmt_create</function>
   to define the type of the formatter.
   <variablelist>
    <varlistentry>
     <term>
      <constant>NumberFormatter::PATTERN_DECIMAL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Decimal format defined by pattern</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::DECIMAL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Decimal format</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::CURRENCY</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Currency format</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PERCENT</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Percent format</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::SCIENTIFIC</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Scientific format</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::SPELLOUT</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Spellout rule-based format</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ORDINAL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Ordinal rule-based format</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::DURATION</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Duration rule-based format</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PATTERN_RULEBASED</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Rule-based format defined by pattern</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::DEFAULT</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Default format for the locale</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::IGNORE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Alias for PATTERN_DECIMAL</simpara>
     </listitem>
    </varlistentry>
   </variablelist>





  </para>
 </section>

 <section xml:id="intl.numberformatter-constants.types">
  <para>
   These constants define how the numbers are parsed or formatted. They should
   be used as arguments to <function>numfmt_format</function>
   and <function>numfmt_parse</function>.
   <variablelist>
    <varlistentry>
     <term>
      <constant>NumberFormatter::TYPE_DEFAULT</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Derive the type from variable type</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::TYPE_INT32</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Format/parse as 32-bit integer</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::TYPE_INT64</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Format/parse as 64-bit integer</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::TYPE_DOUBLE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Format/parse as floating point value</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::TYPE_CURRENCY</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Format/parse as currency value</simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </section>

 <section xml:id="intl.numberformatter-constants.UNumberFormatAttribute">
  <para>
   Number format attribute used by
   <function>numfmt_get_attribute</function>
   and
   <function>numfmt_set_attribute</function>
   .
   <variablelist>
    <varlistentry>
     <term>
      <constant>NumberFormatter::PARSE_INT_ONLY</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Parse integers only.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::GROUPING_USED</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Use grouping separator.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::DECIMAL_ALWAYS_SHOWN</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Always show decimal point.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MAX_INTEGER_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Maximum integer digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MIN_INTEGER_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Minimum integer digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::INTEGER_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Integer digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MAX_FRACTION_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Maximum fraction digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MIN_FRACTION_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Minimum fraction digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::FRACTION_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Fraction digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MULTIPLIER</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Multiplier.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::GROUPING_SIZE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Grouping size.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUNDING_MODE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Rounding Mode.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUNDING_INCREMENT</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Rounding increment.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::FORMAT_WIDTH</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The width to which the output of format() is padded.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PADDING_POSITION</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       The position at which padding will take place. See pad position
       constants for possible argument values.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::SECONDARY_GROUPING_SIZE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Secondary grouping size.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::SIGNIFICANT_DIGITS_USED</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Use significant digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MIN_SIGNIFICANT_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Minimum significant digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MAX_SIGNIFICANT_DIGITS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Maximum significant digits.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::LENIENT_PARSE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Lenient parse mode used by rule-based formats.</simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </section>

 <section
  xml:id="intl.numberformatter-constants.UNumberFormatTextAttribute">
  <para>
   Number format text attribute used by
   <function>numfmt_get_text_attribute</function> and
   <function>numfmt_set_text_attribute</function>.
   <variablelist>
    <varlistentry>
     <term>
      <constant>NumberFormatter::POSITIVE_PREFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Positive prefix.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::POSITIVE_SUFFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Positive suffix.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::NEGATIVE_PREFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Negative prefix.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::NEGATIVE_SUFFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Negative suffix.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PADDING_CHARACTER</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The character used to pad to the format width.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::CURRENCY_CODE</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The ISO currency code.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::DEFAULT_RULESET</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       The default rule set. This is only available with rule-based
       formatters.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PUBLIC_RULESETS</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       The public rule sets. This is only available with rule-based
       formatters. This is a read-only attribute. The public rulesets are
       returned as a single string, with each ruleset name delimited by ';'
       (semicolon).
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </section>

 <section xml:id="intl.numberformatter-constants.UNumberFormatSymbol">
  <para>
   Number format symbols used by <function>numfmt_get_symbol</function>
   and <function>numfmt_set_symbol</function>.
   <variablelist>
    <varlistentry>
     <term>
      <constant>NumberFormatter::DECIMAL_SEPARATOR_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The decimal separator.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::GROUPING_SEPARATOR_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The grouping separator.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PATTERN_SEPARATOR_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The pattern separator.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PERCENT_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The percent sign.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ZERO_DIGIT_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Zero.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::DIGIT_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Character representing a digit in the pattern.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MINUS_SIGN_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The minus sign.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PLUS_SIGN_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The plus sign.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::CURRENCY_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The currency symbol.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::INTL_CURRENCY_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The international currency symbol.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MONETARY_SEPARATOR_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The monetary separator.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::EXPONENTIAL_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The exponential symbol.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PERMILL_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Per mill symbol.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PAD_ESCAPE_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Escape padding character.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::INFINITY_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Infinity symbol.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::NAN_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Not-a-number symbol.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::SIGNIFICANT_DIGIT_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Significant digit symbol.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>The monetary grouping separator.</simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </section>

 <section xml:id="intl.numberformatter-constants.UNumberFormatRoundingMode">
  <para>
   Rounding mode values used by <function>numfmt_get_attribute</function>
   and <function>numfmt_set_attribute</function> with
   <constant>NumberFormatter::ROUNDING_MODE</constant> attribute.
   <variablelist>
    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUND_CEILING</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Rounding mode to round towards positive infinity.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUND_DOWN</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Rounding mode to round towards zero.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUND_FLOOR</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Rounding mode to round towards negative infinity.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUND_HALFDOWN</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       Rounding mode to round towards "nearest neighbor" unless both neighbors
       are equidistant, in which case round down.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUND_HALFEVEN</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       Rounding mode to round towards the "nearest neighbor" unless both
       neighbors are equidistant, in which case, round towards the even
       neighbor.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUND_HALFUP</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>
       Rounding mode to round towards "nearest neighbor" unless both neighbors
       are equidistant, in which case round up.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::ROUND_UP</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Rounding mode to round away from zero.</simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </section>

 <section xml:id="intl.numberformatter-constants.UNumberFormatPadPosition">
  <para>
   Pad position values used by <function>numfmt_get_attribute</function>
   and <function>numfmt_set_attribute</function> with
   <constant>NumberFormatter::PADDING_POSITION</constant> attribute.
   <variablelist>
    <varlistentry>
     <term>
      <constant>NumberFormatter::PAD_AFTER_PREFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Pad characters inserted after the prefix.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PAD_AFTER_SUFFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Pad characters inserted after the suffix.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PAD_BEFORE_PREFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Pad characters inserted before the prefix.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>NumberFormatter::PAD_BEFORE_SUFFIX</constant>
      (<type>integer</type>)
     </term>
     <listitem>
      <simpara>Pad characters inserted before the suffix.</simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </section>

</section>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->

