<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<phpdoc:classref xml:id="class.intlbreakiterator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The IntlBreakIterator class</title>
 <titleabbrev>IntlBreakIterator</titleabbrev>

 <partintro>

<!-- {{{ IntlBreakIterator intro -->
  <section xml:id="intlbreakiterator.intro">
   &reftitle.intro;
   <para>
    A “break iterator” is an ICU object that exposes methods for locating
    boundaries in text (e.g. word or sentence boundaries).
    The PHP <classname>IntlBreakIterator</classname> serves as the base class
    for all types of ICU break iterators. Where extra functionality is
    available, the intl extension may expose the ICU break iterator with
    suitable subclasses, such as
    <classname>IntlRuleBasedBreakIterator</classname> or
    <classname>IntlCodePointBreakIterator</classname>.
   </para>
   <para>
    This class implements <classname>Traversable</classname>. Traversing an
    <classname>IntlBreakIterator</classname> yields non-negative integer
    values representing the successive locations of the text boundaries,
    expressed as UTF-8 code units (byte) counts, taken from the beginning of
    the text (which has the location <literal>0</literal>). The keys yielded
    by the iterator simply form the sequence of natural numbers
    <literal>{0, 1, 2, …}</literal>.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="intlbreakiterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>IntlBreakIterator</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>IntlBreakIterator</classname>
     </ooclass>

     <oointerface>
      <interfacename>Traversable</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.done">IntlBreakIterator::DONE</varname>
     <initializer>-1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-none">IntlBreakIterator::WORD_NONE</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-none-limit">IntlBreakIterator::WORD_NONE_LIMIT</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-number">IntlBreakIterator::WORD_NUMBER</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-number-limit">IntlBreakIterator::WORD_NUMBER_LIMIT</varname>
     <initializer>200</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-letter">IntlBreakIterator::WORD_LETTER</varname>
     <initializer>200</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-letter-limit">IntlBreakIterator::WORD_LETTER_LIMIT</varname>
     <initializer>300</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-kana">IntlBreakIterator::WORD_KANA</varname>
     <initializer>300</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-kana-limit">IntlBreakIterator::WORD_KANA_LIMIT</varname>
     <initializer>400</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-ideo">IntlBreakIterator::WORD_IDEO</varname>
     <initializer>400</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.word-ideo-limit">IntlBreakIterator::WORD_IDEO_LIMIT</varname>
     <initializer>500</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.line-soft">IntlBreakIterator::LINE_SOFT</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.line-soft-limit">IntlBreakIterator::LINE_SOFT_LIMIT</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.line-hard">IntlBreakIterator::LINE_HARD</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.line-hard-limit">IntlBreakIterator::LINE_HARD_LIMIT</varname>
     <initializer>200</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.sentence-term">IntlBreakIterator::SENTENCE_TERM</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.sentence-term-limit">IntlBreakIterator::SENTENCE_TERM_LIMIT</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.sentence-sep">IntlBreakIterator::SENTENCE_SEP</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlbreakiterator.constants.sentence-sep-limit">IntlBreakIterator::SENTENCE_SEP_LIMIT</varname>
     <initializer>200</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.intlbreakiterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

<!-- {{{ IntlBreakIterator constants -->
  <section xml:id="intlbreakiterator.constants">
   &reftitle.constants;
   <variablelist>

    <varlistentry xml:id="intlbreakiterator.constants.done">
     <term><constant>IntlBreakIterator::DONE</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-none">
     <term><constant>IntlBreakIterator::WORD_NONE</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-none-limit">
     <term><constant>IntlBreakIterator::WORD_NONE_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-number">
     <term><constant>IntlBreakIterator::WORD_NUMBER</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-number-limit">
     <term><constant>IntlBreakIterator::WORD_NUMBER_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-letter">
     <term><constant>IntlBreakIterator::WORD_LETTER</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-letter-limit">
     <term><constant>IntlBreakIterator::WORD_LETTER_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-kana">
     <term><constant>IntlBreakIterator::WORD_KANA</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-kana-limit">
     <term><constant>IntlBreakIterator::WORD_KANA_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-ideo">
     <term><constant>IntlBreakIterator::WORD_IDEO</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.word-ideo-limit">
     <term><constant>IntlBreakIterator::WORD_IDEO_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-soft">
     <term><constant>IntlBreakIterator::LINE_SOFT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-soft-limit">
     <term><constant>IntlBreakIterator::LINE_SOFT_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-hard">
     <term><constant>IntlBreakIterator::LINE_HARD</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.line-hard-limit">
     <term><constant>IntlBreakIterator::LINE_HARD_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-term">
     <term><constant>IntlBreakIterator::SENTENCE_TERM</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-term-limit">
     <term><constant>IntlBreakIterator::SENTENCE_TERM_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-sep">
     <term><constant>IntlBreakIterator::SENTENCE_SEP</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlbreakiterator.constants.sentence-sep-limit">
     <term><constant>IntlBreakIterator::SENTENCE_SEP_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.intl.entities.intlbreakiterator;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
