<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="intldateformatter.setlenient" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>IntlDateFormatter::setLenient</refname>
  <refname>datefmt_set_lenient</refname>
  <refpurpose>Set the leniency of the parser</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <para>
   &style.oop;
  </para>
   <methodsynopsis role="oop">
   <modifier>public</modifier> <type>void</type><methodname>IntlDateFormatter::setLenient</methodname>
   <methodparam><type>bool</type><parameter>lenient</parameter></methodparam>
  </methodsynopsis>
  <para>
   &style.procedural;
  </para>
  <methodsynopsis role="procedural">
   <type>void</type><methodname>datefmt_set_lenient</methodname>
   <methodparam><type>IntlDateFormatter</type><parameter>formatter</parameter></methodparam>
   <methodparam><type>bool</type><parameter>lenient</parameter></methodparam>
  </methodsynopsis>
  <para>
  Define if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.
  Enabling lenient parsing allows the parser to accept otherwise flawed date or 
  time patterns, parsing as much as possible to obtain a value.
  Extra space, unrecognized tokens, or invalid values ("February 30th") are not accepted.  
  </para> 
  </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>formatter</parameter></term>
     <listitem>
      <para>
       The formatter resource      
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>lenient</parameter></term>
     <listitem>
      <para>
       Sets whether the parser is lenient or not, default is &true; (lenient).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
   
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
   <example>
    <title><function>datefmt_set_lenient</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$fmt = datefmt_create(
    'en_US', 
    IntlDateFormatter::FULL, 
    IntlDateFormatter::FULL, 
    'America/Los_Angeles', 
    IntlDateFormatter::GREGORIAN, 
    'dd/MM/yyyy'
);
echo 'lenient of the formatter is : ';
if ($fmt->isLenient()) {
    echo 'TRUE';
} else {
    echo 'FALSE';
}
datefmt_parse($fmt, '35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . datefmt_parse($fmt, '35/13/1971');
if (intl_get_error_code() != 0) {
    echo "\nError_msg is : " . intl_get_error_message();
    echo "\nError_code is : " . intl_get_error_code();
}
datefmt_set_lenient($fmt, false);
echo "\nNow lenient of the formatter is : ";
if ($fmt->isLenient()) {
    echo 'TRUE';
} else {
    echo 'FALSE';
}
datefmt_parse($fmt, '35/13/1971');
echo "\nTrying to do parse('35/13/1971').\nResult is : " . datefmt_parse($fmt, '35/13/1971');
if (intl_get_error_code() != 0) {
    echo "\nError_msg is : ".intl_get_error_message();
    echo "\nError_code is : ".intl_get_error_code();
}

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>OO example</title>
    <programlisting role="php">
<![CDATA[
<?php
$fmt = new IntlDateFormatter(
    'en_US',
    IntlDateFormatter::FULL,
    IntlDateFormatter::FULL,
    'America/Los_Angeles',
    IntlDateFormatter::GREGORIAN,
    'dd/MM/yyyy'
);
echo 'lenient of the formatter is : ';
if ($fmt->isLenient()) {
    echo 'TRUE';
} else {
    echo 'FALSE';
}
$fmt->parse('35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . $fmt->parse('35/13/1971');
if (intl_get_error_code() != 0) {
    echo "\nError_msg is : " . intl_get_error_message();
    echo "\nError_code is : " . intl_get_error_code();
}

$fmt->setLenient(FALSE);
echo "\nNow lenient of the formatter is : ";
if ($fmt->isLenient()) {
    echo 'TRUE';
} else {
    echo 'FALSE';
}
$fmt->parse('35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . $fmt->parse('35/13/1971');
if (intl_get_error_code() != 0) {
    echo "\nError_msg is : " . intl_get_error_message();
    echo "\nError_code is : " . intl_get_error_code();
}

?>
]]>
    </programlisting>
   </example>
     &example.outputs;
     <screen>
         <![CDATA[
lenient of the formatter is : TRUE
Trying to do parse('35/13/1971').
Result is : 66038400
Now lenient of the formatter is : FALSE
Trying to do parse('35/13/1971').
Result is : 
Error_msg is : Date parsing failed: U_PARSE_ERROR
Error_code is : 9

]]>
     </screen>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
    <simplelist>
    <member><function>datefmt_is_lenient</function></member>
    <member><function>datefmt_create</function></member>
    </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
