<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1.2.3 $ -->

<book xml:id="book.intl" xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Internationalization Functions</title>
 <titleabbrev>intl</titleabbrev>

 <!-- {{{ Preface -->
 <preface xml:id="intl.intro">
  &reftitle.intro;
  <para>
   Internationalization extension (further is referred as Intl) is a wrapper
   for <link xlink:href="&url.icu.home;">ICU</link>
   library, enabling PHP programmers to perform UCA-conformant collation and
   date/time/number/currency formatting in their scripts.
  </para>

  <para>
   It tends to closely follow ICU APIs, so that people having experience
   working with ICU in either C/C++ or Java could easily use the PHP API.
   Also, this way ICU documentation would be useful to understand various ICU
   functions.
  </para>

  <para>
   Intl consists of several modules, each of them exposes the corresponding
   ICU API:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Collator: provides string comparison capability with support for
     appropriate locale-sensitive sort orderings.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Number Formatter: allows to display number according to the localized
     format or given pattern or set of rules, and to parse strings into
     numbers.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Normalizer: provides a function to transform text into one of the Unicode
     normalization forms, and provides a routine to test if a given string is
     already normalized.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Locale: provides interaction with locale identifiers in the form of
     functions to get subtags from locale identifier; parse, compose,
     match(lookup and filter) locale identifiers.
    </simpara>
   </listitem>
  </itemizedlist>

  <!-- {{{ Links -->
  <section xml:id="intl.links">
   <title>Links</title>
   <itemizedlist>
    <listitem>
     <para><link xlink:href="&url.icu.docs;">Miscellaneous ICU docs</link></para>
    </listitem>
    <listitem>
     <para><link xlink:href="&url.icu.userguide;">ICU Userguide</link></para>
    </listitem>
    <listitem>
     <para><link xlink:href="&url.icu.uca;">Unicode Collation Algorithm</link></para>
    </listitem>
   </itemizedlist>
  </section>
  <!-- }}} -->

 </preface>
 <!-- }}} -->

 <!-- {{{ Setup -->
 <chapter xml:id="intl.setup" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Installing/Configuring</title>

  <!-- {{{ Requirements -->
  <section xml:id="intl.requirements">
   &reftitle.required;
   <para>
    To build the extension you need to install the
    <link xlink:href="&url.icu.home;">ICU</link>
    library of version 3.6+.
   </para>
   <para>
    You will also need the latest version of PHP. Collator is known to work
    well on PHP 5.1.3+ and 5.2.0+.
   </para>
  </section>
  <!-- }}} -->

  <!-- {{{ Installation -->
  <section xml:id="intl.installation">
   &reftitle.install;
   <para>
    Run:
    <screen>
     <![CDATA[
$ make install
]]>
    </screen>
   </para>

   <para>
    Then enable the extension by adding the following line to [PHP] section of
    your php.ini:
    <screen>
     <![CDATA[
extension=intl.so
]]>
    </screen>
   </para>
  </section>
  <!-- }}} -->

  <!-- {{{ Testing -->
  <section xml:id="intl.testing">
   <title>Testing</title>
   <para>
    Run:
    <screen>
     <![CDATA[
$ make test
]]>
    </screen>
   </para>
   <para>Note that the tests may fail if:</para>

   <itemizedlist>
    <listitem>
     <para>
      The Collator extension is already enabled in
      &php.ini;
     </para>
    </listitem>
    <listitem>
     <para>
      LD_LIBRARY_PATH is used to load ICU libraries and value of the
      'variables_order' setting in php.ini doesn't contain letter 'E' (missing
      'E' means "do not register Environment variables");
     </para>
    </listitem>
   </itemizedlist>
  </section>
  <!-- }}} -->

  &reference.intl.configure;

  <!-- {{{ Resources -->
  <section xml:id="intl.resources">
   &reftitle.resources;
   &no.resource;
  </section>
  <!-- }}} -->

 </chapter>
 <!-- }}} -->

 &reference.intl.constants;

 <!-- {{{ Examples -->
 <appendix xml:id="intl.examples" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink">
  &reftitle.examples;
  <section xml:id="intl.examples.basic">
   <title>Basic usage of this extension</title>
   <para>
    Each module provides two kind of APIs: a procedural one and an object
    oriented one. Both are actually identical and described in the
    corresponding document.
   </para>
   <note>
    <para>
     All input strings must be in UTF-8 encoding. All output strings are
     also in UTF-8.
    </para>
   </note>
   <example>
    <title>Example of using the procedural API</title>
    <programlisting role="php">
     <![CDATA[
<?php
$coll = collator_create('en_US');
$result = collator_compare($coll, "string#1", "string#2");
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Example of using the object-oriented API</title>
    <programlisting role="php">
     <![CDATA[
<?php
$coll = new Collator('en_US');
$al = $coll->getLocaleByType(Locale::ACTUAL_LOCALE);
echo "Actual locale: $al\n";

$formatter = new NumberFormatter('en_US', NumberFormatter::DECIMAL);
echo $formatter->format(1234567);
?>
]]>
    </programlisting>
   </example>
  </section>
 </appendix>
 <!-- }}} -->

 &reference.intl.reference;

 &reference.intl.collator;
 &reference.intl.numberformatter;
 &reference.intl.locale;
 &reference.intl.normalizer;
 &reference.intl.messageformatter;

</book>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
