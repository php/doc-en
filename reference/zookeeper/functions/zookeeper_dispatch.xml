<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.zookeeper-dispatch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>zookeeper_dispatch</refname>
  <refpurpose>Calls callbacks for pending operations</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>zookeeper_dispatch</methodname>
   <void/>
  </methodsynopsis>

  <para>
   The <function>zookeeper_dispatch</function> function calls the callbacks passwd by operations like <methodname>Zookeeper::get</methodname> or <methodname>Zookeeper::exists</methodname>.
  </para>

  <caution>
   <para>
    Since version 0.4.0, this function must be called manually to achieve asynchronous operations. If you want that to be done automatically, you also can declare ticks at the beginning of your program.
   </para>
  </caution>

  <para>
   After PHP 7.1, you can ignore this function. This extension uses EG(vm_interrupt) to implement async dispatch.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   This method emits PHP warning when callback could not be invoked.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="function.zookeeper-dispatch.example.1">
   <title><methodname>zookeeper_dispatch</methodname> example #1</title>
   <para>
     Dispatch callbacks manually.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$client = new Zookeeper();
$client->connect('localhost:2181');
$client->get('/zookeeper', function() {
    echo "Callback was called".PHP_EOL;
});
while(true) {
    sleep(1);
    zookeeper_dispatch();
}
?>
]]>
   </programlisting>
  </example>

  <example xml:id="function.zookeeper-dispatch.example.2">
   <title><methodname>zookeeper_dispatch</methodname> example #2</title>
   <para>
     Declare ticks.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
declare(ticks=1);

$client = new Zookeeper();
$client->connect('localhost:2181');
$client->get('/zookeeper', function() {
    echo "Callback was called".PHP_EOL;
});
while(true) {
    sleep(1);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Zookeeper::addAuth</methodname></member>
    <member><methodname>Zookeeper::connect</methodname></member>
    <member><methodname>Zookeeper::__construct</methodname></member>
    <member><methodname>Zookeeper::exists</methodname></member>
    <member><methodname>Zookeeper::get</methodname></member>
    <member><methodname>Zookeeper::getChildren</methodname></member>
    <member><methodname>Zookeeper::setWatcher</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
