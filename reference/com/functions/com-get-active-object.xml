<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.com-get-active-object" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>com_get_active_object</refname>
  <refpurpose>Returns a handle to an already running instance of a COM object</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>variant</type><methodname>com_get_active_object</methodname>
   <methodparam><type>string</type><parameter>prog_id</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>codepage</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>com_get_active_object</function> is similar to creating a new
   instance of a <xref linkend="class.com"/> object, except that it will
   only return an object to your script if the object is already running.
   OLE applications use something known as the "<literal>Running Object Table</literal>" to
   allow well-known applications to be launched only once; this function
   exposes the COM library function GetActiveObject() to get a handle on a
   running instance.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>prog_id</parameter></term>
     <listitem>
      <para>
       <parameter>prog_id</parameter> must be either the ProgID or CLSID for
       the object that you want to access (for example
       <literal>Word.Application</literal>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>codepage</parameter></term>
     <listitem>
      <para>
       Acts in precisely the same way that it does for the <xref
       linkend="class.com"/> class.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   If the requested object is running, it will be returned to your script
   just like any other COM object.
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   There are a variety of reasons why this function might fail, the most
   common being that the object is not already running.  In that situation,
   the exception error code will be <constant>MK_E_UNAVAILABLE</constant>;
   you can use the <literal>getCode</literal> method of the exception object
   to check the exception code.
  </para>
 </refsect1>


 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>codepage</parameter> is nullable now.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Using <function>com_get_active_object</function> in a web server context
    is not always a smart idea.  Most COM/OLE applications are not designed
    to handle more than one client concurrently, even (or especially!)
    Microsoft Office.  You should read <link
    xlink:href="&url.msoffice.serverside;">Considerations for Server-Side
    Automation of Office</link> for more information on the general issues
    involved.
   </para>
  </warning>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
