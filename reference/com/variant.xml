<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<phpdoc:classref xml:id="class.variant" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <titleabbrev>variant</titleabbrev>
 <title>variant class</title>
 <partintro>

<!-- {{{ variant intro -->
  <section xml:id="variant.intro">
   &reftitle.intro;
   <para>
    The VARIANT is COM's equivalent of the PHP zval; it is a structure that
    can contain a value with a range of different possible types.  The variant
    class provided by the COM extension allows you to have more control over
    the way that PHP passes values to and from COM.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="variant.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>variant</classname>
    </ooclass>

    <classsynopsisinfo>
     <ooclass>
      <classname>variant</classname>
     </ooclass>
    </classsynopsisinfo>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.variant')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="class.variant.examples">
   <title>variant examples</title>
   <para>
    <example xml:id="com.variant.example.php5">
     <title>variant example</title>
     <programlisting role="php">
<![CDATA[
<?php
$v = new variant(42);
print "The type is " . variant_get_type($v) . "<br/>";
print "The value is " . $v . "<br/>";
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     When returning
     a value or fetching a variant property, the variant is converted to a PHP
     value only when there is a direct mapping between the types that would
     not result in a loss of information.  In all other cases, the result is
     returned as an instance of the variant class.  You can force PHP to
     convert or evaluate the variant as a PHP native type by using a casting
     operator explicitly, or implicitly casting to a string by
     <function>print</function>ing it.  You may use the wide range of variant
     functions to perform arithmetic operations on variants without forcing a
     conversion or risking a loss of data.
    </para>
   </note>
   <para>
    See also <function>variant_get_type</function>.
   </para>
  </section>

 </partintro>

 &reference.com.entities.variant;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
