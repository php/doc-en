<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="memcache.get" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::get</refname>
  <refpurpose>Retrieve item from the server</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>Memcache::get</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>Memcache::get</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   <function>Memcache::get</function> returns previously stored data of
   an item, if such <parameter>key</parameter> exists on the server at this
   moment.
  </para>

  <para>
   You can pass array of keys to <function>Memcache::get</function> to get
   array of values. The result array will contain only found key-value pairs.
  </para>
  
 </refsect1>
  
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       The key or array of keys to fetch.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       If present, flags fetched along with the values will be written to this parameter. These
       flags are the same as the ones given to for example <function>Memcache::set</function>.
       The lowest byte of the int is reserved for pecl/memcache internal usage (e.g. to indicate
       compression and serialization status).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the value associated with the <parameter>key</parameter> or
   an array of found key-value pairs when <parameter>key</parameter> is an <type>array</type>.
   Returns &false; on failure, <parameter>key</parameter> is not found or
   <parameter>key</parameter> is an empty <type>array</type>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>Memcache::get</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, 'some_key');

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get('some_key');

/* 
You also can use array of keys as a parameter.
If such item wasn't found at the server, the result
array simply will not include such key.
*/

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, Array('some_key', 'another_key'));

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get(Array('some_key', 'second_key'));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
