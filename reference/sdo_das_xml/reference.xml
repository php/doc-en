<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.22.2.4 $ -->

<reference xml:id="ref.sdo-das-xml" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>SDO XML Data Access Service &Functions;</title>
 <titleabbrev>SDO DAS XML</titleabbrev>

 <partintro>


  <!-- FIXME: Upgrade to the new-oo-markup -->
  <!-- class definition section -->
  <section xml:id='sdo-das-xml.classes'><!-- {{{ -->
  &reftitle.classes;
   <para>
    The XML DAS provides two main classes.
    The first is SDO_DAS_XML which is the main class used to fetch the
    data from the XML source and used to write the data back.
    The second is the SDO_DAS_XML_Document class,
    which represents the data in the XML document.
   </para>
   <para>
    There are also some exception classes which can be thrown
    if errors are found when looking for or parsing the xsd or 
    xml files. 
   </para>

   <section xml:id='sdo-das-xml.class.sdo_das_xml'><!-- {{{ -->
    <title>
     <classname>SDO_DAS_XML</classname>
    </title>
    <para>
     This is the main class of the XML DAS,
     which is used fetch the data from the xml source
     and also used to write the data back.
     Other than the methods to load and save xml files,
    </para>
    <section xml:id='sdo-das-xml.class.SDO_DAS_XML.methods'><!-- {{{ -->
     &reftitle.methods;

     <itemizedlist>

      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-create'>create</link>
        This is a static method available in the SDO_DAS_XML class.
        Used to construct an SDO_DAS_XML object.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-addTypes'>addTypes</link>
        Works in much the same way as <function>create</function> but used
        to add the contents of a second or subsequent schema file to 
        an XML DAS that has already been created.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-createDataObject'>createDataObject</link>
        Can be used to construct an SDO data object of a given type.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-createDocument'>createDocument</link>
        Can be used to construct an XML Document object from scratch.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-loadFile'>loadFile</link>
        Loads the xml instance document from a file.
        This file can be at local file system or it can be on a remote host.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-loadString'>loadString</link>
        same as the above method.
        Loads the xml instance which is available as string.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-saveFile'>saveFile</link>
        save SDO_DAS_XML_Document object as a xml file.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-saveString'>saveString</link>
        save SDO_DAS_XML_Document object as a xml string.
       </para>
      </listitem>

     </itemizedlist>

    </section><!-- }}} -->
   </section><!-- }}} -->


   <section xml:id='sdo-das-xml.class.sdo_das_xml_document'><!-- {{{ -->
    <title>
     <classname>SDO_DAS_XML_Document</classname>
    </title>
    <para>
     This class can be used to get to the name and namespace of the document element,
     and to get to the root data object of the document. 
     Lastly, it can also be used to set the XML version and encoding
     of a document on output.
    </para>
    <section xml:id='sdo-das-xml.class.SDO_DAS_XML_Document.methods'><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-Document-getRootDataObject'>getRootDataObject</link>
        gets the root DataObject.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-Document-getRootElementName'>getRootElementName</link>
        gets the root DataObject's name.
       </para>
      </listitem>

      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-Document-getRootElementURI'>getRootElementURI</link>
        gets the root DataObject's URI.
       </para>
      </listitem>

      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-Document-setEncoding'>setEncoding</link>
        sets the encoding string with the given value.
       </para>
      </listitem>

      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-Document-setXMLDeclaration'>setXMLDeclaraion</link>
        to set/unset the xml declaration.
       </para>
      </listitem>

      <listitem>
       <para>
        <link linkend='function.SDO-DAS-XML-Document-setXMLVersion'>setXMLVersion</link>
        sets the xml version with the given value.
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->

   <section xml:id='sdo-das-xml.class.sdo_das_xml_parserexception'>
    <title>
     <classname>SDO_DAS_XML_ParserException</classname>
    </title>
    <para>
     Is a subclass of
     <classname>SDO_Exception</classname>.
     Thrown for any parser errors while loading the xsd/xml file.
    </para>
   </section>

   <section xml:id='sdo-das-xml.class.sdo_das_xml_fileexception'>
    <title>
     <classname>SDO_DAS_XML_FileException</classname>
    </title>
    <para>
     Is a subclass of
     <classname>SDO_Exception</classname>.
     Thrown by any of the methods that load data from a file, when the file
     cannot be found. 
    </para>
   </section>

  </section>

  <section xml:id='sdo-das-xml.limitations'>
   <title>Limitations compared with SDO 2.0 specification</title>
   <para>
    The 
    <link xlink:href='&url.ibm.sdo;'>SDO 2.0 specification</link>
    defines the mapping between XML types and SDO types.
    With Java SDO, this mapping is implemented by the XMLHelper.
    With SDO for PHP, this mapping is implemented by the
    XML Data Access Service.
    The XML DAS implements the mapping described in the
    SDO 2.0 specification with some restrictions. 
    A detailed list is of the limitations is:
   </para>

   <procedure xml:id='sdo-das-xml.limitations.simpletypes'>
    <title>XML Simple Types</title>
    <step>
     <para>
      Simple Type with sdoJava:instanceClass
      - no PHP equivalent provided.
     </para>
    </step>
    <step>
     <para>
      Simple Type with sdoJava:extendedInstanceClass
      - no PHP equivalent provided.
     </para>
    </step>
    <step>
     <para>
      Simple Type with list of itemType.
     </para>
    </step>
    <step>
     <para>
      Simple Type with union.
     </para>
    </step>
   </procedure>

   <procedure xml:id='sdo-das-xml.limitations.complextypes'>
    <title>XML Complex Types</title>
    <step>
     <para>
      Complex Type with sdo:aliasName
      - no PHP support for SDO Type aliases.
     </para>
    </step>
   </procedure>

   <procedure xml:id='sdo-das-xml.limitations.attribute'>
    <title>XSD Attribute</title>
    <step>
     <para>
      Attribute with sdo:aliasName
      - no PHP support for SDO property aliases.
     </para>
    </step>
    <step>
     <para>
      Attribute with default value
      - no PHP support for SDO property defaults.
     </para>
    </step>
    <step>
     <para>
      Attribute with fixed value
      - no PHP support for SDO read-only properties or default values.
     </para>
    </step>
    <step>
     <para>
      Attribute referencing a DataObject with
      sdo:propertyType - no support for sdo:propertyType="...".
     </para>
    </step>
    <step>
     <para>
      Attribute with bi-directional property to a DataObject with
      sdo:oppositeProperty and sdo:propertyType
      - no PHP support for SDO opposite.
     </para>
    </step>
   </procedure>

   <procedure xml:id='sdo-das-xml.limitations.elements'>
    <title>XSD Elements</title>
    <step>
     <para>
      Element with sdo:aliasName
      - no PHP support for SDO property aliases.
     </para>
    </step>
    <step>
     <para>
      Element with substitution group.
     </para>
    </step>
   </procedure>

   <procedure xml:id='sdo-das-xml.limitations.elementsimpletype'>
    <title>XSD Elements with Simple Type</title>
    <step>
     <para>
      Element of SimpleType with default
      - no PHP support for SDO defaults
     </para>
    </step>
    <step>
     <para>
      Element of SimpleType with fixed value
      - no PHP support for SDO read-only properties or default values.
     </para>
    </step>
    <step>
     <para>
      Element of SimpleType with sdo:string
      - no support for sdo:string="true".
     </para>
    </step>
    <step>
     <para>
      Element referencing a DataObject with
      sdo:propertyType  - no support for sdo:propertyType="..."
     </para>
    </step>
    <step>
     <para>
      Element with bi-directional reference to a DataObject with
      sdo:oppositeProperty and sdo:propertyType
      - no PHP support for SDO opposite.
     </para>
    </step>
   </procedure>
  </section>
  <!-- }}} -->

 </partintro>
 &reference.sdo-das-xml.entities.functions;
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
