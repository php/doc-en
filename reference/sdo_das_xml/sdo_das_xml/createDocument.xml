<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="sdo-das-xml.createdocument" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SDO_DAS_XML::createDocument</refname>
  <refpurpose>
   Creates an XML Document object from scratch, without the need to load a document from a file or string
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>SDO_DAS_XML_Document</type><methodname>SDO_DAS_XML::createDocument</methodname>
   <methodparam choice="opt"><type>string</type><parameter>document_element_name</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>SDO_DAS_XML_Document</type><methodname>SDO_DAS_XML::createDocument</methodname>
   <methodparam><type>string</type><parameter>document_element_namespace_URI</parameter></methodparam>
   <methodparam><type>string</type><parameter>document_element_name</parameter></methodparam>
   <methodparam choice="opt"><type>SDO_DataObject</type><parameter>dataobject</parameter></methodparam>
  </methodsynopsis>

  <para>
   Creates an XML Document object. This will contain just one empty root element
   on which none of the properties will have been set.
   The purpose of this call is to allow an application to create
   an XML document from scratch without the need to load a
   document from a file or string. The document that is created
   will be as if a document had been loaded that contained just a single
   empty document element with no attributes set or elements within it.
  </para>
  <para>
   <function>createDocument</function>
   may need to be told what the document element is.
   This will not be necessary in simple cases.
   When there is no ambiguity then no parameter need be passed to the
   method.
   However it is possible to load more than one schema file into the same XML DAS
   and in this case there may be more than one possible document element defined:
   furthermore it is even possible that there are two possible document elements that
   differ only in the namespace.
   To cope with these cases it is possible to specify either the document element
   name, or both the document element name and namespace to the method.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>document_element_name</parameter>
     </term>
     <listitem>
      <para>
       The name of the document element. Only needed if there
       is more than one possibility.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>document_element_namespace_URI</parameter>
     </term>
     <listitem>
      <para>
       The namespace part of the document element name. Only needed if there is more
       than one possible document element with the same name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>dataobject</parameter>
     </term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns an SDO_XML_DAS_Document object on success.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>SDO_UnsupportedOperationException</parameter>
     </term>
     <listitem>
      <para>
       Thrown if an element name or element name and namespace URI is passed,
       but not found in the underlying model.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>


 <!-- Use when a CHANGELOG exists
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Enter the PHP version of change here
       <entry>Description of change
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 -->


 <!-- Use when examples exist
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>SDO_DAS_XML::createDataObject</function> example</title>
    <para>
     Any text that describes the purpose of the example, or
     what goes on in the example should go here (inside the
     <example> tag, not out
    </para>
    <programlisting role="php">
<![CDATA[
<?php
if ($anexample === true) {
    echo 'Use the PEAR Coding Standards';
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Use the PEAR Coding Standards
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 -->


 <!-- Use when adding See Also links
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function></function></member>
    <member>Or <link linkend="somethingelse">something else</link></member>
   </simplelist>
  </para>
 </refsect1>
 -->


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
