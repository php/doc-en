<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<phpdoc:classref xml:id="class.evio" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>The EvIo class</title>
 <titleabbrev>EvIo</titleabbrev>
 <partintro>
<!-- {{{ EvIo intro -->
  <section xml:id="evio.intro">
   &reftitle.intro;
   <para>
    <classname>EvIo</classname>
    watchers check whether a file descriptor(or socket, or a stream castable
    to numeric file descriptor) is readable or writable in each iteration of
    the event loop, or, more precisely, when reading would not block the
    process and writing would at least be able to write some data. This
    behaviour is called
    <emphasis>level-triggering</emphasis>
    because events are kept receiving as long as the condition persists. To
    stop receiving events just stop the watcher.
   </para>
   <para>
    The number of read and/or write event watchers per
    <parameter>fd</parameter>
    is unlimited. Setting all file descriptors to non-blocking mode is also
    usually a good idea(but not required).
   </para>
   <para>
    Another thing to watch out for is that it is quite easy to receive false
    readiness notifications, i.e. the callback might be called with
    <constant>Ev::READ</constant>
    but a subsequent
    <emphasis>read()</emphasis>
    will actually block because there is no data. It is very easy to get into
    this situation. Thus it is best to always use non-blocking I/O: An extra
    <emphasis>read()</emphasis>
    returning
    <constant>EAGAIN</constant>
    (or similar) is far preferable to a program hanging until some data
    arrives.
   </para>
   <para>
    If for some reason it is impossible to run the
    <parameter>fd</parameter>
    in non-blocking mode, then separately re-test whether a file descriptor is
    really ready. Some people additionally use
    <constant>SIGALRM</constant>
    and an interval timer, just to be sure thry won't block infinitely.
   </para>
   <para>
    Always consider using non-blocking mode.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evio.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvIo</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvIo</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.fd">fd</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.events">events</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvIo properties -->
  <section xml:id="evio.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evio.props.fd">
     <term>
      <varname>fd</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evio.props.events">
     <term>
      <varname>events</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evio;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
