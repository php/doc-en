<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.array-filter" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_filter</refname>
  <refpurpose>Filters elements of an array using a callback function</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_filter</methodname>
   <methodparam><type>array</type><parameter>array</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Iterates over each value in the <parameter>array</parameter>
   passing them to the <parameter>callback</parameter> function.
   If the <parameter>callback</parameter> function returns &true;, the
   current value from <parameter>array</parameter> is returned into
   the result &array;.
  </para>
  <para>
   Array keys are preserved, and may result in gaps if the <parameter>array</parameter> was indexed.
   The result &array; can be reindexed using the <function>array_values</function> function.
  </para>
</refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>

    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       The array to iterate over
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       The callback function to use
      </para>
      <para>
       If no <parameter>callback</parameter> is supplied, all empty entries of
       <parameter>array</parameter> will be removed. See <function>empty</function>
       for how PHP defines empty in this case.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Flag determining what arguments are sent to <parameter>callback</parameter>:
       <itemizedlist>
        <listitem>
         <simpara><constant>ARRAY_FILTER_USE_KEY</constant> - pass key as the only argument
         to <parameter>callback</parameter> instead of the value</simpara>
        </listitem>
        <listitem>
         <simpara><constant>ARRAY_FILTER_USE_BOTH</constant> - pass both value and key as
         arguments to <parameter>callback</parameter> instead of the value</simpara>
        </listitem>
       </itemizedlist>
       Default is <literal>0</literal> which will pass value as the only argument
       to <parameter>callback</parameter> instead.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the filtered array.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>callback</parameter> is nullable now.
      </entry>
     </row>
     &array.changelog.by-ref;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

<!--
 <refsect1 role="errors">
  &reftitle.errors;
  &errors.no.unusual.errors;
 </refsect1>
-->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_filter</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
function odd($var)
{
    // returns whether the input integer is odd
    return $var & 1;
}

function even($var)
{
    // returns whether the input integer is even
    return !($var & 1);
}

$array1 = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5];
$array2 = [6, 7, 8, 9, 10, 11, 12];

echo "Odd :\n";
print_r(array_filter($array1, "odd"));
echo "Even:\n";
print_r(array_filter($array2, "even"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Odd :
Array
(
    [a] => 1
    [c] => 3
    [e] => 5
)
Even:
Array
(
    [0] => 6
    [2] => 8
    [4] => 10
    [6] => 12
)
]]>
    </screen>
   </example>
   <example>
    <title><function>array_filter</function> without
    <parameter>callback</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php

$entry = [
    0 => 'foo',
    1 => false,
    2 => -1,
    3 => null,
    4 => '',
    5 => '0',
    6 => 0,
];

print_r(array_filter($entry));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => foo
    [2] => -1
)
]]>
    </screen>
   </example>
   <example>
    <title><function>array_filter</function> with 
    <parameter>mode</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php

$arr = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4];

var_dump(array_filter($arr, function($k) {
    return $k == 'b';
}, ARRAY_FILTER_USE_KEY));

var_dump(array_filter($arr, function($v, $k) {
    return $k == 'b' || $v == 4;
}, ARRAY_FILTER_USE_BOTH));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  ["b"]=>
  int(2)
}
array(2) {
  ["b"]=>
  int(2)
  ["d"]=>
  int(4)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    If the array is changed from the callback function (e.g. element
    added, deleted or unset) the behavior of this function is undefined.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_intersect</function></member>
    <member><function>array_map</function></member>
    <member><function>array_reduce</function></member>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
