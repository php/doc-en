<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.array-merge" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_merge</refname>
  <refpurpose>Merge one or more arrays</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_merge</methodname>
   <methodparam rep="repeat"><type>array</type><parameter>arrays</parameter></methodparam>
  </methodsynopsis>
  <para>
   Merges the elements of one or more arrays together so that the values of
   one are appended to the end of the previous one. It returns the resulting
   array.
  </para>
  <para>
   If the input arrays have the same string keys, then the later value for
   that key will overwrite the previous one.  If, however, the arrays
   contain numeric keys, the later value will <emphasis
   role="strong">not</emphasis> overwrite the original value, but will be
   appended.
  </para>
  <para>
   Values in the input arrays with numeric keys will be renumbered with
   incrementing keys starting from zero in the result array.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arrays</parameter></term>
     <listitem>
      <para>
       Variable list of arrays to merge.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the resulting array.
   If called without any arguments, returns an empty &array;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        This function can now be called without any parameter.
        Formerly, at least one parameter has been required.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_merge</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array("color" => "red", 2, 4);
$array2 = array("a", "b", "color" => "green", "shape" => "trapezoid", 4);
$result = array_merge($array1, $array2);
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [color] => green
    [0] => 2
    [1] => 4
    [2] => a
    [3] => b
    [shape] => trapezoid
    [4] => 4
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Simple <function>array_merge</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array();
$array2 = array(1 => "data");
$result = array_merge($array1, $array2);
?>
]]>
    </programlisting>
    <para>
     Don't forget that numeric keys will be renumbered!
    </para>
    <screen role="php">
<![CDATA[
Array
(
    [0] => data
)
]]>
    </screen>
    <para>
     If you want to append array elements from the second array to the
     first array while not overwriting the elements from the first
     array and not re-indexing, use the
     <literal>+</literal> array union operator:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array(0 => 'zero_a', 2 => 'two_a', 3 => 'three_a');
$array2 = array(1 => 'one_b', 3 => 'three_b', 4 => 'four_b');
$result = $array1 + $array2;
var_dump($result);
?>
]]>
    </programlisting>
    <para>
     The keys from the first array will be preserved. If an array key
     exists in both arrays, then the element from the first array will
     be used and the matching key's element from the second array will
     be ignored.
    </para>
    <screen role="php">
<![CDATA[
array(5) {
  [0]=>
  string(6) "zero_a"
  [2]=>
  string(5) "two_a"
  [3]=>
  string(7) "three_a"
  [1]=>
  string(5) "one_b"
  [4]=>
  string(6) "four_b"
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_merge</function> with non-array types</title>
    <programlisting role="php">
<![CDATA[
<?php
$beginning = 'foo';
$end = array(1 => 'bar');
$result = array_merge((array)$beginning, (array)$end);
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
    <![CDATA[
    Array
    (
        [0] => foo
        [1] => bar
    )
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_merge_recursive</function></member>
    <member><function>array_replace</function></member>
    <member><function>array_combine</function></member>
    <member><link linkend="language.operators.array">array operators</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
