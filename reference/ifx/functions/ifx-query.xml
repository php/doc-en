<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.ifx-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ifx_query</refname>
  <refpurpose>Send Informix query</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>ifx_query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam><type>resource</type><parameter>link_identifier</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursor_type</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>blobidarray</parameter></methodparam>
  </methodsynopsis>
  <para>
   Sends a <parameter>query</parameter> to the currently active database on
   the server that's associated with the specified link identifier.
  </para>
  <para>
   For "select-type" queries a cursor is declared and opened.
   Non-select queries are "execute immediate".
  </para>
  <para>
   For either query type the number of (estimated or real) affected rows is
   saved for retrieval by <function>ifx_affected_rows</function>.
  </para>
  <para>
   If the contents of the TEXT (or BYTE) column allow it, you can also use
   <literal>ifx_textasvarchar(1)</literal> and
   <literal>ifx_byteasvarchar(1)</literal>.  This allows you to treat TEXT
   (or BYTE) columns just as if they were ordinary (but long) VARCHAR columns
   for select queries, and you don't need to bother with blob id's.
  </para>
  <para>
   With <literal>ifx_textasvarchar(0)</literal> or
   <literal>ifx_byteasvarchar(0)</literal> (the default situation), select
   queries will return BLOB columns as blob id's (integer value).  You can
   get the value of the blob as a string or file with the blob functions (see
   below).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       The query string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>link_identifier</parameter></term>
     <listitem>
      <para>
       The link identifier.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursor_def</parameter></term>
     <listitem>
      <para>
       This optional parameter allows you to make this a
       <literal>scroll</literal> and/or <literal>hold</literal> cursor.
       It's a bitmask and can be either <constant>IFX_SCROLL</constant>,
       <constant>IFX_HOLD</constant>, or both or'ed together. I you omit this
       parameter the cursor is a normal sequential cursor.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>blobidarray</parameter></term>
     <listitem>
      <para>
       If you have BLOB (BYTE or TEXT) columns in the query, you can add
       a <parameter>blobidarray</parameter> parameter containing the
       corresponding "blob ids", and you should replace those columns
       with a "?" in the query text.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns valid Informix result identifier on success, or &false; on errors.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Show all rows of the "orders" table as a HTML table
    </title>
    <programlisting role="php">
<![CDATA[
<?php
ifx_textasvarchar(1);      // use "text mode" for blobs
$res_id = ifx_query("select * from orders", $conn_id);
if (! $res_id) {
    printf("Can't select orders : %s\n<br />%s<br />\n", ifx_error(), ifx_errormsg());
    die;
}
ifx_htmltbl_result($res_id, "border=\"1\"");
ifx_free_result($res_id);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Insert some values into the "catalog" table</title>
    <programlisting role="php">
<![CDATA[
<?php

// create blob id's for a byte and text column
$textid = ifx_create_blob(0, 0, "Text column in memory");
$byteid = ifx_create_blob(1, 0, "Byte column in memory");

// store blob id's in a blobid array
$blobidarray[] = $textid;
$blobidarray[] = $byteid;

// launch query
$query = "insert into catalog (stock_num, manu_code, " .
         "cat_descr,cat_picture) values(1,'HRO',?,?)";
$res_id = ifx_query($query, $conn_id, $blobidarray);
if (! $res_id) {
    /* ... error ... */
}

// free result id
ifx_free_result($res_id);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ifx_connect</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
