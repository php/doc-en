<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<appendix xml:id="uopz.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
 The following opcodes are defined as constants by uopz before 5.0.0:
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-exit">
    <term>
     <constant>ZEND_EXIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Invoked by exit() and die(), receives no arguments. Return boolean &true; to exit, &false; to continue
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-new">
    <term>
     <constant>ZEND_NEW</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Invoked by object construction, receives the class of object being created as the only argument
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-throw">
    <term>
     <constant>ZEND_THROW</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Invoked by the throw construct, receives the class of exception being thrown as the only argument
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-fetch-class">
    <term>
     <constant>ZEND_FETCH_CLASS</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Invoked upon composure, receives the class the name of the class being fetched as the only argument
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-add-trait">
    <term>
     <constant>ZEND_ADD_TRAIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Invoked upon composure, receives the class the trait is being added to as the first argument, and the name of the trait as the second argument
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-add-interface">
    <term>
     <constant>ZEND_ADD_INTERFACE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Invoked upon composure, receives the class the interface is being added to as the first argument, and the name of the interface as the second argument
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-instanceof">
    <term>
     <constant>ZEND_INSTANCEOF</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Invoked by instanceof operator, receives the object being verified as the first argument, and the name of the class which that object should be as the second argument
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
 The following constants control the VM's behaviour after a user handler is invoked, be extremely careful!
 These constants are removed as of uopz 5.0.0.
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-user-opcode-continue">
    <term>
     <constant>ZEND_USER_OPCODE_CONTINUE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Advance 1 opcode and continuue
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-enter">
    <term>
     <constant>ZEND_USER_OPCODE_ENTER</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Enter into new op_array without recursion
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-leave">
    <term>
     <constant>ZEND_USER_OPCODE_LEAVE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Return to calling op_array within the same executor
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-dispatch">
    <term>
     <constant>ZEND_USER_OPCODE_DISPATCH</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Dispatch to original opcode handler
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-dispatch-to">
    <term>
     <constant>ZEND_USER_OPCODE_DISPATCH_TO</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Dispatch to a specific handler (OR'd with ZEND opcode constant)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-return">
    <term>
     <constant>ZEND_USER_OPCODE_RETURN</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Exit from executor (return from function)
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
 The following modifiers are registered as constants by uopz
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-acc-public">
    <term>
     <constant>ZEND_ACC_PUBLIC</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Mark function as public, the default
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-protected">
    <term>
     <constant>ZEND_ACC_PROTECTED</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Mark function as protected
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-private">
    <term>
     <constant>ZEND_ACC_PRIVATE</constant>
     (<type>int</type>)
    </term>   
    <listitem>
     <simpara> 
 Mark function as private                       
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-static">
    <term>
     <constant>ZEND_ACC_STATIC</constant>
     (<type>int</type>)
    </term>   
    <listitem>
     <simpara> 
 Mark function as static                        
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-final">
    <term>
     <constant>ZEND_ACC_FINAL</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>  
 Mark function as final 
     </simpara>
    </listitem> 
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-abstract">
    <term>
     <constant>ZEND_ACC_ABSTRACT</constant>
     (<type>int</type>)
    </term>   
    <listitem>  
     <simpara>
 Mark function as abstract
     </simpara> 
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-class">
    <term>
     <constant>ZEND_ACC_CLASS</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Dummy registered for consistency, the default kind of class entry.
      Removed as of uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-interface">
    <term>
     <constant>ZEND_ACC_INTERFACE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>  
 Mark class as interface.
      Removed as of uopz 5.0.0.
     </simpara>
    </listitem> 
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-trait">
    <term>
     <constant>ZEND_ACC_TRAIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>  
 Mark class as trait.
      Removed as of uopz 5.0.0.
     </simpara>
    </listitem> 
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-fetch">
    <term>
     <constant>ZEND_ACC_FETCH</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
 Used for getting flags only.
      Removed as of uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
