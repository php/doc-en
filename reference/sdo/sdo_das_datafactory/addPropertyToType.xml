<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="sdo-das-datafactory.addpropertytotype" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SDO_DAS_DataFactory::addPropertyToType</refname>
  <refpurpose>
   Adds a property to a type
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>SDO_DAS_DataFactory::addPropertyToType</methodname>
   <methodparam><type>string</type><parameter>parent_type_namespace_uri</parameter></methodparam>
   <methodparam><type>string</type><parameter>parent_type_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>property_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>type_namespace_uri</parameter></methodparam>
   <methodparam><type>string</type><parameter>type_name</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>

  &warn.experimental.func;

  <para>
   Adds a property to a type. The type must already be known to the
   SDO_DAS_DataFactory (i.e. have been added using addType()). The property
   becomes a property of the type. This is how the graph model for the
   structure of an SDO_DataObject is built.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>parent_type_namespace_uri</parameter>
     </term>
     <listitem>
      <para>
       The namespace URI for the parent type.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>parent_type_name</parameter>
     </term>
     <listitem>
      <para>
       The type name for the parent type.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>property_name</parameter>
     </term>
     <listitem>
      <para>
       The name by which the property will be known in the parent type.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>type_namespace_uri</parameter>
     </term>
     <listitem>
      <para>
       The namespace URI for the type of the property.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>type_name</parameter>
     </term>
     <listitem>
      <para>
       The type name for the type of the property
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem><para> This array holds one or more key=&gt;value pairs to set attribute
      values for the property. The optional keywords are:</para>
      <variablelist>
       <varlistentry>
        <term><parameter>many</parameter></term>
        <listitem>
         <para>A flag to say whether the property is many-valued. A value of 'true' adds the
          property as a many-valued property (default is 'false').
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
         <parameter>readOnly</parameter>
        </term>
        <listitem>
         <para> A flag to say whether the property is read-only. A value of 'true' means the
          property value cannot be modified through the SDO application APIs (default is
          'false').
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
         <parameter>containment</parameter>
        </term>
        <listitem>
         <para> A flag to say whether the property is contained by the parent. A value of
          'true' means the property is contained by the parent. A value of 'false' results
          in a non-containment reference (default is 'true'). This flag is only
          interpreted when adding properties which are data object types, otherwise it is
          ignored.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
         <parameter>default</parameter>
        </term>
        <listitem>
         <para> A default value for the property. Omitting this key means that the property
          does not have a default value. A property can only have a default value if it is a
          single-valued data type (primitive).
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   None.
  </para>
 </refsect1>

 <!--
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
  </para>
 </refsect1>
 -->

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>0.5.2</entry>
       <entry>Optional parameters <varname>many</varname>,
        <varname>readOnly</varname>, and <varname>containment</varname>
        deprecated in favour of the <varname>options</varname> array.
        </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>


 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A
     <function>SDO_DAS_DataFactory::addPropertyToType</function>
     example</title>
    <para> The following adds an 'addressline' property to a Person type. The person type is
     identified by its namespace, 'PersonNS', and type name, 'PersonType'. The type of the
     'addressline' property is a many-valued SDO data type (primitive) with namespace
     'commonj.sdo' and type name 'String'.
    </para>
    <programlisting role="php">
     <![CDATA[
<?php
  $df->addPropertyToType('PersonNS', 'PersonType',
    'addressline', 'commonj.sdo', 'String', array('many'=>true));
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <!-- Use when adding See Also links
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function></function></member>
    <member>Or <link linkend="somethingelse">something else</link></member>
   </simplelist>
  </para>
 </refsect1>
 -->


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
