<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.fbsql-fetch-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>fbsql_fetch_array</refname>
  <refpurpose>Fetch a result row as an associative array, a numeric array, or both</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>fbsql_fetch_array</methodname>
   <methodparam><type>resource</type><parameter>result</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>fbsql_fetch_array</function> is a combination of
   <function>fbsql_fetch_row</function> and 
   <function>fbsql_fetch_assoc</function>.
  </para>
  <para>
   An important thing to note is that using
   <function>fbsql_fetch_array</function> is NOT significantly
   slower than using <function>fbsql_fetch_row</function>, while it
   provides a significant added value.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &fbsql.result.description;
    <varlistentry>
     <term><parameter>result_type</parameter></term>
     <listitem>
      <para>
       A constant and can take the following values: 
       <constant>FBSQL_ASSOC</constant>, <constant>FBSQL_NUM</constant>, or
       <constant>FBSQL_BOTH</constant>.
      </para>
      <para>
       When using <constant>FBSQL_BOTH</constant>, in addition to storing the
       data in the numeric indices of the result array, it also stores the
       data in associative indices, using the field names as keys.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns an array that corresponds to the fetched row, or &false;
   if there are no more rows.
  </para>
  <para>
   If two or more columns of the result have the same field names,
   the last column will take precedence. To access the other column(s)
   of the same name, you must the numeric index of the column or
   make an alias for the column.
   <informalexample>
    <programlisting role="sql">
<![CDATA[
select t1.f1 as foo t2.f1 as bar from t1, t2
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>fbsql_fetch_array</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
fbsql_connect($host, $user, $password);
$result = fbsql_db_query("database", "select user_id, fullname from table");
while ($row = fbsql_fetch_array($result)) {
    echo "user_id: " . $row["user_id"] . "<br />\n";
    echo "user_id: " . $row[0] . "<br />\n";
    echo "fullname: " . $row["fullname"] . "<br />\n";
    echo "fullname: " . $row[1] . "<br />\n";
}
fbsql_free_result($result);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fbsql_fetch_row</function></member>
    <member><function>fbsql_fetch_assoc</function></member>
    <member><function>fbsql_fetch_object</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
