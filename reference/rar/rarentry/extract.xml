<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="rarentry.extract" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RarEntry::extract</refname>
  <refpurpose>Extract entry from the archive</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <modifier>public</modifier> <type>bool</type><methodname>RarEntry::extract</methodname>
    <methodparam><type>string</type><parameter>dir</parameter></methodparam>
    <methodparam choice="opt"><type>string</type><parameter>filepath</parameter><initializer>""</initializer></methodparam>
    <methodparam choice="opt"><type>string</type><parameter>password</parameter><initializer>NULL</initializer></methodparam>
    <methodparam choice="opt"><type>bool</type><parameter>extended_data</parameter><initializer>&false;</initializer></methodparam>
   </methodsynopsis>
  <para>
   <methodname>RarEntry::extract</methodname> extracts the entry's data.
   It will create new file in the specified
   <parameter>dir</parameter> with the name identical to the entry's name,
   unless the second argument is specified. See below for more information.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dir</parameter></term>
     <listitem>
      <para>
       Path to the directory where files should be extracted. This parameter is
       considered if and only if <parameter>filepath</parameter> is not. If both
       parameters are empty an extraction to the current directory will be
       attempted.
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term><parameter>filepath</parameter></term>
     <listitem>
      <para>
       Path (relative or absolute) containing the directory and filename of the
       extracted file. This parameter overrides both the parameter
       <parameter>dir</parameter> and the original file name.
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       The password used to encrypt this entry. If the entry is not encrypted, this value will not be used and can
       be omitted. If this parameter is omitted and the entry is encrypted, the password given to
       <function>rar_open</function>, if any, will be used. If a wrong password is given, either explicitly
       or implicitly via <function>rar_open</function>, CRC checking will fail and this method will fail and return &false;.
       If no password is given and one is required, this method will fail and return &false;.
       You can check whether an entry is encrypted with <methodname>RarEntry::isEncrypted</methodname>.
      </para>
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><parameter>extended_data</parameter></term>
    <listitem>
     <para>
       If &true;, extended information such as NTFS ACLs and Unix owner information will be set in the extract
       files, as long as it's present in the archive.
     </para>
    </listitem>
   </varlistentry>
   </variablelist>
  </para>
  <warning>
      <para>Prior to version 2.0.0, this function would not handle relative
      paths correctly. Use <function>realpath</function> as a workaround.</para>
  </warning>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL rar 3.0.0</entry>
       <entry>
        <parameter>extended_data</parameter> was added.
       </entry>
      </row>
      <row>
       <entry>PECL rar 3.0.0</entry>
       <entry>
        Support for RAR archives with repeated entry names is no longer defective.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><methodname>RarEntry::extract</methodname> example</title>
    <programlisting role="php">
<![CDATA[
<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

$entry->extract('/dir/to'); // create /dir/to/Dir/file.txt
$entry->extract(false, '/dir/to/new_name.txt'); // create /dir/to/new_name.txt

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>How to extract all files in archive: </title>
    <programlisting role="php">
<![CDATA[
<?php

/* example by Erik Jenssen aka erix */

$filename = "foobar.rar";
$filepath = "/home/foo/bar/";

$rar_file = rar_open($filepath.$filename);
$list = rar_list($rar_file);
foreach($list as $file) {
    $entry = rar_entry_get($rar_file, $file);
    $entry->extract("."); // extract to the current dir
}
rar_close($rar_file);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>RarEntry::getStream</methodname></member>
    <member><link linkend="wrappers.rar"><literal>rar://</literal> wrapper</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
