<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17.2.1 $ -->
<appendix xml:id="errorfunc.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants.core;
  <note>
   <simpara>
    You may use these constant names in &php.ini; but not outside
    of PHP, like in &httpd.conf;, where you'd 
    use the bitmask values instead.
   </simpara>
  </note>
 <table xml:id="errorfunc.constants.errorlevels">
  <title>Errors and Logging</title>
  <tgroup cols="4">
   <thead>
    <row>
     <entry>Value</entry>
     <entry>Constant</entry>
     <entry>Description</entry>
     <entry>Note</entry>
    </row>
   </thead>
   <tbody>
    <row xml:id="errorfunc.constants.errorlevels.e-error">
     <entry>1</entry>
     <entry>
      <constant>E_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Fatal run-time errors. These indicate errors that can not be
      recovered from, such as a memory allocation problem.
      Execution of the script is halted.
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-warning">
     <entry>2</entry>
     <entry>
      <constant>E_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Run-time warnings (non-fatal errors). Execution of the script is not
      halted.
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-parse">
     <entry>4</entry>
     <entry>
      <constant>E_PARSE</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Compile-time parse errors. Parse errors should only be generated by
      the parser.
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-notice">
     <entry>8</entry>
     <entry>
      <constant>E_NOTICE</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Run-time notices. Indicate that the script encountered something that
      could indicate an error, but could also happen in the normal course of
      running a script.
     </entry>
     <entry></entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-core-error">
     <entry>16</entry>
     <entry>
      <constant>E_CORE_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Fatal errors that occur during PHP's initial startup. This is like an
      <constant>E_ERROR</constant>, except it is generated by the core of PHP.
     </entry>
     <entry>since PHP 4</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-core-warning">
     <entry>32</entry>
     <entry>
      <constant>E_CORE_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Warnings (non-fatal errors) that occur during PHP's initial startup.
      This is like an <constant>E_WARNING</constant>, except it is generated
      by the core of PHP.
     </entry>
     <entry>since PHP 4</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-compile-error">
     <entry>64</entry>
     <entry>
      <constant>E_COMPILE_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Fatal compile-time errors. This is like an <constant>E_ERROR</constant>,
      except it is generated by the Zend Scripting Engine.
     </entry>
     <entry>since PHP 4</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-compile-warning">
     <entry>128</entry>
     <entry>
      <constant>E_COMPILE_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Compile-time warnings (non-fatal errors). This is like an
      <constant>E_WARNING</constant>, except it is generated by the Zend
      Scripting Engine.
     </entry>
     <entry>since PHP 4</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-user-error">
     <entry>256</entry>
     <entry>
      <constant>E_USER_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      User-generated error message. This is like an
      <constant>E_ERROR</constant>, except it is generated in PHP code by
      using the PHP function <function>trigger_error</function>.
     </entry>
     <entry>since PHP 4</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-user-warning">
     <entry>512</entry>
     <entry>
      <constant>E_USER_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      User-generated warning message. This is like an
      <constant>E_WARNING</constant>, except it is generated in PHP code by
      using the PHP function <function>trigger_error</function>.
     </entry>
     <entry>since PHP 4</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-user-notice">
     <entry>1024</entry>
     <entry>
      <constant>E_USER_NOTICE</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      User-generated notice message. This is like an
      <constant>E_NOTICE</constant>, except it is generated in PHP code by
      using the PHP function <function>trigger_error</function>.
     </entry>
     <entry>since PHP 4</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-strict">
     <entry>2048</entry>
     <entry>
      <constant>E_STRICT</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Run-time notices. Enable to have PHP suggest changes
      to your code which will ensure the best interoperability
      and forward compatibility of your code.
     </entry>
     <entry>since PHP 5</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-recoverable-error">
     <entry>4096</entry>
     <entry>
      <constant>E_RECOVERABLE_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Catchable fatal error. It indicates that a probably dangerous error
      occured, but did not leave the Engine in an unstable state. If the error
      is not caught by a user defined handle (see also
      <function>set_error_handler</function>), the application aborts as it
      was an <constant>E_ERROR</constant>.
     </entry>
     <entry>since PHP 5.2.0</entry>
    </row>

    <row xml:id="errorfunc.constants.errorlevels.e-all">
     <entry>8191</entry>
     <entry>
      <constant>E_ALL</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      All errors and warnings, as supported, except of level
      <constant>E_STRICT</constant> in PHP &lt; 6.
     </entry>
     <entry>6143 in PHP 5.2.x and 2047 previously</entry>
    </row>

   </tbody>
  </tgroup>
 </table>

 <para>
  The above values (either numerical or symbolic) are used to build
  up a bitmask that specifies which errors to report. You can use the
  <link linkend="language.operators.bitwise">bitwise operators</link>
  to combine these values or mask out certain types of errors. Note
  that only '|', '~', '!', '^' and '&amp;' will be understood within
  &php.ini;, however, and that no bitwise
  operators will be understood within <filename>php3.ini</filename>.
 </para>
</appendix> 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
