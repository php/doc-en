<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.yaml-parse-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>yaml_parse_url</refname>
  <refpurpose>Parse a Yaml stream from a URL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>yaml_parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>pos</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">ndocs</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>callbacks</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Convert all or part of a YAML document stream read from a URL to a PHP variable.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       <parameter>url</parameter> should be of the form "scheme://...". PHP
       will search for a protocol handler (also known as a wrapper) for that
       scheme. If no wrappers for that protocol are registered, PHP will emit
       a notice to help you track potential problems in your script and then
       continue as though filename specifies a regular file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pos</parameter></term>
     <listitem>
      <para>
       Document to extract from stream (<literal>-1</literal> for all
       documents, <literal>0</literal> for first document, ...).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ndocs</parameter></term>
     <listitem>
      <para>
       If <parameter>ndocs</parameter> is provided, then it is filled with the
       number of documents found in stream.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callbacks</parameter></term>
     <listitem>
      <para>
       Content handlers for YAML nodes. Associative <type>array</type> of YAML
       tag =&gt; <type>callable</type> mappings. See
       <link linkend="yaml.callbacks.parse">parse callbacks</link> for more details.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the value encoded in <parameter>url</parameter> in appropriate
   PHP type&return.falseforfailure;. If <parameter>pos</parameter> is
   <literal>-1</literal> an <type>array</type> will be returned with one entry
   for each document found in the stream.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Processing untrusted user input with <function>yaml_parse_url</function>
    is dangerous if the use of <function>unserialize</function> is enabled for
    nodes using the <literal>!php/object</literal> tag. This behavior can be
    disabled by using the <literal>yaml.decode_php</literal> ini setting.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>yaml_parse</function></member>
    <member><function>yaml_parse_file</function></member>
    <member><function>yaml_emit</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
