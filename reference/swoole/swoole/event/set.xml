<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="swoole-event.set" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Swoole\Event::set</refname>
  <refpurpose>Modify event listener callbacks and mask</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type>bool</type><methodname>Swoole\Event::set</methodname>
   <methodparam><type>mixed</type><parameter>sock</parameter></methodparam>
   <methodparam><type>callable</type><parameter>read_callback</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>write_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   Modifies the event listener callbacks and mask for the given file descriptor.
  </para>
  <note>
   <simpara>
    When $read_callback is not null, the readable event callback function will be modified to the specified function.
   </simpara>
  </note>
  <note>
   <simpara>
    When $write_callback is not null, the writable event callback function will be updated to the specified function.
   </simpara>
  </note>
  <note>
   <simpara>
    Setting SWOOLE_EVENT_READ alone disables write event listening,
    while setting SWOOLE_EVENT_WRITE alone disables read event listening.
   </simpara>
  </note>
  <warning>
   <simpara>
    Swoole\Event::set replaces callbacks but does not free them.
    Specifying null for callbacks (e.g., read_callback/write_callback)
    preserves the existing callbacks instead of clearing them.
   </simpara>
  </warning>
  <warning>
   <simpara>
    Listening for SWOOLE_EVENT_READ without a read_callback (or SWOOLE_EVENT_WRITE without a write_callback)
    will cause the operation to fail and return false.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>sock</parameter></term>
    <listitem>
     <para>
      File descriptor, stream resource, sockets resource, or object.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>read_callback</parameter></term>
    <listitem>
     <para>
      Callback function for readable events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>write_callback</parameter></term>
    <listitem>
     <para>
      Callback function for writable events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>flags</parameter></term>
    <listitem>
     <para>
      Event type mask (e.g. <constant>SWOOLE_EVENT_READ</constant>, <constant>SWOOLE_EVENT_WRITE</constant>
      or <constant>SWOOLE_EVENT_READ</constant> | <constant>SWOOLE_EVENT_WRITE</constant>).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
