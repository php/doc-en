<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="swoole-event.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Swoole\Event::add</refname>
  <refpurpose>Add a socket to the underlying reactor event listener</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type>bool</type><methodname>Swoole\Event::add</methodname>
   <methodparam><type>mixed</type><parameter>sock</parameter></methodparam>
   <methodparam><type>callable</type><parameter>read_callback</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>write_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   Adds a socket to the underlying reactor event listener. This function can be used in both Server and Client modes.
  </para>
  <warning>
   <para>
    A socket that has already been added cannot be added again. Use swoole_event_set to
    modify the corresponding callback functions and event types for the socket.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>sock</parameter></term>
    <listitem>
     <para>
      File descriptor, stream resource, sockets resource, or object.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>read_callback</parameter></term>
    <listitem>
     <para>
      Callback function for readable events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>write_callback</parameter></term>
    <listitem>
     <para>
      Callback function for writable events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>flags</parameter></term>
    <listitem>
     <para>
      Event type mask (e.g. <constant>SWOOLE_EVENT_READ</constant>, <constant>SWOOLE_EVENT_WRITE</constant>
      or <constant>SWOOLE_EVENT_READ</constant> | <constant>SWOOLE_EVENT_WRITE</constant>).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>Swoole\Event::add</function> example</title>
    <programlisting role="php">
     <![CDATA[
<?php
$fp = stream_socket_client("tcp://www.qq.com:80", $errno, $errstr, 30);
fwrite($fp,"GET / HTTP/1.1\r\nHost: www.qq.com\r\n\r\n");

Swoole\Event::add($fp, function($fp) {
    $resp = fread($fp, 8192);
    Swoole\Event::del($fp);
    fclose($fp);
});
echo "Finish\n";
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
