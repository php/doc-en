<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<reference xml:id="class.swoole-timer" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The Swoole\Timer class</title>
 <titleabbrev>Swoole\Timer</titleabbrev>

 <partintro>

<!-- {{{ Swoole\Timer intro -->
  <section xml:id="swoole-timer.intro">
   &reftitle.intro;
   <para>
    Millisecond precision timer. The underlying implementation is based on epoll_wait and setitimer,
    using a min-heap data structure that supports adding a large number of timers.
   </para>
   <para>
    In synchronous IO processes, it's implemented using setitimer and signals, such as in Manager and TaskWorker processes.
   </para>
   <para>
    In asynchronous IO processes, it's implemented using the timeout of epoll_wait/kevent/poll/select.
   </para>
   <para>
    The underlying system does not support timers with a time parameter of 0. This is different from languages like Node.js.
    In Swoole, you can use Swoole\Event::defer to achieve similar functionality.
    <programlisting role="php">
     <![CDATA[
<?php
Swoole\Event::defer(function () {
  echo "hello\n";
});
?>
]]>
    </programlisting>
   </para>
   <para>
    Timer Correction: The execution time of the timer callback function does not affect the timing of the
    next timer execution. For example, setting a tick timer of 10ms after 0.002s, the first callback will
    be executed at 0.012s, if the callback function takes 5ms to execute, the next timer will still trigger
    at 0.022s, not at 0.027s.

    However, if the execution time of the timer callback function is too long, even covering the time of the
    next timer execution, the underlying system will perform time correction, discarding the expired behavior
    and triggering the timer callback at the next available time. For example, if the callback function
    at 0.012s takes 15ms to execute, causing the timer at 0.022s to be delayed, the timer callback
    will be triggered again at 0.032s.
   </para>
   <para>
    By default, when a timer is triggered, a coroutine is automatically created to execute the callback function.
   </para>
   <warning>
    <simpara>
     Timer only works within the current process space.
    </simpara>
   </warning>
   <warning>
    <simpara>
     Timer is purely asynchronous and incompatible with synchronous IO functions.
    </simpara>
   </warning>
   <warning>
    <simpara>
     Timer execution may experience minor timing deviations.
    </simpara>
   </warning>
  </section>
<!-- }}} -->

  <section xml:id="swoole-timer.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Swoole\Timer</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Swoole\Timer</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.swoole-timer')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

 &reference.swoole.swoole.entities.timer;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
