<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Verify that a value can be called as a function from the current scope
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Verifies that <parameter>value</parameter> is a <type>callable</type>,
   or that it can be called using the
   <function>call_user_func</function> function.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       The value to be checked.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       If set to &true; the function only verifies that
       <parameter>value</parameter> might be a function or method. It will
       reject any values that are not <link linkend="object.invoke">invokable</link> objects,
       <classname>Closure</classname>, &string;s, or &array;s that do not have
       a valid structure to be used as a callback. A valid callable array
       has 2 entries, the first of which is an object
       or a string, and the second a string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Receives the "callable name", e.g.
       <literal>"SomeClass::someMethod"</literal>. Note, however, that despite
       the implication that <literal>SomeClass::someMethod()</literal> is a
       callable static method, this is not the case.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns &true; if <parameter>value</parameter> is callable, &false; 
   otherwise.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Checking whether a string can be called as a function</title>
    <programlisting role="php">
<![CDATA[
<?php

function someFunction() {}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(12) "someFunction"
]]>
    </screen>
   </example>
   <example>
    <title>Checking whether an array can be called as a function</title>
    <programlisting role="php">
<![CDATA[
<?php

class SomeClass
{
    public function someMethod() {}
}

$anObject = new SomeClass();

$methodVariable = [$anObject, 'someMethod'];

var_dump(is_callable($methodVariable, true, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(21) "SomeClass::someMethod"
]]>
    </screen>
   </example>
   <example>
    <title><function>is_callable</function> and constructors</title>
    <simpara>
     Despite the fact that constructors are the methods that are called when
     an object is created, they are not static methods and
     <function>is_callable</function> will return &false; for them. It's not
     possible to use <function>is_callable</function> to check if a class can
     be instantiated from the current scope.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}

    public function foo() {}
}

var_dump(
    is_callable(['Foo', '__construct']),
    is_callable(['Foo', 'foo'])
);

$foo = new Foo();
var_dump(is_callable([$foo, '__construct']));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
bool(true)
]]>
    </screen>
   </example>
  </para>   
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    An object is always callable if it implements <link linkend="object.invoke">__invoke()</link>,
    and that method is visible in the current scope.
   </member>
   <member>
    A class name is callable if it implements <link linkend="object.callstatic">__callStatic()</link>.
   </member>
   <member>
    If an object implements <link linkend="object.call">__call()</link>, then this function will
    return &true; for any method on that object, even if the method is not defined.
   </member>
   <member>
    This function may trigger autoloading if called with the name of a class.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
