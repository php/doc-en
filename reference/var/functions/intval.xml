<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.intval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>intval</refname>
  <refpurpose>Get the integer value of a variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>intval</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>base</parameter><initializer>10</initializer></methodparam>
  </methodsynopsis>
  <para>
   Returns the <type>integer</type> value of <parameter>var</parameter>,
   using the specified <parameter>base</parameter> for the conversion 
   (the default is base 10). <function>intval</function> should not be used
   on objects, as doing so will emit an <constant>E_NOTICE</constant> level
   error and return 1.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       The scalar value being converted to an integer
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>base</parameter></term>
     <listitem>
      <para>
       The base for the conversion
      </para>
      <note>
       <para>
        If <parameter>base</parameter> is 0, the base used is determined
        by the format of <parameter>var</parameter>:
        <itemizedlist>
         <listitem>
          <simpara>
           if string includes a "0x" (or "0X") prefix, the base is taken
           as 16 (hex); otherwise,
          </simpara>
         </listitem>
         <listitem>
          <simpara>
           if string starts with "0", the base is taken as 8 (octal);
           otherwise,
          </simpara>
         </listitem>
         <listitem>
          <simpara>
           the base is taken as 10 (decimal).
          </simpara>
         </listitem>
        </itemizedlist>
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   The integer value of <parameter>var</parameter> on success, or 0 on
   failure. Empty arrays return 0, non-empty arrays return 1.
  </para>
  <para>
   The maximum value depends on the system. 32 bit systems have a 
   maximum signed integer range of -2147483648 to 2147483647. So for example 
   on such a system, <literal>intval('1000000000000')</literal> will return 
   2147483647. The maximum signed integer value for 64 bit systems is 
   9223372036854775807.
  </para>
  <para>
   Strings will most likely return 0 although this depends on the 
   leftmost characters of the string. The common rules of 
   <link linkend="language.types.integer.casting">integer casting</link> 
   apply.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>intval</function> examples</title>
    <para>
     The following examples are based on a 32 bit system.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
echo intval(42);                      // 42
echo intval(4.2);                     // 4
echo intval('42');                    // 42
echo intval('+42');                   // 42
echo intval('-42');                   // -42
echo intval(042);                     // 34
echo intval('042');                   // 42
echo intval(1e10);                    // 1410065408
echo intval('1e10');                  // 1
echo intval(0x1A);                    // 26
echo intval(42000000);                // 42000000
echo intval(420000000000000000000);   // 0
echo intval('420000000000000000000'); // 2147483647
echo intval(42, 8);                   // 42
echo intval('42', 8);                 // 34
echo intval(array());                 // 0
echo intval(array('foo', 'bar'));     // 1
echo intval(false);                   // 0
echo intval(true);                    // 1
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    The <parameter>base</parameter> parameter has no effect unless the
    <parameter>var</parameter> parameter is a string.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>boolval</function></member>
    <member><function>floatval</function></member>
    <member><function>strval</function></member>
    <member><function>settype</function></member>
    <member><function>is_numeric</function></member>
    <member><link linkend="language.types.type-juggling">Type juggling</link></member>
    <member><link linkend="ref.bc">BCMath Arbitrary Precision Mathematics Functions</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
