<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.session-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>session_start</refname>
  <refpurpose>Start new or resume existing session</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_start</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>session_start</function> creates a session or resumes the
   current one based on a session identifier passed via a GET or POST
   request, or passed via a cookie.
  </para>
  <para>
   When <function>session_start</function> is called or when a session auto starts,
   PHP will call the open and read session save handlers.  These will either be a built-in
   save handler provided by default or by PHP extensions (such as SQLite or Memcached); or can be
   custom handler as defined by <function>session_set_save_handler</function>.
   The read callback will retrieve any existing session data (stored in a special serialized format)
   and will be unserialized and used to automatically populate the $_SESSION superglobal when the
   read callback returns the saved session data back to PHP session handling.
  </para>
  <para>
   To use a named session, call
   <function>session_name</function> before calling
   <function>session_start</function>.
  </para>
  <para>
   When <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
   is enabled, the <function>session_start</function> function will
   register an internal output handler for URL rewriting.
  </para>
  <para>
   If a user uses <literal>ob_gzhandler</literal> or similar with
   <function>ob_start</function>, the function order is important for
   proper output.  For example,
   <literal>ob_gzhandler</literal> must be registered before starting the session.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      If provided, this is an associative array of options that will override
      the currently set
      <link linkend="session.configuration">session configuration directives</link>.
      The keys should not include the <literal>session.</literal> prefix.
     </para>
     <para>
      In addition to the normal set of configuration directives, a
      <literal>read_and_close</literal> option may also be provided. If set to
      &true;, this will result in the session being closed immediately after
      being read, thereby avoiding unnecessary locking if the session data
      won't be changed.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   This function returns &true; if a session was successfully started,
   otherwise &false;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        <function>session_start</function> now returns &false; and no longer
        initializes <varname>$_SESSION</varname> when it failed to start the
        session.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>A basic session example</title>

   <para>
    <example>
     <title><filename>page1.php</filename></title>
     <programlisting role="php">
<![CDATA[
<?php
// page1.php

session_start();

echo 'Welcome to page #1';

$_SESSION['favcolor'] = 'green';
$_SESSION['animal']   = 'cat';
$_SESSION['time']     = time();

// Works if session cookie was accepted
echo '<br /><a href="page2.php">page 2</a>';

// Or maybe pass along the session id, if needed
echo '<br /><a href="page2.php?' . SID . '">page 2</a>';
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    After viewing <filename>page1.php</filename>, the second page
    <filename>page2.php</filename> will magically contain the session
    data.  Read the <link linkend="ref.session">session reference</link>
    for information on <link linkend="session.idpassing">propagating
    session ids</link> as it, for example, explains what the constant
    <constant>SID</constant> is all about.
   </para>
   <para>
    <example>
     <title><filename>page2.php</filename></title>
     <programlisting role="php">
<![CDATA[
<?php
// page2.php

session_start();

echo 'Welcome to page #2<br />';

echo $_SESSION['favcolor']; // green
echo $_SESSION['animal'];   // cat
echo date('Y m d H:i:s', $_SESSION['time']);

// You may want to use SID here, like we did in page1.php
echo '<br /><a href="page1.php">page 1</a>';
?>
]]>
     </programlisting>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Providing options to <function>session_start</function></title>

   <example>
    <title>Overriding the cookie lifetime</title>
    <programlisting role="php">
<![CDATA[
<?php
// This sends a persistent cookie that lasts a day.
session_start([
    'cookie_lifetime' => 86400,
]);
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Reading the session and closing it</title>
    <programlisting role="php">
<![CDATA[
<?php
// If we know we don't need to change anything in the
// session, we can just read and close rightaway to avoid
// locking the session file and blocking other pages
session_start([
    'cookie_lifetime' => 86400,
    'read_and_close'  => true,
]);
]]>
    </programlisting>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    To use cookie-based sessions, <function>session_start</function>
    must be called before outputting anything to the browser.
   </para>
  </note>
  <note>
   <para>
    Use of <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
    is recommended instead of <function>ob_gzhandler</function>
   </para>
  </note>
  <note>
   <para>
    This function sends out several HTTP headers depending on the
    configuration. See <function>session_cache_limiter</function> to
    customize these headers.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><varname>$_SESSION</varname></member>
    <member>
     The <link linkend="ini.session.auto-start">session.auto_start</link>
     configuration directive
    </member>
    <member><function>session_id</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
