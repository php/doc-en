<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.max" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>max</refname>
  <refpurpose>Find highest value</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>max</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <simpara>Alternative signature (not supported with named arguments):</simpara>
  <methodsynopsis>
   <type>mixed</type><methodname>max</methodname>
   <methodparam><type>array</type><parameter>value_array</parameter></methodparam>
  </methodsynopsis>
  <para>
   If the first and only parameter is an array, <function>max</function>
   returns the highest value in that array. If at least two parameters are 
   provided, <function>max</function> returns the biggest of these values.
  </para>
  <note>
   <para>
    Values of different types will be compared using the <link linkend="language.operators.comparison">
    standard comparison rules</link>. For instance, a non-numeric <type>string</type> will be
    compared to an <type>int</type> as though it were <literal>0</literal>, but multiple non-numeric
    <type>string</type> values will be compared alphanumerically. The actual value returned will be of the
    original type with no conversion applied.
   </para>
  </note>
  <caution>
   <simpara>
    Be careful when passing arguments of different types because
    <function>max</function> can produce unpredictable results.
   </simpara>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Any <link linkend="language.operators.comparison">comparable</link>
       value.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       Any <link linkend="language.operators.comparison">comparable</link>
       values.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value_array</parameter></term>
     <listitem>
      <para>
       An array containing the values.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>max</function> returns the parameter value considered "highest" according to standard
   comparisons. If multiple values of different types evaluate as equal (e.g. <literal>0</literal>
   and <literal>'abc'</literal>) the first provided to the function will be returned.
  </para>

  <para>
   If an empty array is passed, then &false; will be returned and an
   <constant>E_WARNING</constant> error will be emitted.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Example uses of <function>max</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo max(2, 3, 1, 6, 7);  // 7
echo max(array(2, 4, 5)); // 5

// The string 'hello' when compared to an int is treated as 0
// Since the two values are equal, the order they are provided determines the result
echo max(0, 'hello');     // 0
echo max('hello', 0);     // hello

// Here we are comparing -1 < 0, so 'hello' is the highest value
echo max('hello', -1);    // hello

// With multiple arrays of different lengths, max returns the longest
$val = max(array(2, 2, 2), array(1, 1, 1, 1)); // array(1, 1, 1, 1)

// Multiple arrays of the same length are compared from left to right
// so in our example: 2 == 2, but 5 > 4
$val = max(array(2, 4, 8), array(2, 5, 1)); // array(2, 5, 1)

// If both an array and non-array are given, the array will be returned
// as comparisons treat arrays as greater than any other value
$val = max('string', array(2, 5, 7), 42);   // array(2, 5, 7)

// If one argument is NULL or a boolean, it will be compared against
// other values using the rule FALSE < TRUE regardless of the other types involved
// In the below example, -10 is treated as TRUE in the comparison
$val = max(-10, FALSE); // -10

// 0, on the other hand, is treated as FALSE, so is "lower than" TRUE
$val = max(0, TRUE); // TRUE
?>
]]>
    </programlisting>
    </example> 
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>min</function></member>
    <member><function>count</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
