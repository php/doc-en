<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.fsockopen">
 <refnamediv>
  <refname>fsockopen</refname>
  <refpurpose>Open Internet or Unix domain socket connection</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>fsockopen</methodname>
   <methodparam><type>string</type><parameter>hostname</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">errno</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">errstr</parameter></methodparam>
   <methodparam choice="opt"><type>float</type><parameter>timeout</parameter><initializer>ini_get("default_socket_timeout")</initializer></methodparam>
  </methodsynopsis>
  <para>
   Initiates a socket connection to the resource specified by
   <parameter>hostname</parameter>.
  </para>
  <para>
   PHP supports targets in the Internet and Unix domains as described in
   <xref linkend="transports"/>.  A list of supported transports can also be
   retrieved using <function>stream_get_transports</function>.
  </para>
  <para>
   The socket will by default be opened in blocking mode.  You can
   switch it to non-blocking mode by using
   <function>stream_set_blocking</function>.
  </para>
  <para>
   The function <function>stream_socket_client</function> is similar but
   provides a richer set of options, including non-blocking connection and the
   ability to provide a stream context.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>hostname</parameter></term>
     <listitem>
      <para>
       If OpenSSL support <link linkend="openssl.installation">is
       installed</link>, you may prefix the <parameter>hostname</parameter>
       with either <literal>ssl://</literal> or <literal>tls://</literal> to
       use an SSL or TLS client connection over TCP/IP to connect to the
       remote host.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       The port number. This can be omitted and skipped with
       <literal>-1</literal> for transports that do not use ports, such as
       <literal>unix://</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errno</parameter></term>
     <listitem>
      <para>
       If provided, holds the system level error number that occurred in the
       system-level <literal>connect()</literal> call.
      </para>
      <para>
       If the value returned in <parameter>errno</parameter> is
       <literal>0</literal> and the function returned &false;, it is an
       indication that the error occurred before the 
       <literal>connect()</literal> call. This is most likely due to a
       problem initializing the socket.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errstr</parameter></term>
     <listitem>
      <para>
       The error message as a string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       The connection timeout, in seconds.
      </para>
      <note>
       <para>
        If you need to set a timeout for reading/writing data over the
        socket, use <function>stream_set_timeout</function>, as the 
        <parameter>timeout</parameter> parameter to
        <function>fsockopen</function> only applies while connecting the
        socket.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>fsockopen</function> returns a file pointer which may be used
   together with the other file functions (such as
   <function>fgets</function>, <function>fgetss</function>,
   <function>fwrite</function>, <function>fclose</function>, and
   <function>feof</function>). If the call fails, it will return &false;
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <constant>E_WARNING</constant> if <parameter>hostname</parameter> is
   not a valid domain.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>fsockopen</function> Example</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fsockopen("www.example.com", 80, $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    $out = "GET / HTTP/1.1\r\n";
    $out .= "Host: www.example.com\r\n";
    $out .= "Connection: Close\r\n\r\n";
    fwrite($fp, $out);
    while (!feof($fp)) {
        echo fgets($fp, 128);
    }
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Using UDP connection</title>
    <para>
     The example below shows how to retrieve the day and time from the UDP
     service "daytime" (port 13) in your own machine.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fsockopen("udp://127.0.0.1", 13, $errno, $errstr);
if (!$fp) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($fp, "\n");
    echo fread($fp, 26);
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Depending on the environment, the Unix domain or the optional
    connect timeout may not be available.
   </para>
  </note>
  <warning>
   <para>
    UDP sockets will sometimes appear to have opened without an error,
    even if the remote host is unreachable.  The error will only
    become apparent when you read or write data to/from the socket.
    The reason for this is because UDP is a "connectionless" protocol,
    which means that the operating system does not try to establish
    a link for the socket until it actually needs to send or receive data.
   </para>
  </warning>
  &ipv6.brackets;
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pfsockopen</function></member>
    <member><function>stream_socket_client</function></member>
    <member><function>stream_set_blocking</function></member>
    <member><function>stream_set_timeout</function></member>
    <member><function>fgets</function></member>
    <member><function>fgetss</function></member>
    <member><function>fwrite</function></member>
    <member><function>fclose</function></member>
    <member><function>feof</function></member>
    <member><function>socket_connect</function></member>
    <member>The <link linkend="ref.curl">Curl extension</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
