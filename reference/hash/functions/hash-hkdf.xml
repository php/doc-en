<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.hash-hkdf" xmlns="http://docbook.org/ns/docbook"  xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_hkdf</refname>
  <refpurpose>Generate a HKDF key derivation of a supplied key input</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>hash_hkdf</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><type>string</type><parameter>ikm</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>info</parameter><initializer>''</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>salt</parameter><initializer>''</initializer></methodparam>
  </methodsynopsis>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       Name of selected hashing algorithm (i.e. "sha256", "sha512", "haval160,4", etc..)
       See <function>hash_algos</function> for a list of supported algorithms.
       <note>
        <para>
         Non-cryptographic hash functions are not allowed.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ikm</parameter></term>
     <listitem>
      <para>
       Input keying material (raw binary). Cannot be empty.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Desired output length in bytes.
       Cannot be greater than 255 times the chosen hash function size.
      </para>
      <para>
       If <parameter>length</parameter> is <literal>0</literal>, the output length
       will default to the chosen hash function size.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>info</parameter></term>
     <listitem>
      <para>
       Application/context-specific info string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Salt to use during derivation.
      </para>
      <para>
       While optional, adding random salt significantly improves the strength of HKDF.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a string containing a raw binary representation of the derived key
   (also known as output keying material - OKM); or &false; on failure.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   An <constant>E_WARNING</constant> will be raised if <parameter>ikm</parameter>
   is empty, <parameter>algo</parameter> is unknown/non-cryptographic,
   <parameter>length</parameter> is less than <literal>0</literal> or too large
   (greater than 255 times the size of the hash function).
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>hash_hkdf</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// Generate a random key, and salt to strengthen it during derivation.
$inputKey = random_bytes(32);
$salt = random_bytes(16);

// Derive a pair of separate keys, using the same input created above.
$encryptionKey = hash_hkdf('sha256', $inputKey, 32, 'aes-256-encryption', $salt);
$authenticationKey = hash_hkdf('sha256', $inputKey, 32, 'sha-256-authentication', $salt);

var_dump($encryptionKey !== $authenticationKey); // bool(true)
?>
]]>
    </programlisting>
    <para>
     The above example produces a pair of separate keys, suitable for creation of an
     encrypt-then-HMAC construct, using AES-256 and SHA-256 for encryption and
     authentication respectively.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>hash_pbkdf2</function></member>
    <member><link xlink:href="&url.rfc;5869">RFC 5869</link></member>
    <member><link xlink:href="&url.git.hub;narfbg/hash_hkdf_compat">userland implementation</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
