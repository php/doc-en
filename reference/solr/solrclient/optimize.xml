<?xml version="1.0" encoding="utf-8"?>

<refentry xml:id="solrclient.optimize" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SolrClient::optimize</refname>
  <refpurpose>Defragments the index</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>SolrUpdateResponse</type><methodname>SolrClient::optimize</methodname>
   <methodparam choice="opt"><type>int</type><parameter>maxSegments</parameter><initializer>1</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>softCommit</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>waitSearcher</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Defragments the index for faster search performance.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>maxSegments</parameter></term>
     <listitem>
      <para>
       Optimizes down to at most this number of segments. Since Solr 1.3
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>softCommit</parameter></term>
     <listitem>
      <para>
       This will refresh the 'view' of the index in a more performant manner, but without "on-disk" guarantees. (Solr4.0+)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>waitSearcher</parameter></term>
     <listitem>
      <para>
       Block until a new searcher is opened and registered as the main query searcher, making the changes visible. 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a SolrUpdateResponse on success or throws an exception on failure.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>SolrClientException</classname> if the client had failed, or there was a connection issue.
  </para>
  <para>
   Throws <classname>SolrServerException</classname> if the Solr Server had failed to process the request.
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    PECL Solr &gt;= 2.0 only supports Solr Server &gt;= 4.0 
   </para>
   <para>
    Prior to PECL Solr 2.0 this method used to accept these arguments "int $maxSegments, bool $waitFlush, bool $waitSearcher".
   </para>
  </warning>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>SolrClient::commit</methodname></member>
    <member><methodname>SolrClient::rollback</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
