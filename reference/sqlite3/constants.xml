<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<appendix xml:id="sqlite3.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  <variablelist>
   <varlistentry xml:id="constant.sqlite3-assoc">
    <term>
     <constant>SQLITE3_ASSOC</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the <methodname>Sqlite3Result::fetchArray</methodname>
      method shall return an array indexed by column name as returned in the
      corresponding result set.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-num">
    <term>
     <constant>SQLITE3_NUM</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the <methodname>Sqlite3Result::fetchArray</methodname>
      method shall return an array indexed by column number as returned in the
      corresponding result set, starting at column 0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-both">
    <term>
     <constant>SQLITE3_BOTH</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the <methodname>Sqlite3Result::fetchArray</methodname>
      method shall return an array indexed by both column name and number as
      returned in the corresponding result set, starting at column 0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-integer">
    <term>
     <constant>SQLITE3_INTEGER</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Represents the SQLite3 INTEGER storage class.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-float">
    <term>
     <constant>SQLITE3_FLOAT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Represents the SQLite3 REAL (FLOAT) storage class.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-text">
    <term>
     <constant>SQLITE3_TEXT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Represents the SQLite3 TEXT storage class.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-blob">
    <term>
     <constant>SQLITE3_BLOB</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Represents the SQLite3 BLOB storage class.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-null">
    <term>
     <constant>SQLITE3_NULL</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Represents the SQLite3 NULL storage class.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-open-readonly">
    <term>
     <constant>SQLITE3_OPEN_READONLY</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the SQLite3 database be opened for reading only.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-open-readwrite">
    <term>
     <constant>SQLITE3_OPEN_READWRITE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the SQLite3 database be opened for reading and writing.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-open-create">
    <term>
     <constant>SQLITE3_OPEN_CREATE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the SQLite3 database be created if it does not already
      exist.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sqlite3-deterministic">
    <term>
     <constant>SQLITE3_DETERMINISTIC</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that a function created with <function>SQLite3::createFunction</function>
      is deterministic, i.e. it always returns the same result given the same inputs within
      a single SQL statement. (Available as of PHP 7.1.4.)
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

