<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="sqlite3stmt.bindvalue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3Stmt::bindValue</refname>
  <refpurpose>Binds the value of a parameter to a statement variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>SQLite3Stmt::bindValue</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer><constant>SQLITE3_TEXT</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Binds the value of a parameter to a statement variable.
  </para>
  <caution>
   <para>
    Before PHP 7.2.14 and 7.3.0, respectively,
    once the statement has been executed, <methodname>SQLite3Stmt::reset</methodname> 
    needs to be called to be able to change the value of bound parameters.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>param</parameter></term>
     <listitem>
      <para>
       Either a <type>string</type> (for named parameters) or an <type>int</type>
       (for positional parameters) identifying the statement variable to which the
       value should be bound.
       If a named parameter does not start with a colon (<literal>:</literal>) or an
       at sign (<literal>@</literal>), a colon (<literal>:</literal>) is automatically preprended.
       Positional parameters start with <literal>1</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       The value to bind to a statement variable.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       The data type of the value to bind.
       <itemizedlist>
        <listitem>
         <para>
          <constant>SQLITE3_INTEGER</constant>: The value is a signed integer,
          stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of
          the value.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_FLOAT</constant>: The value is a floating point
          value, stored as an 8-byte IEEE floating point number.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_TEXT</constant>: The value is a text string, stored
          using the database encoding (UTF-8, UTF-16BE or UTF-16-LE).
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_BLOB</constant>: The value is a blob of data, stored
          exactly as it was input.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_NULL</constant>: The value is a NULL value.
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       As of PHP 7.0.7, if <parameter>type</parameter> is omitted, it is automatically
       detected from the type of the <parameter>value</parameter>: <type>bool</type>
       and <type>int</type> are treated as <constant>SQLITE3_INTEGER</constant>,
       <type>float</type> as <constant>SQLITE3_FLOAT</constant>, <type>null</type>
       as <constant>SQLITE3_NULL</constant> and all others as <constant>SQLITE3_TEXT</constant>.
       Formerly, if <parameter>type</parameter> has been omitted, it has defaulted
       to <constant>SQLITE3_TEXT</constant>.
      </para>
      <note>
       <para>
        If <parameter>value</parameter> is &null;, it is always treated as
        <constant>SQLITE3_NULL</constant>, regardless of the given
        <parameter>type</parameter>.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns &true; if the value is bound to the statement variable, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.4.0</entry>
      <entry>
       <parameter>param</parameter> now also supports the <literal>@param</literal>
       notation.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>SQLite3Stmt::bindValue</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$db = new SQLite3(':memory:');

$db->exec('CREATE TABLE foo (id INTEGER, bar STRING)');
$db->exec("INSERT INTO foo (id, bar) VALUES (1, 'This is a test')");

$stmt = $db->prepare('SELECT bar FROM foo WHERE id=:id');
$stmt->bindValue(':id', 1, SQLITE3_INTEGER);

$result = $stmt->execute();
var_dump($result->fetchArray(SQLITE3_ASSOC));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
array(1) {
  ["bar"]=>
  string(14) "This is a test"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>SQLite3Stmt::bindParam</methodname></member>
   <member><methodname>SQLite3::prepare</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
