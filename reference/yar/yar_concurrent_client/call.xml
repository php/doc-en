<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="yar-concurrent-client.call" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Yar_Concurrent_Client::call</refname>
  <refpurpose>Register a concurrent call</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type>int</type><methodname>Yar_Concurrent_Client::call</methodname>
   <methodparam><type>string</type><parameter>uri</parameter></methodparam>
   <methodparam><type>string</type><parameter>method</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>error_callback</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Register a RPC call, but won't sent it immediately, it will be send while
   further call to <methodname>Yar_Concurrent_Client::loop</methodname>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>uri</parameter></term>
    <listitem>
     <para>
       The RPC server URI(http, tcp)
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>method</parameter></term>
    <listitem>
     <para>
      Service name(aka the method name)
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>parameters</parameter></term>
    <listitem>
     <para>
      Parameters
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>callback</parameter></term>
    <listitem>
     <para>
      A function callback, which will be called while the response return.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   An unique id, can be used to identified which call it is.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Yar_Concurrent_Client::call</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
function callback($retval, $callinfo) {
     var_dump($retval);
}

function error_callback($type, $error, $callinfo) {
    error_log($error);
}

Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"), "callback");
Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"));   // if the callback is not specificed,
                                                                               // callback in loop will be used
Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"), "callback", NULL, array(YAR_OPT_PACKAGER => "json"));
                                                                               //this server accept json packager
Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"), "callback", NULL, array(YAR_OPT_TIMEOUT=>1));
                                                                               //custom timeout

//The requests are not sent yet
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Yar_Concurrent_Client::loop</methodname></member>
   <member><methodname>Yar_Concurrent_Client::reset</methodname></member>
   <member><methodname>Yar_Server::__construct</methodname></member>
   <member><methodname>Yar_Server::handle</methodname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
