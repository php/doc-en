<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- splitted from ./en/functions/pgsql.xml, last change in rev 1.80 -->
<refentry xml:id='function.pg-convert' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_convert</refname>
  <refpurpose>
   Convert associative array values into forms suitable for SQL statements
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>pg_convert</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
   <methodparam><type>array</type><parameter>assoc_array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_convert</function> checks and converts the values in
   <parameter>assoc_array</parameter> into suitable values for use in an SQL
   statement. Precondition for <function>pg_convert</function> is the 
   existence of a table <parameter>table_name</parameter> which has at least
   as many columns as <parameter>assoc_array</parameter> has elements. The
   fieldnames in <parameter>table_name</parameter> must match the indices in
   <parameter>assoc_array</parameter> and the corresponding datatypes must be
   compatible. Returns an array with the converted values on success, &false;
   otherwise.
  </para>
  <note>
   <para>
    Since PHP 5.6.0, it accepts boolean values, converting them to PostgreSQL
    booleans. String representations of boolean values are also supported. &null; is
    converted to PostgreSQL NULL.
   </para>
   <para>
    Prior to PHP 5.6.0, if there are boolean fields in <parameter>table_name</parameter> 
    don't use the constant &true; in <parameter>assoc_array</parameter>. It will be
    converted to the string 'TRUE' which is not a valid entry for boolean fields
    in PostgreSQL. Use one of "t", "true", 1, "y", "yes" instead.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       PostgreSQL database connection resource.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>table_name</parameter></term>
     <listitem>
      <para>
       Name of the table against which to convert types.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>assoc_array</parameter></term>
     <listitem>
      <para>
       Data to be converted.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Any number of <constant>PGSQL_CONV_IGNORE_DEFAULT</constant>,
       <constant>PGSQL_CONV_FORCE_NULL</constant> or
       <constant>PGSQL_CONV_IGNORE_NOT_NULL</constant>, combined.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   An <type>array</type> of converted values, or &false; on error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_convert</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php 
  $dbconn = pg_connect('dbname=foo');
  
  $tmp = array(
      'author' => 'Joe Thackery',
      'year' => 2005,
      'title' => 'My Life, by Joe Thackery'
  );
  
  $vals = pg_convert($dbconn, 'authors', $tmp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.6.0</entry>
       <entry>
        No longer experimental. Boolean/NULL data types are supported. Unknown/unsupported
        data types are escaped without validation. <function>pg_convert</function> can
        be used with any data types.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_meta_data</function></member>
    <member><function>pg_insert</function></member>
    <member><function>pg_select</function></member>
    <member><function>pg_update</function></member>
    <member><function>pg_delete</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
