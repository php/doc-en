<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="sca.createdataobject" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SCA::createDataObject</refname>
  <refpurpose>Create an SDO</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>SDO_DataObject</type>
   <methodname>SCA::createDataObject</methodname>
   <methodparam>
    <type>string</type>
    <parameter>type_namespace_uri</parameter>
   </methodparam>
   <methodparam>
    <type>string</type>
    <parameter>type_name</parameter>
   </methodparam>
  </methodsynopsis>

  &warn.experimental.func;

  <para> This method is used inside an SCA component that needs to create
   an SDO to return. The parameters are the desired SDO's namespace URI
   and type name. The namespace and type must be defined in one of the
   schema files which are specified on the @types annotation within the
   component. </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>type_namespace_uri</parameter>
     </term>
     <listitem>
      <para> The namespace of the type. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>type_name</parameter>
     </term>
     <listitem>
      <para> The name of the type. </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para> Returns the newly created SDO_DataObject. </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>SDO_TypeNotFoundException</parameter>
     </term>
     <listitem>
      <para> Thrown if the namespaceURI and typeName do not correspond
       to a type in any of the schema files specified in the @types
       annotations. </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <!-- Use when a CHANGELOG exists
 <refsect1 role="changelog">
 &reftitle.changelog;
 <para>
 <informaltable>
 <tgroup cols="2">
 <thead>
 <row>
 <entry>&Version;</entry>
 <entry>&Description</entry>
 </row>
 </thead>
 <tbody>
 <row>
 <entry>Enter the PHP version of change here
 <entry>Description of change
 </row>
 </tbody>
 </tgroup>
 </informaltable>
 </para>
 </refsect1>
 -->

 <!-- Use when examples exist
 <refsect1 role="examples">
 &reftitle.examples;
 <para>
 <example>
 <title>A <function>xxx::xxx</function> example</title>
 <para>
 Any text that describes the purpose of the example, or
 what goes on in the example should go here (inside the
 <example> tag, not out
 </para>
 <programlisting role="php">
 <![CDATA[
 <?php
 if ($anexample === true) {
 echo 'Use the PEAR Coding Standards';
 }
 ?>
 ]]>
 </programlisting>
 &example.outputs;
 <screen>
 <![CDATA[
 Use the PEAR Coding Standards
 ]]>
 </screen>
 </example>
 </para>
 </refsect1>
 -->

 <!-- Use when adding See Also links
 <refsect1 role="seealso">
 &reftitle.seealso;
 <para>
 <simplelist>
 <member><function></function></member>
 <member>Or <link linkend="somethingelse">something else</link></member>
 </simplelist>
 </para>
 </refsect1>
 -->

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
