<?xml version="1.0" encoding="utf-8"?>
<appendix xml:id="simdjson.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  <variablelist>
   <varlistentry xml:id="constant.simdjson-err-capacity">
    <term>
     <constant>SIMDJSON_ERR_CAPACITY</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      This parser can't support a document that big.
      Thrown when parsing a JSON string that is over 4GiB long.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-tape-error">
    <term>
     <constant>SIMDJSON_ERR_TAPE_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      The JSON document has an improper structure: missing or superfluous commas, braces, missing keys, etc.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-depth-error">
    <term>
     <constant>SIMDJSON_ERR_DEPTH_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      The JSON document was too deep (too many nested objects and arrays)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-string-error">
    <term>
     <constant>SIMDJSON_ERR_STRING_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Problem while parsing a string
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-t-atom-error">
    <term>
     <constant>SIMDJSON_ERR_T_ATOM_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Problem while parsing an atom starting with the letter 't'
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-f-atom-error">
    <term>
     <constant>SIMDJSON_ERR_F_ATOM_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      Problem while parsing an atom starting with the letter 'f'
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-n-atom-error">
    <term>
     <constant>SIMDJSON_ERR_N_ATOM_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      Problem while parsing an atom starting with the letter 'n'
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-number-error">
    <term>
     <constant>SIMDJSON_ERR_NUMBER_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      Problem while parsing a number
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-utf8-error">
    <term>
     <constant>SIMDJSON_ERR_UTF8_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      The input is not valid UTF-8
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-uninitialized">
    <term>
     <constant>SIMDJSON_ERR_UNINITIALIZED</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      The parser used by simdjson is uninitialized. Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-empty">
    <term>
     <constant>SIMDJSON_ERR_EMPTY</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Empty: no JSON found
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-unescaped-chars">
    <term>
     <constant>SIMDJSON_ERR_UNESCAPED_CHARS</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Within strings, some characters must be escaped, we found unescaped characters
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-unclosed-string">
    <term>
     <constant>SIMDJSON_ERR_UNCLOSED_STRING</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      A string is opened, but never closed.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-unsupported-architecture">
    <term>
     <constant>SIMDJSON_ERR_UNSUPPORTED_ARCHITECTURE</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      simdjson does not have an implementation supported by this CPU architecture (perhaps it's a non-SIMD CPU?).
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-incorrect-type">
    <term>
     <constant>SIMDJSON_ERR_INCORRECT_TYPE</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-number-out-of-range">
    <term>
     <constant>SIMDJSON_ERR_NUMBER_OUT_OF_RANGE</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      The JSON number is too large or too small to fit within the requested type.
      Note that the C simdjson library is a fork and this error is ignored to match php's
      handling of JSON numbers that are too large or too small.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-index-out-of-bounds">
    <term>
     <constant>SIMDJSON_ERR_INDEX_OUT_OF_BOUNDS</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-no-such-field">
    <term>
     <constant>SIMDJSON_ERR_NO_SUCH_FIELD</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-io-error">
    <term>
     <constant>SIMDJSON_ERR_IO_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-invalid-json-pointer">
    <term>
     <constant>SIMDJSON_ERR_INVALID_JSON_POINTER</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
      Invalid JSON pointer syntax in <function>simdjson_key_value</function>
      and other functions accepting a JSON pointer <varname>$key</varname>.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-invalid-uri-fragment">
    <term>
     <constant>SIMDJSON_ERR_INVALID_URI_FRAGMENT</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Invalid URI fragment syntax.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-unexpected-error">
    <term>
     <constant>SIMDJSON_ERR_UNEXPECTED_ERROR</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Unexpected error, consider reporting this problem as you may have found a bug in the simdjson PECL
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-parser-in-use">
    <term>
     <constant>SIMDJSON_ERR_PARSER_IN_USE</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-out-of-order-iteration">
    <term>
     <constant>SIMDJSON_ERR_OUT_OF_ORDER_ITERATION</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-insufficient-padding">
    <term>
     <constant>SIMDJSON_ERR_INSUFFICIENT_PADDING</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-incomplete-array-or-object">
    <term>
     <constant>SIMDJSON_ERR_INCOMPLETE_ARRAY_OR_OBJECT</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>JSON document ended early in the middle of an object or array.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-scalar-document-as-value">
    <term>
     <constant>SIMDJSON_ERR_SCALAR_DOCUMENT_AS_VALUE</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Should not happen.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-out-of-bounds">
    <term>
     <constant>SIMDJSON_ERR_OUT_OF_BOUNDS</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Attempted to access location outside of document.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-trailing-content">
    <term>
     <constant>SIMDJSON_ERR_TRAILING_CONTENT</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-key-count-not-countable">
    <term>
     <constant>SIMDJSON_ERR_KEY_COUNT_NOT_COUNTABLE</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.simdjson-err-invalid-property">
    <term>
     <constant>SIMDJSON_ERR_INVALID_PROPERTY</constant>
     (&integer;)
    </term>
    <listitem>
     <simpara>Invalid property name for an <classname>stdClass</classname> when decoding a value
     with <function>simdjson_decode</function> or <function>simdjson_key_value</function>
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
