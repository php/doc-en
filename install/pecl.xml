<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16.2.1 $ -->

<chapter xml:id="install.pecl" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Installation of PECL extensions</title>

 <sect1 xml:id="install.pecl.intro">
  <title>Introduction to PECL Installations</title>
  <simpara>
   <link xlink:href="&url.pecl;">PECL</link> is a repository of PHP extensions that
   are made available to you via the <link xlink:href="&url.php.pear;">PEAR</link>
   packaging system.  This section of the manual is intended to demonstrate
   how to obtain and install PECL extensions.
  </simpara>
  <simpara>
   These instructions assume <literal>/your/phpsrcdir/</literal> is the path
   to the PHP source distribution, and that <literal>extname</literal> is the name of the
   PECL extension.  Adjust accordingly.  These instructions also assume a 
   familiarity with the <link xlink:href="&url.php.pear.cli;">pear command</link>.
   The information in the PEAR manual for the <literal>pear</literal> command also
   applies to the <literal>pecl</literal> command.
  </simpara>
  <simpara>
   To be useful, a shared extension must be built, installed, and loaded.  The
   methods described below provide you with various instructions on how to
   build and install the extensions, but they do not automatically load them.
   Extensions can be loaded by adding an <link
   linkend="ini.extension">extension</link> directive.  To this &php.ini;
   file, or through the use of the <function>dl</function> function.
  </simpara>
  <simpara>
   When building PHP modules, it's important to have known-good versions 
   of the required tools (autoconf, automake, libtool, etc.) See the 
   <link xlink:href="&url.php.anoncvs;">Anonymous CVS Instructions</link> for 
   details on the required tools, and required versions.
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.downloads">
  <title>Downloading PECL extensions</title>
  <simpara>
   There are several options for downloading PECL extensions, such as:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <link xlink:href="&url.pecl;">&url.pecl;</link>
    </simpara>
    <simpara>
     The PECL web site contains information about the different extensions
     that are offered by the PHP Development Team.  The information available
     here includes: ChangeLog, release notes, requirements and other similar
     details.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>pecl download extname</literal>
    </simpara>
    <simpara>
     PECL extensions that have releases listed on the PECL web site are
     available for download and installation using the <link
     xlink:href="&url.php.pear.cli;">pecl command</link>.
     Specific revisions may also be specified.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <acronym>CVS</acronym>
    </simpara>
    <simpara>
     Most PECL extensions also reside in <acronym>CVS</acronym>.  A web-based view may
     be seen at <link xlink:href="&url.php.cvs;pecl/">&url.php.cvs;pecl/</link>.  
     To download straight from <acronym>CVS</acronym>, the following 
     sequence of commands may be used.  Note that <emphasis>phpfi</emphasis> is the password for user 
     <emphasis>cvsread</emphasis>:
    </simpara>
    <para>
     <screen>
$ cvs -d:pserver:cvsread@cvs.php.net:/repository login 
$ cvs -d:pserver:cvsread@cvs.php.net:/repository co pecl/extname
     </screen>
    </para>
   </listitem>
   <listitem>
    <simpara>
     Windows downloads
    </simpara>
    <simpara>
     Windows users may find compiled PECL binaries by downloading the
     <emphasis>Collection of PECL modules</emphasis> from the 
     <link xlink:href="&url.php.downloads;">PHP Downloads</link> page, or by
     retrieving a <link xlink:href="&url.php.snapshots;">PECL Snapshot</link>
     or an extension DLL on <link xlink:href="&url.pecl.win;">PECL4WIN</link>.
     To compile PHP under Windows, read the 
     <link linkend="install.windows.building">appropriate chapter</link>.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="install.pecl.windows">
  <title>PECL for Windows users</title>
  <simpara>
   As with any other PHP extension <acronym>DLL</acronym>, installation is as
   simple as copying the PECL extension DLLs into the <link linkend="ini.extension-dir">
   extension_dir</link> folder and loading them from &php.ini;.  For 
   example, add the following line to your &php.ini;:
  </simpara>
  <para>
   <screen>
extension=php_extname.dll
   </screen>
  </para>
  <simpara>
   After doing this, restart the web service.
  </simpara>
 </sect1>
 
 <sect1 xml:id="install.pecl.pear">
  <title>Compiling shared PECL extensions with the pecl command</title>
  <simpara>
   PECL makes it easy to create shared PHP extensions. Using the 
   <link xlink:href="&url.php.pear.cli;">pecl command</link>, do the following:
  </simpara>
  <para>
   <screen>
$ pecl install extname
   </screen>
  </para>
  <simpara>
   This will download the source for <emphasis>extname</emphasis>, 
   compile, and install <filename>extname.so</filename> into your <link
   linkend="ini.extension-dir">extension_dir</link>.  
   <filename>extname.so</filename> may then be loaded via &php.ini;
  </simpara>
  <simpara>
   By default, the <literal>pecl</literal> command will not install
   packages that are marked with the <literal>alpha</literal> or
   <literal>beta</literal> state.  If no <literal>stable</literal> packages
   are available, you may install a <literal>beta</literal> package using the
   following command:
  </simpara>
  <para>
   <screen>
$ pecl install extname-beta
   </screen>
  </para>
  <para>
   You may also install a specific version using this variant:
  </para>
  <para>
   <screen>
$ pecl install extname-0.1
   </screen>
  </para>
  <note>
   <para>
    After enabling the extension in &php.ini;, restarting the web service is
    required for the changes to be picked up.
   </para>
  </note>
 </sect1>

 <sect1 xml:id="install.pecl.phpize">
  <title>Compiling shared PECL extensions with phpize</title>
  <simpara>
   Sometimes, using the <literal>pecl</literal> installer is not an option.
   This could be because you're behind a firewall, or it could be because the
   extension you want to install is not available as a PECL compatible
   package, such as unreleased extensions from CVS.  If you need to build such
   an extension, you can use the lower-level build tools to perform the build
   manually.
  </simpara>
  <simpara>
   The <literal>phpize</literal> command is used to prepare the build
   environment for a PHP extension.  In the following sample, the sources for
   an extension are in a directory named <filename>extname</filename>:
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd extname
$ phpize
$ ./configure
$ make
# make install
]]>
   </screen>
  </para>
  <simpara>
   A successful install will have created <filename>extname.so</filename> and put it 
   into the PHP 
   <link linkend="ini.extension-dir">extensions directory</link>.  You'll need
   to and adjust &php.ini; and add an <literal>extension=extname.so</literal>
   line before you can use the extension.
  </simpara>
  <simpara>
   If the system is missing the <literal>phpize</literal> command, and precompiled
   packages (like RPM's) are used, be sure to also install the appropriate 
   <literal>devel</literal> version of the PHP package as they often include the 
   <literal>phpize</literal> command along with the appropriate header files to 
   build PHP and its extensions.
  </simpara>
  <simpara>
   Execute <literal>phpize --help</literal> to display additional usage information.
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.static">
  <title>Compiling PECL extensions statically into PHP</title>
  <simpara>
   You might find that you need to build a PECL extension statically into your
   PHP binary.  To do this, you'll need to place the extension source under
   the <filename>php-src/ext/</filename> directory and tell the PHP build
   system to regenerate its configure script.
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd /your/phpsrcdir/ext
$ pecl download extname
$ gzip -d < extname.tgz | tar -xvf -
$ mv extname-x.x.x extname
]]>
   </screen>
  </para>
  <simpara>
   This will result in the following directory:
  </simpara>
  <para>
   <screen>
    /your/phpsrcdir/ext/extname
   </screen>
  </para>
  <simpara>
   From here, force PHP to rebuild the configure script, and then build PHP as normal:
  </simpara>
  <para>
   <screen>
$ cd /your/phpsrcdir 
$ rm configure
$ ./buildconf --force
$ ./configure --help
$ ./configure --with-extname --enable-someotherext --with-foobar
$ make
$ make install
   </screen>
  </para>
  <note>
   <simpara>
    To run the 'buildconf' script you need autoconf 2.13 and automake 1.4+
    (newer versions of autoconf may work, but are not supported).
   </simpara>
  </note>
  <simpara>
   Whether <literal>--enable-extname</literal> or <literal>--with-extname
   </literal> is used depends on the extension.  Typically an extension that 
   does not require external libraries uses <literal>--enable</literal>.  To be
   sure, run the following after buildconf:
  </simpara>
  <para>
   <screen>
$ ./configure --help | grep extname
   </screen>
  </para>
 </sect1>
</chapter>   

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
