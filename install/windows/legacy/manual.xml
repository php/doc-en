<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
   <sect2 xml:id="install.windows.legacy.manual" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Manual Installation Steps</title>
    <para>
     This section contains instructions for manually installing and configuring
     PHP on Microsoft Windows.
    </para>
    <sect3 xml:id="install.windows.legacy.manual.download">
     <title>Selecting and downloading the PHP distribution package</title>
     <para>
      Download the PHP zip binary distribution from
      <link xlink:href="&url.php.win.downloads;">PHP for Windows: Binaries and Sources</link>.
      There are several different versions of the zip package - to choose the right version for you,
      follow the detailed guide on the <link xlink:href="&url.php.win.downloads;">download page</link>.
     </para>
    </sect3>
    <sect3 xml:id="install.windows.legacy.manual.package">
     <title>The PHP package structure and content</title>
     <para>
      Unpack the content of the zip archive into a directory of your choice, for
      example C:\PHP\. The directory and file structure extracted from the zip will
      look as below:
      <example>
       <title>PHP 5 package structure</title>
        <programlisting>
<![CDATA[

c:\php
   |
   +--dev
   |  |
   |  |-php5ts.lib                 -- php5.lib in non thread safe version
   |
   +--ext                          -- extension DLLs for PHP
   |  |
   |  |-php_bz2.dll
   |  |
   |  |-php_cpdf.dll
   |  |
   |  |-...
   |
   +--extras                       -- empty
   |
   +--pear                         -- initial copy of PEAR
   |
   |
   |-go-pear.bat                   -- PEAR setup script
   |
   |-...
   |
   |-php-cgi.exe                   -- CGI executable
   |
   |-php-win.exe                   -- executes scripts without an opened command prompt
   |
   |-php.exe                       -- Command line PHP executable (CLI)
   |
   |-...
   |
   |-php.ini-development           -- default php.ini settings
   |
   |-php.ini-production            -- recommended php.ini settings
   |
   |-php5apache2_2.dll             -- does not exist in non thread safe version
   |
   |-php5apache2_2_filter.dll      -- does not exist in non thread safe version
   |
   |-...
   |
   |-php5ts.dll                    -- core PHP DLL ( php5.dll in non thread safe version)
   |
   |-...

]]>
       </programlisting>
      </example>
     </para>
     <para>
      Below is the list of the modules and executables included in the PHP zip
      distribution:
      <itemizedlist spacing="compact">
       <listitem>
        <para>
         <filename>go-pear.bat</filename> - the PEAR setup script. Refer to <link xlink:href="&url.pear.installation;">Installation (PEAR)</link>
         for more details.
        </para>
       </listitem>
       <listitem>
        <para>
         <filename>php-cgi.exe</filename> - CGI executable that can be used when running PHP on IIS via CGI or FastCGI.
        </para>
       </listitem>
       <listitem>
        <para>
         <filename>php-win.exe</filename> - the PHP executable for executing PHP scripts without using a command line window
         (for example PHP applications that use Windows GUI).
        </para>
       </listitem>
       <listitem>
        <para>
         <filename>php.exe</filename> - the PHP executable for executing PHP scripts within a command line interface (CLI).
        </para>
       </listitem>
       <listitem>
        <para>
         <filename>php5apache2_2.dll</filename> - Apache 2.2.X module.
        </para>
       </listitem>
       <listitem>
        <para>
         <filename>php5apache2_2_filter.dll</filename> - Apache 2.2.X filter.
        </para>
       </listitem>
      </itemizedlist>
     </para>
    </sect3>
    <sect3 xml:id="install.windows.legacy.manual.phpini">
     <title>Changing the <filename>php.ini</filename> file</title>
     <para>
     After the php package content has been extracted, copy the <filename>php.ini-production</filename> into <filename>php.ini</filename>
     in the same folder. If necessary, it is also possible to place the <filename>php.ini</filename> into any other location of your choice
     but that will require additional configuration steps as described in <link linkend="configuration.file">PHP Configuration</link>.
     </para>
     <para>
      The <filename>php.ini</filename> file tells PHP how to configure itself, and how to work with the
      environment that it runs in. Here are a number of settings for the <filename>php.ini</filename> file
      that help PHP work better with Windows. Some of these are optional. There are
      many other directives that may be relevant to your environment - refer to the
      <link linkend="ini.list">list of php.ini directives</link> for more information.
     </para>
     <para>
      Required directives:
      <itemizedlist spacing="compact">
       <listitem>
        <para>
         <varname>extension_dir</varname> = <literal>&lt;path to extension directory&gt;</literal> - The <varname>extension_dir</varname> needs
         to point to the directory where PHP extensions files are stored. The path can be absolute
         (i.e. &quot;C:\PHP\ext&quot;) or relative (i.e. &quot;.\ext&quot;). Extensions that are listed lower in the <filename>php.ini</filename> file need
         to be located in the <varname>extension_dir</varname>.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>extension</varname> = <literal>xxxxx.dll</literal> - For each extension you wish to enable, you need a corresponding &quot;extension=&quot;
         directive that tells PHP which extensions in the <varname>extension_dir</varname> to load at startup time.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>log_errors</varname> = <literal>On</literal> - PHP has an error logging facility that can be used to send errors to a file,
         or to a service (i.e. syslog) and works in conjunction with the <varname>error_log</varname> directive below. When running under IIS,
         the <varname>log_errors</varname> should be enabled, with a valid <varname>error_log</varname>.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>error_log</varname> = <literal>&lt;path to the error log file&gt;</literal> - The error_log needs to specify the absolute,
         or relative path to the file where PHP errors should be logged. This file needs to be writable for the web server.
         The most common places for this file are in various TEMP directories, for example &quot;C:\inetpub\temp\php-errors.log&quot;.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>cgi.force_redirect</varname> = <literal>0</literal> - This directive is required for running under IIS.
         It is a directory security facility required by many other web servers. However, enabling it under IIS will
         cause the PHP engine to fail on Windows.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>cgi.fix_pathinfo</varname> = <literal>1</literal> - This lets PHP access real path info following the CGI Spec.
         The IIS FastCGI implementation needs this set.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>fastcgi.impersonate</varname> = <literal>1</literal> - FastCGI under IIS supports the ability to impersonate
         security tokens of the calling client. This allows IIS to define the security context that the request runs under.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>fastcgi.logging</varname> = <literal>0</literal> - FastCGI logging should be disabled on IIS. If it is left enabled,
         then any messages of any class are treated by FastCGI as error conditions which will cause IIS to generate an HTTP 500 exception.
        </para>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      Optional directives
      <itemizedlist spacing="compact">
       <listitem>
        <para>
         <varname>max_execution_time</varname> = <literal>##</literal> - This directive tells PHP the maximum amount of time that it can spend
         executing any given script. The default for this is 30 seconds. Increase the value of this directive if PHP application take long time to execute.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>memory_limit</varname> = <literal>###M</literal> - The amount of memory available for the PHP process, in Megabytes.
         The default is 128, which is fine for most PHP applications. Some of the more complex ones might need more.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>display_errors</varname> = <literal>Off</literal> - This directive tells PHP whether to include any error messages in the
         stream that it returns to the Web server. If this is set to &quot;On&quot;, then PHP will send whichever classes of errors
         that you define with the <varname>error_reporting</varname> directive back to web server as part of the error stream.
         For security reasons it is recommended to set it to &quot;Off&quot; on production servers in order not to reveal any
         security sensitive information that is often included in the error messages.
        </para>
       </listitem>
       <listitem>
        <para>
         <varname>open_basedir</varname> = <literal>&lt;paths to directories, separated by semicolon&gt;</literal>, e.g.
         openbasedir=&quot;C:\inetpub\wwwroot;C:\inetpub\temp&quot;. This directive specified the directory paths where PHP
         is allowed to perform file system operations. Any file operation outside of the specified paths will result in an error.
         This directive is especially useful for locking down the PHP installation in shared hosting environments to prevent
         PHP scripts from accessing any files outside of the web site's root directory.
        </para>
       </listitem>
       <listitem>
         <para>
          <varname>upload_max_filesize</varname> = <literal>###M</literal> and <varname>post_max_size</varname> = <literal>###M</literal> -
          The maximum allowed size of an uploaded file and post data respectively. The values of these directives should be
          increased if PHP applications need to perform large uploads, such as for example photos or video files.
         </para>
        </listitem>
      </itemizedlist>
     </para>
    <para>
     PHP is now setup on your system.  The next step is to choose a web
     server, and enable it to run PHP.  Choose a web server from the table of
     contents.
    </para>
    <para>
     In addition to running PHP via a web server, PHP can run from the command
     line just like a <literal>.BAT</literal> script. See
     <!--<link linkend="install.windows.legacy.commandline">Command Line PHP on Microsoft
     Windows</link> for further details.-->
    </para>
    </sect3>
   </sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
