<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="migration81.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Backward Incompatible Changes</title>

 <sect2 xml:id="migration81.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration81.incompatible.core.globals-access">
   <title>$GLOBALS access restrictions</title>

   <para>
    TODO
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.static-variable-inheritance">
   <title>
    Usage of <modifier>static</modifier> variables in inherited methods
   </title>

   <para>
    TODO
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.type-compatibility-internal">
   <title>Return type compatibility with internal classes</title>

   <para>
    TODO
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.incompatible.resource2object">
  <title>Resource to Object Migration</title>

  <para>
   Several &resource;s have been migrated to &object;s.
   Return value checks using <function>is_resource</function> should be replaced with checks for &false;.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The <link linkend="book.fileinfo">FileInfo</link> functions now accept and return,
     respectively, <classname>finfo</classname> objects instead of
     <literal>fileinfo</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.ftp">FTP</link> functions now accept and return,
     respectively, <classname>FTP\Connection</classname> objects instead of
     <literal>ftp</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.imap">IMAP</link> functions now accept and return,
     respectively, <classname>IMAP\Connection</classname> objects instead of
     <literal>imap</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.ldap">LDAP</link> functions now accept and return,
     respectively, <classname>LDAP\Connection</classname> objects instead of
     <literal>ldap link</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.ldap">LDAP</link> functions now accept and return,
     respectively, <classname>LDAP\Result</classname> objects instead of
     <literal>ldap result</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.ldap">LDAP</link> functions now accept and return,
     respectively, <classname>LDAP\ResultEntry</classname> objects instead of
     <literal>ldap result entry</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.pgsql">PgSQL</link> functions now accept and return,
     respectively, <classname>PgSql\Connection</classname> objects instead of
     <literal>ppgsql link</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.pgsql">PgSQL</link> functions now accept and return,
     respectively, <classname>PgSql\Result</classname> objects instead of
     <literal>ppgsql result</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.pgsql">PgSQL</link> functions now accept and return,
     respectively, <classname>PgSql\Lob</classname> objects instead of
     <literal>ppgsql large object</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.pspell">PSpell</link> functions now accept and return,
     respectively, <classname>PSpell\Dictionary</classname> objects instead of
     <literal>pspell</literal> &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.pspell">PSpell</link> functions now accept and return,
     respectively, <classname>PSpell\Config</classname> objects instead of
     <literal>pspell config</literal> &resource;s.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   TODO
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <para>
   The <link linkend="ini.mysqlnd.fetch_data_copy">mysqlnd.fetch_data_copy</link>
   INI directive has been removed.
   This should not result in user-visible behavior changes.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   EC private keys will now be exported in PKCS#8 format rather than
   traditional format, just like all other keys.
  </para>
  <para>
   <function>openssl_pkcs7_encrypt</function> and
   <function>openssl_cms_encrypt</function> will now to default using
   AES-128-CBC rather than RC2-40. The RC2-40 cipher is considered
   insecure and not enabled by default by OpenSSL 3.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.pdo">
  <title>PHP Data Objects</title>

  <para>
   <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> now stringifies values
   of type &boolean; to <literal>"0"</literal> or
   <literal>"1"</literal>. Previously &boolean;s were not stringified.
  </para>
  <para>
   Calling <methodname>PDO::bindColumn</methodname> with
   <constant>PDO::PARAM_LOB</constant> will now constantly bind a stream
   result, when <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> is not enabled.
   Previously the result would either be a stream or a string depending on
   the used database driver and the time the binding is performed.
  </para>

  <sect3 xml:id="migration81.incompatible.pdo.mysql">
   <title>MySQL Driver</title>

   <para>
    Integers and floats in result sets will now be returned using native
    PHP types instead of &string;s when using emulated prepared statements.
    This matches the behavior of native prepared statements.
    The previous behaviour can be restored by enabling the
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> option.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.pdo.sqlite">
   <title>SQLite Driver</title>

   <para>
    Integers and floats in results sets will now be returned using native
    PHP types.
    The previous behaviour can be restored by enabling the
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> option.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.phar">
  <title>Phar</title>

  <para>
   To comply with the <interfacename>ArrayAccess</interfacename> interface,
   <methodname>Phar::offsetUnset</methodname> and
   <methodname>PharData::offsetUnset</methodname> no longer return a &boolean;.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.standard">
  <title>Standard</title>

  <para>
   TODO
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <para>
   <classname>SplFixedArray</classname>, will now be JSON encoded like an &array;
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
