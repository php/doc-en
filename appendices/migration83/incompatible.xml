<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="migration83.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Backward Incompatible Changes</title>

 <sect2 xml:id="migration83.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration83.incompatible.core.overflowing-call-stack">

   <title>Programs that were very close to overflowing the call stack</title>
   <para>
    Programs that were very close to overflowing the call stack may now throw an
    <classname>Error</classname> when using more than
    <!-- link linkend="zend.max_allowed_stack_size-zend.reserved_stack_size" -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- </link>--> bytes of stack
    (<!-- link linkend="fiber.stack_size-zend.reserved_stack_size" -->fiber.stack_size-zend.reserved_stack_size<!-- </link>--> for fibers).
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.proc-get-status-multiple-times">
   <title>Executing proc_get_status() multiple times</title>
   <para>
    Executing <function>proc_get_status</function> multiple times will now always
    return the right value on POSIX systems. Previously, only the first call
    of the function returned the right value. Executing
    <function>proc_close</function> after <function>proc_get_status</function>
    will now also return the right exit code. Previously this would return
    <literal>-1</literal>.
    Internally, this works by caching the result on POSIX systems.
    If the previous behaviour is required, it is possible to check the
    <literal>"cached"</literal> key in the array returned by
    <function>proc_get_status</function> to check whether the result was cached.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.zend-max-execution-timers">
   <title>Zend Max Execution Timers</title>
   <para>
    Zend Max Execution Timers is now enabled by default for ZTS builds on
    Linux.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.traits-with-static-properties">
   <title>Uses of traits with static properties</title>
   <para>
    Uses of traits with static properties will now redeclare static properties
    inherited from the parent class. This will create a separate static
    property storage for the current class. This is analogous to adding the
    static property to the class directly without traits.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.negative-index-to-empty-array">
   <title>Assigning a negative index to an empty array</title>
   <para>
    Assigning a negative index <varname>$n</varname> to an empty array will now make sure that the
    next index is <code>$n+1</code> instead of <literal>0</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.class-constant-visibility-check">
   <title>Class constant visibility variance check</title>
   <para>
    Class constant visibility variance is now correctly checked when inherited
    from interfaces.
   </para>
  </sect3>

  <sect3 xml:id="migration83.incompatible.core.weakmap-entries-maps-to-itself">
   <title>WeakMap entries whose key maps to itself</title>
   <para>
    <classname>WeakMap</classname> entries whose key maps to itself (possibly
    transitively) may now be removed during cycle collection if the key is not
    reachable except by iterating over the WeakMap (reachability via iteration is
    considered weak).
    Previously, such entries would never be automatically removed.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.incompatible.date">
  <title>Date</title>

  <para>
   The DateTime extension has introduced Date extension specific exceptions
   and errors under the <classname>DateError</classname> and
   <classname>DateException</classname> hierarchies, instead of warnings and
   generic exceptions. This improves error handling, at the expense
   of having to check for errors and exceptions.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.dom">
  <title>DOM</title>

  <para>
   Calling <methodname>DOMChildNode::after</methodname>,
   <methodname>DOMChildNode::before</methodname>,
   <methodname>DOMChildNode::replaceWith</methodname>
   on a node that has no parent is now a no-op instead of a hierarchy
   exception, which is the behaviour demanded by the DOM specification.
  </para>

  <para>
   Using the <classname>DOMParentNode</classname>
   and <classname>DOMChildNode</classname> methods without a document now
   works instead of throwing a <constant>DOM_HIERARCHY_REQUEST_ERR</constant>
   <classname>DOMException</classname>.
   This is in line with the behaviour demanded by the DOM specification.
  </para>

  <para>
   Calling <methodname>DOMDocument::createAttributeNS</methodname> without specifying
   a prefix would incorrectly create a default namespace, placing the element
   inside the namespace instead of the attribute. This bug is now fixed.
  </para>

  <para>
   <methodname>DOMDocument::createAttributeNS</methodname> would previously
   incorrectly throw a <constant>DOM_NAMESPACE_ERRNAMESPACE_ERR</constant>
   <classname>DOMException</classname> when the prefix was already used for a
   different URI. It now correctly chooses a different prefix when there's a
   prefix name conflict.
  </para>

  <para>
   New methods and properties were added to some DOM classes.
   If a userland class inherits from these classes and declare a method or property
   with the same name, the declarations must be compatible. Otherwise, a typical
   compile error about incompatible declarations will be thrown.
   See the <link linkend="migration83.new-features.dom">list of new features</link>
   and <link linkend="migration83.new-functions.dom">new functions</link> for
   a list of the newly implemented methods and properties.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.ffi">
  <title>FFI</title>

  <para>
   C functions that have a return type of <type>void</type> now return &null; instead of
   returning the following object <literal>object(FFI\CData:void) { }</literal>
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.opcache">
  <title>Opcache</title>

  <para>
   The <link linkend="ini.opcache.consistency-checks">opcache.consistency_checks</link>
   INI directive was removed. This feature was broken with the tracing JIT,
   as well as with inheritance cache, and has been disabled without a way to
   enable it since PHP 8.1.18 and PHP 8.2.5.
   Both the tracing JIT and inheritance cache may modify shm after the script
   has been persisted by invalidating its checksum. The attempted fix skipped
   over the modifiable pointers but was rejected due to complexity. For this
   reason, it was decided to remove the feature instead.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.phar">
  <title>Phar</title>

  <para>
   The type of <classname>Phar</classname> class constants are now declared.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.standard">
  <title>Standard</title>

  <para>
   The <function>range</function> function has had various changes:
   <simplelist>
    <member>A <classname>TypeError</classname> is now thrown when passing <type>object</type>s,
    <type>resource</type>s, or <type>array</type>s as the boundary inputs.</member>
    <member>A more descriptive <classname>ValueError</classname> is thrown when
    passing <literal>0</literal> for <parameter>$step</parameter>.</member>
    <member>A <classname>ValueError</classname> is now thrown when using a
    negative <parameter>$step</parameter> for increasing ranges.</member>
    <member>If <parameter>$step</parameter> is a float that can be interpreted
    as an int, it is now done so.</member>
    <member>A <classname>ValueError</classname> is now thrown if any argument
    is infinity or NAN.</member>
    <member>An <constant>E_WARNING</constant> is now emitted if
    <parameter>$start</parameter> or <parameter>$end</parameter> is the empty
    string. The value continues to be cast to the value <literal>0</literal>.</member>
    <member>An <constant>E_WARNING</constant> is now emitted if
    <parameter>$start</parameter> or <parameter>$end</parameter> has more than
    one byte, only if it is a non-numeric string.</member>
    <member>An <constant>E_WARNING</constant> is now emitted if
    <parameter>$start</parameter> or <parameter>$end</parameter> is cast to an
    integer because the other boundary input is a number.
    (e.g. <code>range(5, 'z');</code>).</member>
    <member>An <constant>E_WARNING</constant> is now emitted if
    <parameter>$step</parameter> is a float when trying to generate a range of
    characters, except if both boundary inputs are numeric strings (e.g.
    <code>range('5', '9', 0.5);</code> does not produce a warning).</member>
    <member><function>range</function> now produce a list of characters if one
    of the boundary inputs is a string digit instead of casting the other input
    to int (e.g. <code>range('9', 'A');</code>).</member>
   </simplelist>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
range('9', 'A');  // ["9", ":", ";", "<", "=", ">", "?", "@", "A"], as of PHP 8.3.0
range('9', 'A');  // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], prior to PHP 8.3.0
?>
]]>
    </programlisting>
   </informalexample>
  </para>

  <para>
   <function>number_format</function> now handles negative
   <parameter>$decimals</parameter> values by rounding
   <parameter>$num</parameter> to <code>abs($decimals)</code> digits before the
   decimal point. Previously, negative <parameter>$decimals</parameter> values
   were ignored.
  </para>

  <para>
   The <function>file</function> flags error check now catches all invalid flags.
   Notably <constant>FILE_APPEND</constant> was previously silently accepted.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.SNMP">
  <title>SNMP</title>

  <para>
   The type of <classname>SNMP</classname> class constants are now declared.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
