<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="migration83.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Backward Incompatible Changes</title>

 <sect2 xml:id="migration83.incompatible.core">
  <title>Core</title>

  <para>
   Programs that were very close to overflowing the call stack may now throw an
   Error when using more than
   <!-- link linkend="zend.max_allowed_stack_size-zend.reserved_stack_size" -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- </link>--> bytes of stack
   (<!-- link linkend="fiber.stack_size-zend.reserved_stack_size" -->fiber.stack_size-zend.reserved_stack_size<!-- </link>--> for fibers).
  </para>

  <para>
   Executing <function>proc_get_status</function> multiple times will now always return the right
   value on posix systems. Previously, only the first call of the function
   returned the right value. Executing <function>proc_close</function> after <function>proc_get_status</function>
   will now also return the right exit code. Previously this would return <literal>-1</literal>.
   Internally, this works by caching the result on posix systems. If you want
   the old behaviour, you can check the "cached" key in the array returned by
   <function>proc_get_status</function> to check whether the result was cached.
  </para>

  <para>
   Zend Max Execution Timers is now enabled by default for ZTS builds on
   Linux.
  </para>

  <para>
   Uses of traits with static properties will now redeclare static properties
   inherited from the parent class. This will create a separate static
   property storage for the current class. This is analogous to adding the
   static property to the class directly without traits.
  </para>

  <para>
   Assigning a negative index n to an empty array will now make sure that the
   next index is n+1 instead of 0.
  </para>

  <para>
   Class constant visibility variance is now correctly checked when inherited
   from interfaces.
  </para>

  <para>
   <classname>WeakMap</classname> entries whose key maps to itself (possibly transitively) may now
   be removed during cycle collection if the key is not reachable except by
   iterating over the WeakMap (reachability via iteration is considered weak).
   Previously, such entries would never be automatically removed.
  </para>

 </sect2>

 <sect2 xml:id="migration83.incompatible.dom">
  <title>DOM</title>

  <para>
   <methodname>DOMChildNode::after</methodname>, <methodname>DOMChildNode::before</methodname>, <methodname>DOMChildNode::replaceWith</methodname>
   on a node that has no parent is now a no-op instead of a hierarchy
   exception, which is the behaviour spec demands.
  </para>

  <para>
   Using the <classname>DOMParentNode</classname> and <classname>DOMChildNode</classname> methods without a document now
   works instead of throwing a HIERARCHY_REQUEST_ERR <classname>DOMException</classname>. This is in
    line with the behaviour spec demands.
  </para>

  <para>
   <methodname>DOMDocument::createAttributeNS</methodname> without specifying a prefix would incorrectly create
   a default namespace, placing the element inside the namespace instead of
   the attribute. This bug is now fixed.
  </para>

  <para>
   <methodname>DOMDocument::createAttributeNS</methodname> would previously incorrectly throw a NAMESPACE_ERR
   when the prefix was already used for a different uri. It now correctly
   chooses a different prefix when there's a prefix name conflict.
  </para>

  <para>
   New methods and properties were added to some DOM classes. If you inherit
   from these and you happen to have a method or property with the same name,
   you might encounter errors if the declaration is incompatible.
   <link linkend="migration83.new-features.dom">New Features</link> and <link linkend="migration83.new-functions.dom">New Functions</link> for a list of
   newly implemented methods and properties.

  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.ffi">
  <title>FFI</title>

  <para>
   C functions that have a return type of void now return null instead of
   returning the following object <literal>object(FFI\CData:void) { }</literal>
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.opcache">
  <title>Opcache</title>

  <para>
   The <link linkend="ini.opcache.consistency-checks">opcache.consistency_checks</link> INI directive was removed. This feature was
   broken with the tracing JIT, as well as with inheritance cache, and has
   been disabled without a way to enable it since PHP 8.1.18 and PHP 8.2.5.
   Both the tracing JIT and inheritance cache may modify shm after the script
   has been persisted by invalidating its checksum. The attempted fix skipped
   over the modifiable pointers but was rejected due to complexity. For this
   reason, it was decided to remove the feature instead.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.phar">
  <title>Phar</title>

  <para>
   The type of Phar class constants are now declared.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.standard">
  <title>Standard</title>

  <para>
   The <function>range</function> function has had various changes:
   <simplelist>
    <member>A TypeError is now thrown when passing objects, resources, or arrays
      as the boundary inputs.</member>
    <member>A more descriptive ValueError is thrown when passing 0 for $step.</member>
    <member>A ValueError is now thrown when using a negative $step for increasing ranges.</member>
    <member>If $step is a float that can be interpreted as an int, it is now done so.</member>
    <member>A ValueError is now thrown if any argument is infinity or NAN.</member>
    <member>An E_WARNING is now emitted if $start or $end is the empty string. The value continues to be cast to the value 0.</member>
    <member>An E_WARNING is now emitted if $start or $end has more than one byte, only if it is a non-numeric string.</member>
    <member>An E_WARNING is now emitted if $start or $end is cast to an integer because the other boundary input is a number. (e.g. <code>range(5, 'z');</code>).</member>
    <member>An E_WARNING is now emitted if $step is a float when trying to generate a range of characters, except if both boundary inputs are numeric strings (e.g. <code>range('5', '9', 0.5);</code> does not produce a warning).</member>
    <member><function>range</function> now produce a list of characters if one of the boundary inputs is a string digit instead of casting the other input to int (e.g. <code>range('5', 'z');</code>).</member>
   </simplelist>
  </para>

  <para>
   The <function>file</function> flags error check now catches all invalid flags. Notably <constant>FILE_APPEND</constant> was previously silently accepted.
  </para>
 </sect2>

 <sect2 xml:id="migration83.incompatible.SNMP">
  <title>SNMP</title>

  <para>
   The type of SNMP class constants are now declared.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
