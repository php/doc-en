<?xml version="1.0" encoding="utf-8"?>

<sect2 xml:id="migration70.incompatible.foreach">
 <title>Changes to &foreach;</title>

 <para>
  Minor changes have been made to the behaviour of the &foreach; control
  structure, primarily around the handling of the internal array pointer and
  modification of the array being iterated over.
 </para>

 <sect3 xml:id="migration70.incompatible.foreach.array-pointer">
  <title>&foreach; no longer changes the internal array pointer</title>

  <para>
   Prior to PHP 7, the internal array pointer was modified while an array was
   being iterated over with &foreach;. This is no longer the case, as shown
   in the following example:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(1)
int(2)
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(0)
int(0)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-value">
  <title>&foreach; by-value operates on a copy of the array</title>

  <para>
   When used in the default by-value mode, &foreach; will now operate on a
   copy of the array being iterated rather than the array itself. This means
   that changes to the array made during iteration will not affect the values
   that are iterated.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-ref">
  <title>&foreach; by-reference has improved iteration behaviour</title>

  <para>
   When iterating by-reference, &foreach; will now do a better job of
   tracking changes to the array made during iteration. For example,
   appending to an array while iterating will now result in the appended
   values being iterated over as well:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(1)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.object">
  <title>Iteration of non-<classname>Traversable</classname> objects</title>

  <para>
   Iterating over a non-<classname>Traversable</classname> object will now
   have the same behaviour as iterating over by-reference arrays. This
   results in the
   <link linkend="migration70.incompatible.foreach.by-ref">improved behaviour when modifying an array during iteration</link>
   also being applied when properties are added to or removed from the
   object.
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
