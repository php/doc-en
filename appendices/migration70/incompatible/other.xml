<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<sect2 xml:id="migration70.incompatible.other">
 <title>Other backward incompatible changes</title>

 <sect3 xml:id="migration70.incompatible.other.new-by-ref">
  <title>New objects cannot be assigned by reference</title>

  <para>
   The result of the &new; statement can no longer be assigned to a variable
   by reference:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {}
$c =& new C;
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Deprecated: Assigning the return value of new by reference is deprecated in /tmp/test.php on line 3
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Parse error: syntax error, unexpected 'new' (T_NEW) in /tmp/test.php on line 3
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.classes">
  <title>Invalid class, interface and trait names</title>

  <para>
   The following names cannot be used to name classes, interfaces or traits:
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>&null;</simpara>
   </listitem>
   <listitem>
    <simpara>&true;</simpara>
   </listitem>
   <listitem>
    <simpara>&false;</simpara>
   </listitem>
  </itemizedlist>

  <para>
   Furthermore, the following names should not be used. Although they will not
   generate an error in PHP 7.0, they are reserved for future use and should
   be considered deprecated.
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>resource</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>mixed</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>numeric</type></simpara>
   </listitem>
  </itemizedlist>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.php-tags">
  <title>ASP and script PHP tags removed</title>

  <para>
   Support for using ASP and script tags to delimit PHP code has been removed.
   The affected tags are:
  </para>

  <table>
   <title>Removed ASP and script tags</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Opening tag</entry>
      <entry>Closing tag</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>&lt;%</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;%=</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;script language="php"&gt;</code></entry>
      <entry><code>&lt;/script&gt;</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.incompatible-this">
  <title>Calls from incompatible context removed</title>

  <para>
   <link linkend="migration56.deprecated.incompatible-context">Previously deprecated in PHP 5.6</link>,
   static calls made to a non-static method with an incompatible context will
   now result in the called method having an undefined
   <literal>$this</literal> variable and a deprecation warning being issued.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public function test() { var_dump($this); }
}

// Note: Does NOT extend A
class B {
    public function callNonStaticMethodOfA() { A::test(); }
}

(new B)->callNonStaticMethodOfA();
?>
]]>
   </programlisting>
   &example.outputs.56;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically, assuming $this from incompatible context in /tmp/test.php on line 8
object(B)#1 (0) {
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically in /tmp/test.php on line 8

Notice: Undefined variable: this in /tmp/test.php on line 3
NULL
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.yield">
  <title>&yield; is now a right associative operator</title>

  <para>
   The &yield; construct no longer requires parentheses, and has been changed
   to a right associative operator with precedence between
   <literal>print</literal> and <literal>=&gt;</literal>. This can result in
   changed behaviour:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo yield -1;
// Was previously interpreted as
echo (yield) - 1;
// And is now interpreted as
echo yield (-1);

yield $foo or die;
// Was previously interpreted as
yield ($foo or die);
// And is now interpreted as
(yield $foo) or die;
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Parentheses can be used to disambiguate those cases.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameters">
  <title>Functions cannot have multiple parameters with the same name</title>

  <para>
   It is no longer possible to define two or more function parameters with the
   same name. For example, the following function will trigger an
   <constant>E_COMPILE_ERROR</constant>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($a, $b, $unused, $unused) {
    //
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameter-modified">
  <title>Functions inspecting arguments report the <emphasis>current</emphasis> parameter value</title>

  <para>
   <function>func_get_arg</function>, <function>func_get_args</function>,
   <function>debug_backtrace</function> and exception backtraces will no longer
   report the original value that was passed to a parameter, but will instead
   provide the current value (which might have been modified).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($x) {
    $x++;
    var_dump(func_get_arg(0));
}
foo(1);?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
1
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
2
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.multiple-default">
  <title>Switch statements cannot have multiple default blocks</title>

  <para>
   It is no longer possible to define two or more default blocks in a switch
   statement. For example, the following switch statement will trigger an
   <constant>E_COMPILE_ERROR</constant>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch (1) {
    default:
    break;
    default:
    break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.http-raw-post-data">
  <title><varname>$HTTP_RAW_POST_DATA</varname> removed</title>

  <para>
   <varname>$HTTP_RAW_POST_DATA</varname> is no longer available. The
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   stream should be used instead.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.ini-comments">
  <title><literal>#</literal> comments in INI files removed</title>

  <para>
   Support for prefixing comments with <literal>#</literal> in INI files has been
   removed. <literal>;</literal> (semi-colon) should be used instead. This change
   applies to &php.ini;, as well as files handled by
   <function>parse_ini_file</function> and <function>parse_ini_string</function>.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.json-to-jsond">
  <title>JSON extension replaced with JSOND</title>

  <para>
   The JSON extension has been replaced with JSOND, causing three minor BC
   breaks. Firstly, a number must not end in a decimal point (i.e.
   <literal>34.</literal> must be changed to either <literal>34.0</literal> or
   <literal>34</literal>). Secondly, when using scientific notation, the
   <literal>e</literal> exponent must not immediately follow a decimal point
   (i.e. <literal>3.e3</literal> must be changed to either
   <literal>3.0e3</literal> or <literal>3e3</literal>).
   Finally, an empty string is no longer considered valid JSON.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.internal-function-failure-overflow">
  <title>Internal function failure on overflow</title>

  <para>
   Previously, internal functions would silently truncate numbers produced from
   float-to-integer coercions when the float was too large to represent as an
   integer. Now, an E_WARNING will be emitted and &null; will be returned.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.fixes-custom-session-handler">
  <title>Fixes to custom session handler return values</title>

  <para>
   Any predicate functions implemented by custom session handlers that return
   either &false; or <literal>-1</literal> will be fatal errors. If any value
   from these functions other than a boolean, <literal>-1</literal>, or
   <literal>0</literal> is returned, then it will fail and an E_WARNING will be
   emitted.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.sort-order">
  <title>Sort order of equal elements</title>
  <para>
   The internal sorting algorithm has been improved, what may result in
   different sort order of elements, which compare as equal, than before.
  </para>
  <note>
   <para>
    Don't rely on the order of elements which compare as equal; it might change
    anytime.
   </para>
  </note>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.break-continue">
  <title>Misplaced break and continue statements</title>
  <para>
   <literal>break</literal> and <literal>continue</literal> statements outside of
   a loop or <literal>switch</literal> control structure are now detected at
   compile-time instead of run-time as before, and trigger an
   <constant>E_COMPILE_ERROR</constant>.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.mhash">
  <title>Mhash is not an extension anymore</title>
  <para>
   The Mhash extension has been fully integrated into the <link
   linkend="book.hash">Hash</link> extension. Therefore, it is no longer
   possible to detect Mhash support with <function>extension_loaded</function>;
   use <function>function_exists</function> instead. Furthermore, Mhash is no
   longer reported by <function>get_loaded_extensions</function> and related
   features.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.declare-ticks">
  <title>declare(ticks)</title>
  <para>
   The <link linkend="control-structures.declare.ticks">declare(ticks)</link>
   directive does no longer leak into different compilation units.
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
