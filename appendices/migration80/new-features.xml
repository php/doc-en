<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 350263 $ -->

<sect1 xml:id="migration80.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>New Features</title>

 <sect2 xml:id="migration80.new-features.core">
  <title>PHP Core</title>

  <itemizedlist>
   <listitem>
    <para>
     Support for union types has been added.
     <!-- RFC: https://wiki.php.net/rfc/union_types_v2 -->
    </para> 
   </listitem>
   <listitem>
    <para>
     <!-- we cannot use <classname>WeakMap</classname> because that would link to the wrong class -->
     The <literal>WeakMap</literal> class has been added.
     <!-- RFC: https://wiki.php.net/rfc/weak_maps -->
    </para>
   </listitem>
   <listitem>
    <para>
     The <classname>ValueError</classname> class has been added.
    </para>
   </listitem>
   <listitem>
    <para>
     Any number of function parameters may now be replaced by a variadic argument, as long as the
     types are compatible. For example, the following code is now allowed:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
class A {
     public function method(int $many, string $parameters, $here) {}
}
class B extends A {
     public function method(...$everything) {}
}
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <type>static</type> (as in "late static binding") can now be used as a return type:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
     public function create(): static {
          return new static();
     }
}
?>
]]>
     </programlisting>
     <!-- RFC: https://wiki.php.net/rfc/static_return_type -->
    </para>
   </listitem>
   <listitem>
    <para>
     It is now possible to fetch the class name of an object using
     <code>$object::class</code>. The result is the same as <code>get_class($object)</code>.
     <!-- RFC: https://wiki.php.net/rfc/class_name_literal_on_object -->
    </para>
   </listitem>
   <listitem>
    <para>
     &new; and &instanceof; can now be used with arbitrary expressions,
     using <code>new (expression)(...$args)</code> and <code>$obj instanceof (expression)</code>.
     <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
    </para>
   </listitem>
   <listitem>
    <para>
     Some consistency fixes to variable syntax have been applied, for example writing
     <code>Foo::BAR::$baz</code> is now allowed.
     <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
    </para>
   </listitem>
   <listitem>
    <para>
     Added <interfacename>Stringable</interfacename> interface, which is automatically implemented if
     a class defines a <link linkend="object.tostring">__toString()</link> method.
     <!-- RFC: https://wiki.php.net/rfc/stringable -->
    </para>
   </listitem>
   <listitem>
    <para>
     Traits can now define abstract private methods.
     Such methods must be implemented by the class using the trait.
     <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>throw</literal> can now be used as an expression.
     That allows usages like:
     <programlisting role="php">
<![CDATA[
<?php
$fn = fn() => throw new Exception('Exception in arrow function');
$user = $session->user ?? throw new Exception('Must have user');
]]>
     </programlisting>
     <!-- RFC: https://wiki.php.net/rfc/throw_expression -->
    </para>
   </listitem>
   <listitem>
    <para>
     An optional trailing comma is now allowed in parameter lists.
     <programlisting role="php">
<![CDATA[
<?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // <-- This comma is now allowed.
) {
}
]]>
     </programlisting>
     <!-- RFC: https://wiki.php.net/rfc/trailing_comma_in_parameter_list -->
    </para>
   </listitem>
   <listitem>
    <para>
     It is now possible to write <code>catch (Exception)</code> to catch an exception without storing
     it in a variable.
     <!-- RFC: https://wiki.php.net/rfc/non-capturing_catches -->
    </para>
   </listitem>
   <listitem>
    <para>
     Support for <type>mixed</type> type has been added.
     <!-- RFC: https://wiki.php.net/rfc/mixed_type_v2 -->
    </para>
   </listitem>
   <listitem>
    <para>
     Support for Attributes has been added.
     <!-- RFC: https://wiki.php.net/rfc/attributes_v2 -->
     <!-- RFC: https://wiki.php.net/rfc/attribute_amendments -->
     <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax -->
     <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
    </para>
   </listitem>
   <listitem>
    <para>
     Support for constructor property promotion (declaring properties in the constructor signature)
     has been added.
     <!-- RFC: https://wiki.php.net/rfc/constructor_promotion -->
    </para>
   </listitem>
   <listitem>
    <para>
     Support for <literal>match</literal> expression has been added.
     <!-- RFC: https://wiki.php.net/rfc/match_expression_v2 -->
    </para>
   </listitem>
   <listitem>
    <para>
     Private methods declared on a parent class no longer enforce any inheritance rules on the methods
     of a child class (with the exception of final private constructors).
     The following example illustrates which restrictions have been removed:
     <programlisting role="php">
<![CDATA[
<?php
class ParentClass {
    private function method1() {}
    private function method2() {}
    private static function method3() {}
    // Throws a warning, as "final" no longer has an effect:
    private final function method4() {}
}
class ChildClass extends ParentClass {
    // All of the following are now allowed, even though the modifiers aren't
    // the same as for the private methods in the parent class.
    public abstract function method1() {}
    public static function method2() {}
    public function method3() {}
    public function method4() {}
}
?>
]]>
     </programlisting>
     <!-- RFC: https://wiki.php.net/rfc/inheritance_private_methods -->
    </para>
   </listitem>
   <listitem>
    <para>
     Support for the nullsafe operator (<literal>?-></literal>) has been added.
     <!-- RFC: https://wiki.php.net/rfc/nullsafe_operator -->
    </para>
   </listitem>
   <listitem>
    <para>
     Support for named arguments has been added.
     <!-- RFC: https://wiki.php.net/rfc/named_params -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.date">
  <title>Date and Time</title>
  
  <itemizedlist>
   <listitem>
    <para>
     <methodname>DateTime::createFromInterface</methodname> and
     <methodname>DateTimeImmutable::createFromInterface</methodname> have been added.
    </para>
   </listitem>
   <listitem>
    <para>
     The DateTime format specifier <literal>p</literal> has been added, which is the same as
     <literal>P</literal> but returns <literal>Z</literal> rather than <literal>+00:00</literal>
     for UTC.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.dom">
  <title>DOM</title>

  <para>
   <interfacename>DOMParentNode</interfacename> and <interfacename>DOMChildNode</interfacename> with
   new traversal and manipulation APIs have been added.
   <!-- RFC: https://wiki.php.net/rfc/dom_living_standard_api-->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.enchant">
  <title>Enchant</title>

  <para>
   <function>enchant_dict_add</function>, <function>enchant_dict_is_added</function>, and
   <constant>LIBENCHANT_VERSION</constant> have been added.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.fpm">
  <title>FPM</title>

  <para>
   Added a new option <literal>pm.status_listen</literal> that allows getting the status from
   different endpoint (e.g. port or UDS file) which is useful for getting the status when all
   children are busy with serving long running requests.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.hash">
  <title>Hash</title>

  <para>
   <classname>HashContext</classname> objects can now be serialized.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.opcache">
  <title>OPcache</title>

  <para>
   If the <!--<link linkend="ini.opcache.record-warnings">-->opcache.record_warnings<!--</link>--> ini setting is
   enabled, OPcache will record compile-time warnings and replay them on the next include, even if
   it is served from cache.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.openssl">
  <title>OpenSSL</title>

  <para>
   Added Cryptographic Message Syntax (CMS) (<link xlink:href="&url.rfc;5652">RFC 5652</link>)
   support composed of functions for encryption, decryption, signing, verifying and reading. The API
   is similar to the API for PKCS #7 functions with an addition of new encoding constants:
   <constant>OPENSSL_ENCODING_DER</constant>, <constant>OPENSSL_ENCODING_SMIME</constant>
   and <constant>OPENSSL_ENCODING_PEM</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.standard">
  <title>Standard Library</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>printf</function> and friends now support the <literal>%h</literal> and
     <literal>%H</literal> format specifiers. These are the same as <literal>%g</literal> and
     <literal>%G</literal>, but always use <literal>"."</literal> as the decimal separator, rather
     than determining it through the <constant>LC_NUMERIC</constant> locale.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> and friends now support using <literal>"*"</literal> as width or
     precision, in which case the width/precision is passed as an argument to printf. This also allows
     using precision <literal>-1</literal> with <literal>%g</literal>, <literal>%G</literal>,
     <literal>%h</literal> and <literal>%H</literal>. For example, the following code can be used to
     reproduce PHP's default floating point formatting:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
printf("%.*H", (int) ini_get("precision"), $float);
printf("%.*H", (int) ini_get("serialize_precision"), $float);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> now supports pseudo-terminal (PTY) descriptors. The following
     attaches <literal>stdin</literal>, <literal>stdout</literal> and <literal>stderr</literal> to the
     same PTY:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> now supports socket pair descriptors. The following attaches a
     distinct socket pair to <literal>stdin</literal>, <literal>stdout</literal> and
     <literal>stderr</literal>:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?>
]]>
     </programlisting>
    </para>
    <para>
     Unlike pipes, sockets do not suffer from blocking I/O issues on Windows. However, not all
     programs may work correctly with stdio sockets.
    </para>
   </listitem>
   <listitem>
    <para>
     Sorting functions are now stable, which means that equal-comparing elements will retain their
     original order.
     <!-- RFC: https://wiki.php.net/rfc/stable_sorting -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_diff</function>, <function>array_intersect</function> and their variations can
     now be used with a single array as argument. This means that usages like the following are now
     possible:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// OK even if $excludes is empty:
array_diff($array, ...$excludes);
// OK even if $arrays only contains a single array:
array_intersect(...$arrays);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>flag</parameter> parameter of <function>ob_implicit_flush</function> was changed
     to accept a <type>bool</type> rather than an <type>int</type>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     The Zip extension has been updated to version 1.19.1.
    </para>
   </listitem>
   <listitem>
    <para>
     The <varname>ZipArchive::lastId</varname> property to get the index value of
     the last added entry has been added.
    </para>
   </listitem>
   <listitem>
    <para>
     Errors can now be checked after an archive has been closed using the
     <varname>ZipArchive::status</varname> and
     <varname>ZipArchive::statusSys</varname> properties, or the
     <methodname>ZipArchive::getStatusString</methodname> method.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>'remove_path'</literal> option of <methodname>ZipArchive::addGlob</methodname> and
     <methodname>ZipArchive::addPattern</methodname> is now treated as an arbitrary string prefix (for
     consistency with the <literal>'add_path'</literal> option), whereas formerly it was treated as a
     directory name.
    </para>
   </listitem>
   <listitem>
    <para>
     Optional compression / encryption features are now listed in phpinfo.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
