<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="migration85.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Backward Incompatible Changes</title>

 <sect2 xml:id="migration85.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration85.incompatible.core.array-callable-alias">
   <title><literal>"array"</literal> and <literal>"callable"</literal> alias name</title>

   <simpara>
    It is no longer possible to use <literal>"array"</literal>
    and <literal>"callable"</literal> as class alias names
    in <function>class_alias</function>
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.loosely-comparing-object">
   <title>Loosely comparing uncomparable objects</title>

   <simpara>
    Loosely comparing uncomparable objects (e.g. enums,
    <classname>CurlHandle</classname> and other internal classes) to booleans
    was previously inconsistent. If compared to a boolean literal
    <code>$object == true</code>, it would behave the same way as
    <code>(bool)$object</code>. If compared to a statically unknown value
    <code>$object == $true</code>, it would always return &false;.
    This behavior was consolidated to always follow the behavior of
    <code>(bool)$object</code>.
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.gc-collect-cycles">
   <title>Return value of gc_collect_cycles</title>

   <simpara>
   The return value of <function>gc_collect_cycles</function> no longer includes
   strings and resources that were indirectly collected through cycles.
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.substitute-final-subclasses">
   <title>Substitute static keyword in final subclass</title>

   <simpara>
    It is now allowed to substitute static with self or the concrete class name
    in final subclasses.
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.tick-handlers">
   <title>Tick handlers</title>

   <simpara>
    The tick handlers are now deactivated after all shutdown functions,
    destructors have run and the output handlers have been cleaned up.
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.trait-binding">
   <title>Traits binding</title>

   <simpara>
    Traits are now bound before the parent class. This is a subtle behavioral
    change, but should more closely match user expectations.
    <!-- https://github.com/php/php-src/pull/15878 -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.errors-compilation-and-linking">
   <title>Errors during compilation and class linking</title>

   <simpara>
    Errors emitted during compilation and class linking are now always delayed
    and handled after compilation or class linking. Fatal errors emitted during
    compilation or class linking cause any delayed errors to be handled
    immediately, without calling user-defined error handlers.
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.exception-by-userdefined-handler">
   <title>Exceptions thrown by user-defined error handler</title>

   <simpara>
    Exceptions thrown by user-defined error handlers when handling class linking
    errors are not promoted to fatal errors anymore and do not prevent linking.
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.attribute-during-compilation">
   <title>Attribute apply error during compilation</title>

   <simpara>
    Applying #[\Attribute] to an abstract class, enum, interface, or trait
    triggers an error during compilation. Previously, the attribute could be
    added, but when <methodname>ReflectionAttribute::newInstance</methodname>
    was called an error would be thrown.
    The error can be delayed from compilation to runtime using the new
    #[\DelayedTargetValidation] attribute.
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.disable-ini-setting">
   <title>disable_classes INI setting</title>

   <simpara>
    The disable_classes INI setting has been removed as it causes various
    engine assumptions to be broken.
    <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_5#remove_disable_classes_ini_setting -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.destruct-non-array-values">
   <title>Destructing non-array values</title>

   <simpara>
    Destructing non-array values (other than NULL) using [] or list() now
    emits a warning.
    <!-- RFC: https://wiki.php.net/rfc/warnings-php-8-5#destructuring_non-array_values -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.incompatible.core.warning-related-to-cast">
   <title>Warnings related to cast</title>

   <simpara>
    A warning is now emitted when casting floats (or strings that look like
    floats) to int if they cannot be represented as one. This affects explicit
    int casts and implicit int casts.
    <!-- RFC: https://wiki.php.net/rfc/warnings-php-8-5#casting_out_of_range_floats_to_int -->
   </simpara>

   <simpara>
    A warning is now emitted when casting NAN to other types.
    <!-- RFC: https://wiki.php.net/rfc/warnings-php-8-5#coercing_nan_to_other_types -->
   </simpara>

  </sect3>

 </sect2>

 <sect2 xml:id="migration85.incompatible.bzip2">
  <title>Bzip2</title>

  <para>
   <function>bzcompress</function> now throws a <classname>ValueError</classname>
   when <parameter>$block_size</parameter> is not between 1 and 9.
  </para>

  <para>
   <function>bzcompress</function> now throws a <classname>ValueError</classname>
   when <parameter>$work_factor</parameter> is not between 0 and 250.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.dom">
  <title>DOM</title>

  <para>
   Cloning a <classname>DOMNamedNodeMap</classname>,
   <classname>DOMNodeList</classname>, <classname>Dom\NamedNodeMap</classname>,
   <classname>Dom\NodeList</classname>, <classname>Dom\HTMLCollection</classname>,
   and <classname>Dom\DtdNamedNodeMap</classname> now fails.
   This never actually resulted in a working object, so the impact should
   actually be zero.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.fileinfo">
  <title>FileInfo</title>

  <para>
   <function>finfo_file</function> and <methodname>finfo::file</methodname>
   now throws a <classname>ValueError</classname> instead of a
   <classname>TypeError</classname> when <parameter>$filename</parameter>
   contains nul bytes.
   This aligns the type of Error thrown to be consistent with the rest of
   the language.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.intl">
  <title>Intl</title>

  <para>
   The extension now requires at least ICU 57.1.
  </para>

  <para>
   The behaviour of <constant>Collator::SORT_REGULAR</constant> with respect to
   handling numeric strings is now aligned with the behaviour of
   <constant>SORT_REGULAR</constant> in ext/standard.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.ldap">
  <title>LDAP</title>

  <para>
   <function>ldap_get_option</function> and <function>ldap_set_option</function>
   now throw a <classname>ValueError</classname> when passing an invalid option.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.mbstring">
  <title>MBString</title>

  <para>
   Unicode data tables have been updated to Unicode 17.0
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   Calling the mysqli constructor on an already-constructed object
   is now no longer possible and throws an Error.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.odbc">
  <title>ODBC</title>

  <para>
   ODBC now assumes that at least ODBC 3.5 functionality is available.
   The ODBCVER definition and build system flags to control it have been removed.
  </para>

  <para>
   ODBC no longer has build flags to build against specific drivers (except
   for DB2) and removes special cases for those drivers. It is strongly
   recommended to use a driver manager like iODBC or unixODBC on non-Windows.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.opcache">
  <title>Opcache</title>

  <para>
   The Opcache extension is now always built into the PHP binary and is always
   loaded.
   The INI directives <link linkend="ini.opcache.enable">opcache.enable</link>
   and <link linkend="ini.opcache.enable-cli">opcache.enable_cli</link> are still
   honored.
  </para>

  <para>
   The <option role="configure">--enable-opcache</option>/<option role="configure">--disable-opcache</option>
   configure flags have been removed, and the build does not produce opcache.so
   or php_opcache.dll objects anymore.
  </para>

  <para>
   Using <literal>zend_extension=opcache.so</literal> or
   <literal>zend_extension=php_opcache.dll</literal> INI directives
   will emit a warning.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.pcntl">
  <title>PCNTL</title>

  <para>
   <function>pcntl_exec</function> now throws <classname>ValueError</classname>
   when entries of the <parameter>$args</parameter> parameter contain null bytes.
  </para>

  <para>
   <function>pcntl_exec</function> now throws <classname>ValueError</classname>
   when entries or keys of the <parameter>$env_vars</parameter> parameter
   contain null bytes.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.pcre">
  <title>PCRE</title>

  <para>
   The extension is compiled without semi-deprecated
   PCRE2_EXTRA_ALLOW_LOOKAROUND_BSK compile option.
   <!-- https://github.com/PCRE2Project/pcre2/issues/736#issuecomment-2754024651 -->
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.pdo">
  <title>PDO</title>

  <para>
   The constructor arguments set in conjunction with
   <constant>PDO::FETCH_CLASS</constant> now follow the usual CUFA
   (call_user_func_array) semantics.
   This means string keys will act like a named argument.
   Moreover, automatic wrapping for by-value arguments passed to a by-ref
   parameter has been removed, and the usual E_WARNING about this is now emitted.
   To pass a variable by-ref to a constructor argument use the general
   array value reference assignment: <code>$ctor_args = [&amp;$valByRef]</code>
  </para>

  <para>
   Attempting to call <methodname>PDOStatement::setFetchMode</methodname> during
   a call to <methodname>PDO::fetch</methodname>,
   <methodname>PDO::fetchObject</methodname>,
   <methodname>PDO::fetchAll</methodname>, for example using tricks such as
   passing the statement object as a constructor argument when fetching into an
   object, will now throw an Error.
  </para>

  <para>
   The value of the constants <constant>PDO::FETCH_GROUP</constant>,
   <constant>PDO::FETCH_UNIQUE</constant>,
   <constant>PDO::FETCH_CLASSTYPE</constant>,
   <constant>PDO::FETCH_PROPS_LATE</constant>, and
   <constant>PDO::FETCH_SERIALIZE</constant> have changed.
  </para>

  <para>
   A <classname>ValueError</classname> is now thrown if
   <constant>PDO::FETCH_PROPS_LATE</constant> is used with a fetch mode
   different than <constant>PDO::FETCH_CLASS</constant>, consistent with
   other fetch flags.
  </para>

  <para>
   A <classname>ValueError</classname> is now thrown if
   <constant>PDO::FETCH_INTO</constant> is used as a fetch mode in
   <methodname>PDO::fetchAll</methodname>,
   similar to <constant>PDO::FETCH_LAZY</constant>.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.pdo-firebird">
  <title>PDO_FIREBIRD</title>

  <para>
   A <classname>ValueError</classname> is now thrown when trying to set a cursor
   name that is too long on a <classname>PDOStatement</classname> resulting from
   the Firebird driver.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.session">
  <title>Session</title>

  <para>
   Attempting to write session data where <varname>$_SESSION</varname> has a key
   containing the pipe character will now emit a warning instead of silently
   failing.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.simplexml">
  <title>SimpleXML</title>

  <para>
   Passing an XPath expression that returns something other than a node set
   to <methodname>SimpleXMLElement::xpath</methodname> will now emit a warning
   and return &false;, instead of silently failing and returning an empty array.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.spl">
  <title>SPL</title>

  <para>
   <classname>ArrayObject</classname> no longer accepts enums, as modifying the
   <property>$name</property> or <property>$value</property> properties can break
   engine assumptions.
  </para>

  <para>
   <methodname>SplFileObject::fwrite</methodname>'s parameter
   <parameter>$length</parameter> is now nullable.
   The default value changed from <literal>0</literal> to &null;.
  </para>

 </sect2>

 <sect2 xml:id="migration85.incompatible.standard">
  <title>Standard</title>

  <para>
   Using a printf-family function with a formatter that did not specify the
   precision previously incorrectly reset the precision instead of treating
   it as a precision of 0.
  </para>

 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
