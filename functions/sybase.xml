<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.19.2.2 $ -->
<reference id="ref.sybase">
  <title>Sybase functions</title>
  <titleabbrev>Sybase</titleabbrev>

  <refentry id="function.sybase-affected-rows">
   <refnamediv>
    <refname>sybase_affected_rows</refname>
    <refpurpose>get number of affected rows in last query</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_affected_rows</methodname>
      <methodparam choice="opt"><type>int</type><parameter>link_identifier
                    </parameter></methodparam>
     </methodsynopsis>
    
    <para>
     Returns: The number of affected rows by the last query.
    </para>
    <para>
     <function>sybase_affected_rows</function> returns the number of
     rows affected by the last INSERT, UPDATE or DELETE query on the
     server associated with the specified link identifier.  If the
     link identifier isn't specified, the last opened link is assumed.
    </para>
    <para>
     This command is not effective for SELECT statements, only on
     statements which modify records. To retrieve the number of rows
     returned from a SELECT, use <function>sybase_num_rows</function>.
     <note>
      <para>
       This function is only available using the CT library interface
       to Sybase, and not the DB library.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-close">
   <refnamediv>
    <refname>sybase_close</refname>
    <refpurpose>close Sybase connection</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>bool</type><methodname>sybase_close</methodname>
      <methodparam><type>int</type><parameter>link_identifier</parameter></methodparam>
     </methodsynopsis>
    
    <para>
     Returns: &true; on success, &false; on error
    </para>
    <para> sybase_close() closes the link to a Sybase database that's
    associated with the specified link identifier.  If the link
    identifier isn't specified, the last opened link is assumed.
    </para>
    <para> Note that this isn't usually necessary, as non-persistent
    open links are automatically closed at the end of the script's
    execution.
    </para>
    <para> sybase_close() will not close persistent links generated by
    sybase_pconnect().
    </para>
    <para> See also: <function>sybase_connect</function>,
                     <function>sybase_pconnect</function>.
    </para> 
   </refsect1>
  </refentry>

  <refentry id="function.sybase-connect">
   <refnamediv>
    <refname>sybase_connect</refname>
    <refpurpose>open Sybase server connection</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_connect</methodname>
      <methodparam><type>string</type><parameter>servername</parameter></methodparam>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>charset</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: A positive Sybase link identifier on success, or
    &false; on error.
    </para>
    <para> sybase_connect() establishes a connection to a Sybase server.
    The servername argument has to be a valid servername that is defined
    in the 'interfaces' file.
    </para>
    <para> In case a second call is made to sybase_connect() with the
    same arguments, no new link will be established, but instead, the
    link identifier of the already opened link will be returned.
    </para>
    <para> The link to the server will be closed as soon as the
    execution of the script ends, unless it's closed earlier by
    explicitly calling <function>sybase_close</function>.
    </para>
    <para>See also <function>sybase_pconnect</function>, 
                   <function>sybase_close</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-data-seek">
   <refnamediv>
    <refname>sybase_data_seek</refname>
    <refpurpose>move internal row pointer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>bool</type><methodname>sybase_data_seek</methodname>
      <methodparam><type>int</type><parameter>result_identifier</parameter></methodparam>
      <methodparam><type>int</type><parameter>row_number</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: &true; on success, &false; on failure
    </para>
    <para> sybase_data_seek() moves the internal row pointer of the
    Sybase result associated with the specified result identifier to
    pointer to the specifyed row number.  The next call to
    <function>sybase_fetch_row</function> would return that row.
    </para>
    <para> See also: <function>sybase_data_seek</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-fetch-array">
   <refnamediv>
    <refname>sybase_fetch_array</refname>
    <refpurpose>fetch row as array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>array</type><methodname>sybase_fetch_array</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: An array that corresponds to the fetched row, or
    &false; if there are no more rows.
    </para>
    <para>
     sybase_fetch_array() is an extended version of
     <function>sybase_fetch_row</function>.  In addition to storing the
     data in the numeric indices of the result array, it also stores
     the data in associative indices, using the field names as keys.
    </para>
    <para>
     An important thing to note is that using sybase_fetch_array() is
     NOT significantly slower than using sybase_fetch_row(), while it
     provides a significant added value.</para>
    <para>
     For further details, also see
     <function>sybase_fetch_row</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-fetch-field">
   <refnamediv>
    <refname>sybase_fetch_field</refname>
    <refpurpose>get field information</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>object</type><methodname>sybase_fetch_field</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>field_offset</parameter></methodparam>
     </methodsynopsis>
    
    <para>
     Returns an object containing field information.  
    </para>
    <para>
     sybase_fetch_field() can be used in order to obtain information about
     fields in a certain query result.  If the field offset isn't
     specified, the next field that wasn't yet retreived by
     sybase_fetch_field() is retreived.
    </para>
    <para>
     The properties of the object are:
    </para>

     <itemizedlist>
      <listitem><simpara>
	name - column name.  if the column is a result of a function, this property is set to computed#N,
	where #N is a serial number.
       </simpara></listitem>
      <listitem><simpara>
	column_source - the table from which the column was taken
       </simpara></listitem>
      <listitem><simpara>
	max_length - maximum length of the column
       </simpara></listitem>
      <listitem><simpara>
	numeric - 1 if the column is numeric
       </simpara></listitem> 
     <listitem><simpara>
       type - datatype of the column
      </simpara></listitem>
     </itemizedlist>

    <para>
     See also <function>sybase_field_seek</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-fetch-object">
   <refnamediv>
    <refname>sybase_fetch_object</refname>
    <refpurpose>fetch row as object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_fetch_object</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: An object with properties that correspond to the
    fetched row, or &false; if there are no more rows.
    </para>
    <para> sybase_fetch_object() is similar to
    <function>sybase_fetch_array</function>, with one difference - an
    object is returned, instead of an array.  Indirectly, that means
    that you can only access the data by the field names, and not by
    their offsets (numbers are illegal property names).</para>  
    <para>
    Speed-wise, the function is identical to
    <function>sybase_fetch_array</function>, and almost as quick as
    <function>sybase_fetch_row</function> (the difference is
    insignificant).
    </para>
    <para> See also: <function>sybase_fetch-array</function> and
                     <function>sybase_fetch-row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-fetch-row">
   <refnamediv>
    <refname>sybase_fetch_row</refname>
    <refpurpose>get row as enumerated array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>array</type><methodname>sybase_fetch_row</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: An array that corresponds to the fetched row, or
    &false; if there are no more rows.
    </para>
    <para>
     sybase_fetch_row() fetches one row of data from the result
     associated with the specified result identifier.  The row is
     returned as an array.  Each result column is stored in an array
     offset, starting at offset 0.
    </para>
    <para>
     Subsequent call to sybase_fetch_rows() would return the next row
     in the result set, or &false; if there are no more rows.
    </para>
    <para>
     See also: <function>sybase_fetch_array</function>,
               <function>sybase_fetch_object</function>,
               <function>sybase_data_seek</function>,
               <function>sybase_fetch_lengths</function>, and
               <function>sybase_result</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-field-seek">
   <refnamediv>
    <refname>sybase_field_seek</refname>
    <refpurpose>set field offset</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_field_seek</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>field_offset</parameter></methodparam>
     </methodsynopsis>
    
    <para>
     Seeks to the specified field offset.  If the next call to
     <function>sybase_fetch_field</function> won't include a field
     offset, this field would be returned.</para>
    <para/>
    <para>
     See also: <function>sybase_fetch_field</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-free-result">
   <refnamediv>
    <refname>sybase_free_result</refname>
    <refpurpose>free result memory</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>bool</type><methodname>sybase_free_result</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    
    <para>
     <function>sybase_free_result</function> only needs to be called
     if you are worried about using too much memory while your script
     is running. All result memory will automatically be freed when
     the script ends. You may call <function>sybase_free_result</function>
     with the result identifier as an argument and the associated
     result memory will be freed.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-get-last-message">
   <refnamediv>
    <refname>sybase_get_last_message</refname>
    <refpurpose>Returns the last message from the server</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>string</type><methodname>sybase_get_last_message</methodname>
      <void/>
     </methodsynopsis>
    
    <para> 
     <function>sybase_get_last_message</function> returns the last
     message reported by the server.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-min-client-severity">
   <refnamediv>
    <refname>sybase_min_client_severity</refname>
    <refpurpose>Sets minimum client severity</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>void</type><methodname>sybase_min_client_severity</methodname>
      <methodparam><type>int</type><parameter>severity</parameter></methodparam>
     </methodsynopsis>
    
    <para> 
     <function>sybase_min_client_severity</function> sets the minimum
     client severity level.
     <note>
      <para>
       This function is only available using the CT library interface
       to Sybase, and not the DB library.
      </para>
     </note>
    </para>
    <para> 
      See also: <function>sybase_min_server_severity</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-min-error-severity">
   <refnamediv>
    <refname>sybase_min_error_severity</refname>
    <refpurpose>Sets minimum error severity</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>void</type><methodname>sybase_min_error_severity</methodname>
      <methodparam><type>int</type><parameter>severity</parameter></methodparam>
     </methodsynopsis>
    
    <para> 
     <function>sybase_min_error_severity</function> sets the minimum
     error severity level.
    </para>
    <para> 
      See also: <function>sybase_min_message_severity</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-min-message-severity">
   <refnamediv>
    <refname>sybase_min_message_severity</refname>
    <refpurpose>Sets minimum message severity</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>void</type><methodname>sybase_min_message_severity</methodname>
      <methodparam><type>int</type><parameter>severity</parameter></methodparam>
     </methodsynopsis>
    
    <para> 
     <function>sybase_min_message_severity</function> sets the minimum
     message severity level.
    </para>
    <para> 
      See also: <function>sybase_min_error_severity</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-min-server-severity">
   <refnamediv>
    <refname>sybase_min_server_severity</refname>
    <refpurpose>Sets minimum server severity</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>void</type><methodname>sybase_min_server_severity</methodname>
      <methodparam><type>int</type><parameter>severity</parameter></methodparam>
     </methodsynopsis>
    
    <para> 
     <function>sybase_min_server_severity</function> sets the minimum
     server severity level.
     <note>
      <para>
       This function is only available using the CT library interface
       to Sybase, and not the DB library.
      </para>
     </note>
    </para>
    <para> 
      See also: <function>sybase_min_client_severity</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-num-fields">
   <refnamediv>
    <refname>sybase_num_fields</refname>
    <refpurpose>get number of fields in result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_num_fields</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    
    <para> sybase_num_fields() returns the number of fields in a result
    set.
    </para>
    <para> 
     See also:  
     <function>sybase_db_query</function>, 
     <function>sybase_query</function>, 
     <function>sybase_fetch_field</function>, 
     <function>sybase_num_rows</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-num-rows">
   <refnamediv>
    <refname>sybase_num_rows</refname>
    <refpurpose>get number of rows in result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_num_rows</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    
    <para>
     sybase_num_rows() returns the number of rows in a result set.
    </para>
    <para>
     See also:  
     <function>sybase_db_query</function>, 
     <function>sybase_query</function> and, 
     <function>sybase_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-pconnect">
   <refnamediv>
    <refname>sybase_pconnect</refname>
    <refpurpose>open persistent Sybase connection</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_pconnect</methodname>
      <methodparam><type>string</type><parameter>servername</parameter></methodparam>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>charset</parameter></methodparam>
     </methodsynopsis>
    
    <para> 
     Returns: A positive Sybase persistent link identifier on success,
     or &false; on error</para>
    <para>
     sybase_pconnect() acts very much like
     <function>sybase_connect</function> with two major differences.</para>
    <para> 
     First, when connecting, the function would first try to find a
     (persistent) link that's already open with the same host,
     username and password.  If one is found, an identifier for it
     will be returned instead of opening a new connection.</para>
    <para> 
     Second, the connection to the SQL server will not be closed when
     the execution of the script ends.  Instead, the link will remain
     open for future use (<function>sybase_close</function> will not
     close links established by <function>sybase_pconnect()</function>).
    </para>
    <para> 
     This type of links is therefore called 'persistent'.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-query">
   <refnamediv>
    <refname>sybase_query</refname>
    <refpurpose>send Sybase query</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>int</type><methodname>sybase_query</methodname>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
      <methodparam><type>int</type><parameter>link_identifier</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: A positive Sybase result identifier on success, or
    &false; on error.
    </para>
    <para> sybase_query() sends a query to the currently active
    database on the server that's associated with the specified link
    identifier.  If the link identifier isn't specified, the last
    opened link is assumed.  If no link is open, the function tries to
    establish a link as if <function>sybase_connect</function> was
    called, and use it.
    </para>
    <para>
     See also:  
     <function>sybase_db_query</function>, 
     <function>sybase_select_db</function>, and 
     <function>sybase_connect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-result">
   <refnamediv>
    <refname>sybase_result</refname>
    <refpurpose>get result data</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>string</type><methodname>sybase_result</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam><type>int</type><parameter>row</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>field</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: The contents of the cell at the row and offset in
    the specified Sybase result set.
    </para>
    <para>
     sybase_result() returns the contents of one cell from a Sybase
     result set.  The field argument can be the field's offset, or the
     field's name, or the field's table dot field's name
     (tablename.fieldname).  If the column name has been aliased
     ('select foo as bar from...'), use the alias instead of the
     column name.
    </para>
    <para>
     When working on large result sets, you should consider using one
     of the functions that fetch an entire row (specified below).  As
     these functions return the contents of multiple cells in one
     function call, they're MUCH quicker than sybase_result().  Also,
     note that specifying a numeric offset for the field argument is
     much quicker than specifying a fieldname or tablename.fieldname
     argument.
    </para>
    <para>
     Recommended high-performance alternatives:
     <function>sybase_fetch_row</function>, 
     <function>sybase_fetch_array</function>, and
     <function>sybase_fetch_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sybase-select-db">
   <refnamediv>
    <refname>sybase_select_db</refname>
    <refpurpose>select Sybase database</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>bool</type><methodname>sybase_select_db</methodname>
      <methodparam><type>string</type><parameter>database_name</parameter></methodparam>
      <methodparam><type>int</type><parameter>link_identifier</parameter></methodparam>
     </methodsynopsis>
    
    <para> Returns: &true; on success, &false; on error
    </para>
    <para> sybase_select_db() sets the current active database on the
    server that's associated with the specified link identifier.  If
    no link identifier is specified, the last opened link is assumed.
    If no link is open, the function will try to establish a link as
    if <function>sybase_connect</function> was called, and use it.
    </para>
    <para>
     Every subsequent call to <function>sybase_query</function> will be
     made on the active database.
    </para>
    <para> See also:
     <function>sybase_connect</function>, 
     <function>sybase_pconnect</function>, and
     <function>sybase_query</function>
    </para>
   </refsect1>
  </refentry>

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
