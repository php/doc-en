<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.17.2.2 $ -->

<!-- Author: David Eriksson <david@2good.com> -->
<reference id="ref.satellite">
  <title>Satellite CORBA client extension</title>
  <titleabbrev>Satellite</titleabbrev>

  <partintro>
	   &warn.experimental;
   <para>
    The Satellite extension is used for accessing CORBA objects.  You
    will need to set the idl_directory= entry in php.ini to a path
    where you store all IDL files you use.
   </para>
  </partintro>

  <refentry id="class.orbitobject">
   <refnamediv>
    <refname>OrbitObject</refname>
    <refpurpose>Access CORBA objects</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>new</type><methodname>OrbitObject</methodname>
      <methodparam><type>string</type><parameter>ior</parameter></methodparam>
     </methodsynopsis>
    
	&warn.experimental.func;
    <para>
     This class provides access to a CORBA object. The
     <parameter>ior</parameter> parameter should be a string
     containing the IOR (Interoperable Object Reference) that
     identifies the remote object.
    </para>
    <para>
     <example>
      <title>Sample IDL file</title>
      <programlisting>
interface MyInterface {
    void SetInfo (string info);
    string GetInfo();

    attribute int value;
}
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP code for accessing MyInterface</title>
      <programlisting role="php">
&lt;?php
$obj = new OrbitObject ($ior);

$obj->SetInfo ("A 2GooD object");

echo $obj->GetInfo();

$obj->value = 42;

echo $obj->value;
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="class.orbitenum">
   <refnamediv>
    <refname>OrbitEnum</refname>
    <refpurpose>Use CORBA enums</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>new</type><methodname>OrbitEnum</methodname>
      <methodparam><type>string</type><parameter>id</parameter></methodparam>
     </methodsynopsis>
    
	&warn.experimental.func;
    <para>
     This class represents the enumeration identified with the
     <parameter>id</parameter> parameter.  The
     <parameter>id</parameter> can be either the name of the
     enumeration (e.g "MyEnum"), or the full repository id
     (e.g. "IDL:MyEnum:1.0").
    </para>
    <para>
     <example>
      <title>Sample IDL file</title>
      <programlisting>
enum MyEnum {
    a,b,c,d,e
};
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP code for accessing MyEnum</title>
      <programlisting role="php">
&lt;?php
$enum = new OrbitEnum ("MyEnum");

echo $enum->a;	/* write 0 */
echo $enum->c;	/* write 2 */
echo $enum->e;	/* write 4 */
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="class.orbitstruct">
   <refnamediv>
    <refname>OrbitStruct</refname>
    <refpurpose>Use CORBA structs</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>new</type><methodname>OrbitStruct</methodname>
      <methodparam><type>string</type><parameter>id</parameter></methodparam>
     </methodsynopsis>
    
	&warn.experimental.func;
    <para>
     This class represents the structure identified with the
     <parameter>id</parameter> parameter.  The
     <parameter>id</parameter> can be either the name of the struct
     (e.g "MyStruct"), or the full repository id
     (e.g. "IDL:MyStruct:1.0").
    </para>
    <para>
     <example>
      <title>Sample IDL file</title>
      <programlisting>
struct MyStruct {
    short shortvalue;
    string stringvalue;
};

interface SomeInterface {
  void SetValues (MyStruct values);
  MyStruct GetValues();
}
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP code for accessing MyStruct</title>
      <programlisting role="php">
&lt;?php
$obj = new OrbitObject ($ior);

$initial_values = new OrbitStruct ("IDL:MyStruct:1.0");
$initial_values->shortvalue = 42;
$initial_values->stringvalue = "HGTTG";

$obj->SetValues ($initial_values);

$values = $obj->GetValues();

echo $values->shortvalue;
echo $values->stringvalue;
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.satellite-caught-exception">
   <refnamediv>
    <refname>satellite_caught_exception</refname>
    <refpurpose>
     See if an exception was caught from the previous function
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>bool</type><methodname>satellite_caught_exception</methodname>
      <void/>
     </methodsynopsis>
    
	&warn.experimental.func;
    <para>
     This function returns &true; if an exception has been caught.
    </para>
    <para>
     <example>
      <title>Sample IDL file</title>
      <programlisting>
/* ++?????++ Out of Cheese Error. Redo From Start. */
exception OutOfCheeseError {
    int parameter;
}

interface AnotherInterface {
    void AskWhy() raises (OutOfCheeseError);
}
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>PHP code for handling CORBA exceptions</title>
      <programlisting role="php">
&lt;?php
$obj = new OrbitObject ($ior);

$obj->AskWhy();

if (satellite_caught_exception()) {
    if ("IDL:OutOfCheeseError:1.0" == satellite_exception_id()) {
        $exception = satellite_exception_value();
        echo $exception->parameter;
    }
}
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.satellite-exception-id">
   <refnamediv>
    <refname>satellite_exception_id</refname>
    <refpurpose>Get the repository id for the latest exception.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>string</type><methodname>satellite_exception_id</methodname>
      <void/>
     </methodsynopsis>
    
	&warn.experimental.func;
    <para>
     Return a repository id string. (E.g. "IDL:MyException:1.0".)  For
     example usage see
     <function>satellite_caught_exception</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.satellite-exception-value">
   <refnamediv>
    <refname>satellite_exception_value</refname>
    <refpurpose>
     Get the exception struct for the latest exception
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    
     <methodsynopsis>
      <type>OrbitStruct</type><methodname>satellite_exception_value</methodname>
      <void/>
     </methodsynopsis>
    
	&warn.experimental.func;
    <para>
     Return an exception struct.  For example usage see
     <function>satellite_caught_exception</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
